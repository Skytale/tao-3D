#!/bin/sh
#
# deployqt
#
# Our own version of macdeployqt. The original  does not support @rpath
# references in the application, which is the mechanism we are using
# (see bug #858).
#
# Copy the Qt frameworks into an application bundle, and run install_name_tool
# on the copied frameworks so that they use @rpath.
#
# Contrary to macdeployqt:
#  - The app binary is not modified: it is assumed that the install_names
#    are already OK (they are, because the script fix_qt_refs has been run
#    on the app).
#  - The macdeployqt command-line options are not supported.
#
# REVISIT:
#  - Improvement: get rid of hardcoded list (FRAMEWORKS) and Qt path
#    parameter ($2). Instead, resolve frameworks dynamically (otool -L,
#    otool -l).
#
# ******************************************************************************
# This software is property of Taodyne SAS - Confidential
# Ce logiciel est la propriété de Taodyne SAS - Confidentiel
# (C) 2011 Jerome Forissier <jerome@taodyne.com>
# (C) 2011 Christophe de Dinechin <christophe@taodyne.com>
# (C) 2011 Taodyne SAS
# ******************************************************************************

FRAMEWORKS="QtWebKit.framework/Versions/4/QtWebKit \
           phonon.framework/Versions/4/phonon \
           QtDBus.framework/Versions/4/QtDBus \
           QtXml.framework/Versions/4/QtXml \
           QtSvg.framework/Versions/4/QtSvg \
           QtOpenGL.framework/Versions/4/QtOpenGL \
           QtGui.framework/Versions/4/QtGui \
           QtNetwork.framework/Versions/4/QtNetwork \
           QtHelp.framework/Versions/4/QtHelp \
           QtSql.framework/Versions/4/QtSql \
           QtCore.framework/Versions/4/QtCore"

if [ $# -ne 2 ] ; then
  echo Usage: $0 \<app bundle directory\> \<Qt library dir\>
  echo Example: $0 path/to/MyApp.app /Library/Frameworks
  exit 1
fi

BUNDLE="$1"
FRAMEWORKS_SRC="$2"
PLUGINS_SRC="${FRAMEWORKS_SRC}/../plugins"
if [ ! -d "${PLUGINS_SRC}" ] ; then
  PLUGINS_SRC="/Developer/Applications/Qt/plugins" # Assume binary package
fi
FIX_QT_REFS=../../modules/fix_qt_refs

doo(){
  echo "[deployqt] $@"
  "$@"
}

cp_and_fix_framework() {
  # cp_framework <framework> <source> <dest>
  # Ex: cp_framework QtCore.framework/Versions/4/QtCore /Library/Frameworks ./MyApp.app/Contents/Frameworks
  FMWK="$1" ; SRC="$2" ; DEST="$3"
  FNAME=`echo ${FMWK} | sed s@/.*@@`
  FDIR=`dirname ${FMWK}`
  TODIR="$DEST/$FDIR"
  doo mkdir -p "${TODIR}"
  doo cp "${SRC}/${FMWK}" "${TODIR}"
  LIB="${DEST}/${FMWK}"
  # QtHelp has a weird dependency on libQtCLUcene which is not installed
  # in the same place as other Qt libraries
  if [ "$FNAME" = "QtHelp.framework" ] ; then
    LIB_QTCLUCENE=`otool -L "$LIB" | grep libQtCLucene | awk -F' ' '{ print $1 }'` 
    LIB_QTCLUCENE_BASE=$(basename ${LIB_QTCLUCENE})
    if [ ! -e "$LIB_QTCLUCENE" ] ; then
        # Qt 4.7.4, MacOSX Snow Leopard
        LIB_QTCLUCENE=/usr/lib/$LIB_QTCLUCENE_BASE
    fi
    doo cp $LIB_QTCLUCENE "$DEST"
    DLIB="${DEST}/${LIB_QTCLUCENE_BASE}"
    doo strip -x "${DLIB}"
    doo ${FIX_QT_REFS} "${DLIB}" "${SRC}"
  fi
  doo strip -x "${LIB}"
  doo ${FIX_QT_REFS} "${LIB}" "${SRC}"
  if [ -e "${SRC}/${FNAME}/Resources" ] ; then
    doo cp -r "${SRC}/${FNAME}/Resources" "${DEST}/${FNAME}/Resources"
  fi
}

cp_and_fix_plugins() {
  # cp_and_fix_plugins <plugins_src> <qt_framework_src> <plugins_dest>
  # Ex: cp_and_fix_plugins /Developer/Applications/Qt/plugins /Library/Frameworks ./MyApp.app/Contents
  doo cp -r "$1" "$3"
  doo rm "$3/plugins/designer/libqt3supportwidgets.dylib" "$3/plugins/accessible/libqtaccessiblecompatwidgets.dylib"
  find "$3" -name "*.dylib" -print | while read f ; do
      doo ${FIX_QT_REFS} "$f" "$2"
    done
}

make_qt_conf() {
  CONFDIR="$1/Contents/Resources"
  CONF="${CONFDIR}/qt.conf"
  doo mkdir -p "${CONFDIR}"
  echo Writing "${CONF}"
  cat >"${CONF}" <<_EOF_
[Paths]
Plugins = PlugIns
_EOF_
}

make_qt_conf_otherapps() {
  # Add a qt.conf file to apps that are included next to Tao
  # so that they reference the top-level plugins
  for a in "$1/Contents/MacOS/"*.app ; do
    CONF="${a}/Contents/Resources/qt.conf"
    cat >"${CONF}" <<_EOF_
[Paths]
Plugins = ../../../plugins
_EOF_
  done
}

#

FRAMEWORKS_DEST="${BUNDLE}/Contents/Frameworks"

doo mkdir -p "${FRAMEWORKS_DEST}"
for f in ${FRAMEWORKS} ; do
  cp_and_fix_framework "$f" "${FRAMEWORKS_SRC}" "${FRAMEWORKS_DEST}"
done

cp_and_fix_plugins "${PLUGINS_SRC}" "${FRAMEWORKS_SRC}" "${BUNDLE}/Contents"

make_qt_conf "${BUNDLE}"

make_qt_conf_otherapps "${BUNDLE}"
