// ****************************************************************************
//  graphics.tbl                                                    Tao project
// ****************************************************************************
//
//   File Description:
//
//     List of basic entry points used to create Tao documents
//
//
//
//
//
//
//
//
// ****************************************************************************
// This document is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html and Matthew 25:22 for details
//  (C) 1992-2010 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2010 Lionel Schaffhauser <lionel@taodyne.com>
//  (C) 2010 Catherine Burvelle <catherine@todyne.com>
//  (C) 2010 Taodyne SAS
// ****************************************************************************

// ============================================================================
//
// Getting attributes
//
// ============================================================================

PREFIX(Page, text, "page", PARM(n, text) PARM(b, tree), RTAO(page(self,n,b)), 
       "/*| docname \"page\", \"page\", do { \
                dsyntax <<page name, content>>;\
                synopsis \"Create a new page.\" ; \
                description <<Create a new page in the document with the specified name and content.>> ;\
                parameters;\
                parameter \"text\", \"name\", <<The name of the page. [TODO ddd: What's happen if the name is not unique in the document ?]>>;\
                parameter \"tree\", \"content\", <<The content of the page.>>;\
                return_value \"text\", <<The name of the previously named page>>;\
                }\
          |*/")
PREFIX(PageLink, text, "page_link", PARM(k, text) PARM(n, text),
       RTAO(pageLink(self, k, n)), 
       "/*| docname \"page_link\", \"page\", do { \
                dsyntax <<page_link key, name>>;\
                synopsis \"Indicate the chaining of pages.\" ; \
                description <<Links the key with the named page.>> ;\
                parameters;\
                parameter \"text\", \"key\", <<The key name.>>;\
                parameter \"text\", \"name\", <<The name of the page to link>>;\
                return_value \"text\", <<The name of the page previously linked to this key.>>;\
                }\
          |*/")
PREFIX(GotoPage, text, "goto_page", PARM(p, text), RTAO(gotoPage(self, p)), 
       "/*| docname \"goto_page\", \"page\", do { \
                dsyntax <<goto_page name>>;\
                synopsis \"Directly go to the given page.\" ; \
                description <<Directly go to the given page.>> ;\
                parameters;\
                parameter \"text\", \"The name of the page to reach.\", <<>>;\
                return_value \"text\", <<The name of the previously shown page.>>;\
                }\
          |*/")

PREFIX(PageLabel,   text,     "page_label", ,   RTAO(pageLabel(self)), 
       "/*| docname \"page_label\", \"page\", do { \
                dsyntax <<page_label>>;\
                synopsis \"The current page name.\" ; \
                description <<Return the current page name>> ;\
                return_value \"text\", <<Return the label of the current page>>;\
                }\
          |*/")
PREFIX(PageId,      integer,  "page_number", ,  RTAO(pageNumber(self)), 
       "/*| docname \"page_number\", \"page\", do { \
                dsyntax <<page_number>>;\
                synopsis \"The current page number\" ; \
                description <<Return the number of the current page>> ;\
                return_value \"integer\", <<Return the number of the current page>>;\
                }\
          |*/")
PREFIX(PageCount,   integer,  "page_count", ,   RTAO(pageCount(self)), 
       "/*| docname \"page_count\", \"page\", do { \
                dsyntax <<page_count>>;\
                synopsis \"The number of page.\" ; \
                description <<Return the number of pages in the current document>> ;\
                return_value \"integer\", <<Return the number of pages in the current document>>;\
                }\
          |*/")
PREFIX(PageWidth,   real,     "page_width", ,   RTAO(pageWidth(self)), 
       "/*| docname \"page_width\", \"page\", do { \
                dsyntax <<page_width>>;\
                synopsis \"Return the width of pages\" ; \
                description <<Return the width of pages>> ;\
                return_value \"real\", <<Return the width of pages>>;\
                }\
          |*/")
PREFIX(PageHeight,  real,     "page_height", ,  RTAO(pageHeight(self)), 
       "/*| docname \"page_height\", \"page\", do { \
                dsyntax <<page_height>>;\
                synopsis \"Return the height of pages\" ; \
                description <<Return the height of pages>> ;\
                return_value \"real\", <<Return the height of pages>>;\
                }\
          |*/")
PREFIX(FrameWidth,  real,     "frame_width", ,  RTAO(frameWidth(self)), 
       "/*| docname \"frame_width\", \"frame\", do { \
                dsyntax <<frame_width>>;\
                synopsis \"Return the width of the current layout frame\" ; \
                description <<Return the width of the current layout frame>> ;\
                return_value \"real\", <<Return the width of the current layout frame>>;\
                }\
          |*/")
PREFIX(FrameHeight, real,     "frame_height", , RTAO(frameHeight(self)), 
       "/*| docname \"frame_height\", \"frame\", do { \
                dsyntax <<frame_height>>;\
                synopsis \"Return the height of the current layout frame\" ; \
                description <<Return the height of the current layout frame>> ;\
                return_value \"real\", <<Return the height of the current layout frame>>;\
                }\
          |*/")
PREFIX(FrameDepth,  real,     "frame_depth", ,  RTAO(frameDepth(self)), 
       "/*| docname \"frame_depth\", \"frame\", do { \
                dsyntax <<frame_depth>>;\
                synopsis \"Return the depth of the current layout frame\" ; \
                description <<Return the depth of the current layout frame>> ;\
                return_value \"real\", <<Return the depth of the current layout frame>>;\
                }\
          |*/")
PREFIX(WindowWidth, real,     "window_width", , RTAO(windowWidth(self)), 
       "/*| docname \"window_width\", \"window\", do { \
                dsyntax <<window_width>>;\
                synopsis \"Return the width of the window in which we display\" ; \
                description <<Return the width of the window in which we display>> ;\
                return_value \"real\", <<Return the width of the window in which we display>>;\
                }\
          |*/")
PREFIX(WindowHeight,real,     "window_height", ,RTAO(windowHeight(self)), 
       "/*| docname \"window_height\", \"window\", do { \
                dsyntax <<window_height>>;\
                synopsis \"Return the height of window in which we display\" ; \
                description <<Return the height of window in which we display>> ;\
                return_value \"real\", <<Return the height of window in which we display>>;\
                }\
          |*/")
PREFIX(DaySeconds,  real,     "time", ,         RTAO(time(self)), 
       "/*| docname \"time\", \"time\", do { \
                dsyntax <<time>>;\
                synopsis \"Return a fractional time, including milliseconds\" ; \
                description <<Returns the current document's time or the time at wich the document was frozen.>> ;\
               return_value \"real\", <<Return a fractional time, including milliseconds>>;\
                }\
          |*/")
PREFIX(PageSeconds, real,     "page_time", ,    RTAO(pageTime(self)), 
       "/*| docname \"page_time\", \"time\", do { \
                dsyntax <<page_time>>;\
                synopsis \"Returns the page time\" ; \
                description <<Returns the time of the current page relatively to the current document's time, or relatively to the frozen time.>> ;\
                return_value \"\", <<Return a fractional time, including milliseconds>>;\
                }\
          |*/")
PREFIX(After,       real,     "after", PARM(d, real) PARM(c, tree),
       RTAO(after(self, d, c)), 
       "/*| docname \"after\", \"time\", do { \
                dsyntax <<after delay, code>>;\
                synopsis \"Wait for time to execute code\" ; \
                description <<Execute the given code only after the specified amount of time.>> ;\
                parameters;\
                parameter \"real\", \"delay\", <<The delay in second. Sensitive upto millisecond.>>;\
                parameter \"tree\", \"code\", <<The code to execute.>>;\
                return_value \"real\", <<The real elapsed time.>>;\
                }\
          |*/")
PREFIX(Every,       real,     "every",
       PARM(i, real) PARM(d, real) PARM(c, tree),
       RTAO(every(self, i, d, c)), "")
PREFIX(Every50Pct,  real,     "every",
       PARM(i, real) PARM(c, tree),
       RTAO(every(self, i, 0.5, c)),
       "/*| docname \"every\", \"time\", do { \
                dsyntax <<every interval, duty, code>>;\
                dsyntax <<every interval, code>>;\
                synopsis \"Code executed every interval.\" ; \
                description <<[TODO ddd: Explication...]>> ;\
                parameters;\
                parameter \"real\", \"interval\", <<[TODO ddd: Explication...]>>;\
                parameter \"real\", \"duty\", <<[TODO ddd: Explication...]. If not given the default value is 0.5>>;\
                parameter \"tree\", \"code\", <<The code to be executed>>;\
                return_value \"real\", <<The real elapsed time.>>;\
                }\
          |*/")

PREFIX(MouseX, real, "mouse_x", ,RTAO(mouseX(self)), 
       "/*| docname \"mouse_x\", \"mouse\", do { \
                dsyntax <<mouse_x>>;\
                synopsis \"Mouse x-coordinate\" ; \
                description <<Mouse x-coordinate>> ;\
                return_value \"real\", <<Return the position of the mouse>>;\
                }\
          |*/")
PREFIX(MouseY, real, "mouse_y", ,RTAO(mouseY(self)), 
       "/*| docname \"mouse_y\", \"mouse\", do { \
                dsyntax <<mouse_y>>;\
                synopsis \"Mouse y-coordinate\" ; \
                description <<Mouse y-coordinate>> ;\
                return_value \"real\", <<Return the position of the mouse>>;\
                }\
          |*/")
PREFIX(MouseButtons, integer, "mouse_buttons", , RTAO(mouseButtons(self)), 
       "/*| docname \"mouse_buttons\", \"mouse\", do { \
                dsyntax <<mouse_buttons>>;\
                synopsis \"Return the buttons of the last mouse event\" ; \
                description <<Return the buttons of the last mouse event. It is an OR combination of following values:\n\
Qt::NoButton	0x00000000	The button state does not refer to any button (see QMouseEvent::button()).\n\
Qt::LeftButton	0x00000001	The left button is pressed, or an event refers to the left button. (The left button may be the right button on left-handed mice.)\n\
Qt::RightButton	0x00000002	The right button.\n\
Qt::MidButton	0x00000004	The middle button.\n\
Qt::XButton1	0x00000008	The first X button.\n\
Qt::XButton2	0x00000010	The second X button.\n\
>> ;\
                return_value \"integer\", <<Return the buttons of the last mouse event>>;\
                }\
          |*/")
PREFIX(ShapeAction, tree, "on",PARM(n,text) PARM(t,tree),
       RTAO(shapeAction(self,n,t)), 
       "/*| docname \"on\", \"mouse\", do { \
                dsyntax <<on action, code>>;\
                synopsis \"Associate the specified code to the named action.\" ; \
                description <<Associate the specified code to the named action. This code is then executed when the action occurs on the current shape.\">> ;\
                parameters;\
                parameter \"text\", \"action\", <<The action name>>;\
                parameter \"tree\", \"code\", <<The code to execute>>;\
                }\
          |*/")
PREFIX(ShapeClickAction, tree, "on_click",PARM(t,tree),
       RTAO(shapeAction(self,"click",t)), 
       "/*| docname \"on_click\", \"mouse\", do { \
                dsyntax <<on_click code>>;\
                synopsis \"Associate code with click.\" ; \
                description <<Associate the specified code to the click>> ;\
                parameters;\
                parameter \"tree\", \"code\", <<The code to execute>>;\
                see \"on\";\
                }\
          |*/")
PREFIX(ShapeMouseoverAction, tree, "on_mouseover",PARM(t,tree),
       RTAO(shapeAction(self,"mouseover",t)), 
       "/*| docname \"on_mouseover\", \"mouse\", do { \
                dsyntax <<on_mouseover code>>;\
                synopsis \"Associate code with mouse over\" ; \
                description <<Associate the specified code to the mouse over>> ;\
                parameters;\
                parameter \"tree\", \"code\", <<The code to execute>>;\
                see \"on\";\
                }\
          |*/")



// ============================================================================
//
// Preserving attributes
//
// ============================================================================

PREFIX(Locally, tree, "locally", PARM(t, tree), RTAO(locally(self, t)), 
       "/*| docname \"locally\", \"code\", do { \
                dsyntax <<locally code>>;\
                synopsis \"Make a local context\" ; \
                description <<Evaluate the child tree while preserving the current state>> ;\
                parameters;\
                parameter \"tree\", \"code\", <<The code to execute in a local context>>;\
                return_value \"tree\", <<The result of the child execution.>>;\
                }\
          |*/")
PREFIX(Shape,   tree, "shape",   PARM(t, tree), RTAO(shape(self, t)), 
       "/*| docname \"shape\", \"code:graph\", do { \
                dsyntax <<shape code>>;\
                synopsis \"Make the shape selectable\" ; \
                description <<Evaluate the child and mark the current shape. Make the shape sensible to mosue events like selection, motion, rotation...>> ;\
                parameters;\
                parameter \"tree\", \"code\", <<The code of the shape.>>;\
                return_value \"\", <<The result of the child execution.>>;\
                }\
          |*/")
PREFIX(Widget,  tree, "active_widget", PARM(t,tree), RTAO(activeWidget(self,t)), 
       "/*| docname \"active_widget\", \"code:graph:widget\", do { \
                dsyntax <<active_widget code>>;\
                synopsis \"Make the widget clickable\" ; \
                description <<Create a context for active widgets, e.g. buttons>> ;\
                parameters;\
                parameter \"tree\", \"code\", <<The code that represent the widget.>>;\
                return_value \"tree\", <<The result of the child execution.>>;\
                }\
          |*/")
PREFIX(Anchor,  tree, "anchor",   PARM(t, tree), RTAO(anchor(self, t)), 
       "/*| docname \"anchor\", \"graph\", do { \
                dsyntax <<anchor code>>;\
                synopsis \"\" ; \
                description <<Anchor a set of shapes to the current position>> ;\
                parameters;\
                parameter \"tree\", \"code\", <<The code that represent the shapes to be anchored.>>;\
                return_value \"tree\", <<The result of the child execution.>>;\
                }\
          |*/")



// ============================================================================
//
//   Transforms
//
// ============================================================================

PREFIX(ResetTransform, tree, "reset_transform", , RTAO(resetTransform(self)), 
       "/*| docname \"reset_transform\", \"graph:transform\", do { \
                dsyntax <<reset_transform>>;\
                synopsis \"Reset transform\" ; \
                description <<Reset transform to original projection state.>> ;\
                }\
          |*/")

PREFIX(RotateX, tree, "rotatex", PARM(rx, real), RTAO(rotatex(self, rx)), 
       "/*| docname \"rotatex\", \"graph:transform\", do { \
                dsyntax <<rotatex rx>>;\
                synopsis \"Rotate around X\" ; \
                description <<Rotate around X axis.>> ;\
                parameters;\
                parameter \"real\", \"rx\", <<The angle of rotation in degree.[TODO : check the unit]>>;\
                }\
          |*/")
PREFIX(RotateY, tree, "rotatey", PARM(ry, real), RTAO(rotatey(self, ry)), 
       "/*| docname \"rotatey\", \"graph:transform\", do { \
                dsyntax <<rotatey ry>>;\
                synopsis \"Rotate around Y\" ; \
                description <<Rotate around Y axis.>> ;\
                parameters;\
                parameter \"real\", \"ry\", <<The angle of rotation in degree.[TODO : check the unit]>>;\
                }\
          |*/")
PREFIX(RotateZ, tree, "rotatez", PARM(rz, real), RTAO(rotatez(self, rz)), 
       "/*| docname \"rotatez\", \"graph:transform\", do { \
                dsyntax <<rotatez rz>>;\
                synopsis \"Rotate around Z\" ; \
                description <<Rotate around Z axis.>> ;\
                parameters;\
                parameter \"real\", \"rz\", <<The angle of rotation in degree.[TODO : check the unit]>>;\
                }\
          |*/")
PREFIX(Rotate, tree, "rotate",
       PARM(ra, real) PARM(rx, real) PARM(ry, real) PARM(rz, real),
       RTAO(rotate(self, ra, rx, ry, rz)), 
       "/*| docname \"rotate\", \"graph:transform\", do { \
                dsyntax <<rotate rx, ry, rz>>;\
                synopsis \"Rotation\" ; \
                description <<Rotation along an arbitrary axis>> ;\
                parameters;\
                parameter \"real\", \"ra\", <<[TODO : A-t-on une rotation autour de l'axe du temps ???]>>;\
                parameter \"real\", \"rx\", <<angle around X-axis>>;\
                parameter \"real\", \"ry\", <<angle around Y-axis>>;\
                parameter \"real\", \"rz\", <<angle around Z-axis>>;\
                }\
          |*/")

PREFIX(TransX, tree, "translatex", PARM(x, real), RTAO(translatex(self, x)), 
       "/*| docname \"translatex\", \"graph:transform\", do { \
                dsyntax <<translatex x>>;\
                synopsis \"Translate along X\" ; \
                description <<Translate along X-axis>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x translation.>>;\
                }\
          |*/")
PREFIX(TransY, tree, "translatey", PARM(y, real), RTAO(translatey(self, y)), 
       "/*| docname \"translatey\", \"graph:transform\", do { \
                dsyntax <<translatey>>;\
                synopsis \"Translate along Y\" ; \
                description <<Translate along Y-axis>> ;\
                parameters;\
                parameter \"real\", \"y\", <<y translation.>>;\
                }\
          |*/")
PREFIX(TransZ, tree, "translatez", PARM(z, real), RTAO(translatez(self, z)), 
       "/*| docname \"translatez\", \"graph:transform\", do { \
                dsyntax <<translatez>>;\
                synopsis \"Translate along Z\" ; \
                description <<Translate along Z-axis>> ;\
                parameters;\
                parameter \"real\", \"z\", <<z translation.>>;\
                }\
          |*/")
PREFIX(Translate, tree, "translate",
       PARM(x, real) PARM(y, real) PARM(z, real),
       RTAO(translate(self, x, y, z)), 
       "/*| docname \"translate\", \"graph:transform\", do { \
                dsyntax <<translate x, y, z>>;\
                synopsis \"Translation along three axes\" ; \
                description <<Translation along three axes>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x translation.>>;\
                parameter \"real\", \"y\", <<y translation.>>;\
                parameter \"real\", \"z\", <<z translation.>>;\
                }\
          |*/")

PREFIX(ScaleX, tree, "scalex", PARM(x, real), RTAO(rescalex(self, x)), 
       "/*| docname \"scalex\", \"graph:transform\", do { \
                dsyntax <<scalex x>>;\
                synopsis \"Rescale along X\" ; \
                description <<Rescale along X-axis>> ;\
                parameters;\
                parameter \"real\", \"x\", <<scale factor.>>;\
                }\
          |*/")
PREFIX(ScaleY, tree, "scaley", PARM(y, real), RTAO(rescaley(self, y)), 
       "/*| docname \"scaley\", \"graph:transform\", do { \
                dsyntax <<scaley y>>;\
                synopsis \"Rescale along Y\" ; \
                description <<Rescale along Y-axis>> ;\
                parameters;\
                parameter \"real\", \"y\", <<scale factor.>>;\
                }\
          |*/")
PREFIX(ScaleZ, tree, "scalez", PARM(z, real), RTAO(rescalez(self, z)), 
       "/*| docname \"scalez\", \"graph:transform\", do { \
                dsyntax <<scalez z>>;\
                synopsis \"Rescale along Z\" ; \
                description <<Rescale along Z-axis>> ;\
                parameters;\
                parameter \"real\", \"z\", <<scale factor.>>;\
                }\
          |*/")
PREFIX(Scale, tree, "scale",
       PARM(x, real) PARM(y, real) PARM(z, real),
       RTAO(rescale(self, x, y, z)), 
       "/*| docname \"scale\", \"graph:transform\", do { \
                dsyntax <<scale x, y, z>>;\
                synopsis \"Scaling along three axes\" ; \
                description <<Scaling along three axes>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-scale factor.>>;\
                parameter \"real\", \"y\", <<y-scale factor.>>;\
                parameter \"real\", \"z\", <<z-scale factor.>>;\
                }\
          |*/")



// ============================================================================
//
//    Setting attributes
//
// ============================================================================

PREFIX(EnableDepthTest, boolean, "enable_depth_test",,
       RTAO(depthTest(self, true)), 
       "/*| docname \"enable_depth_test\", \"code:graph\", do { \
                dsyntax <<enable_depth_test>>;\
                synopsis \"\" ; \
                description << [TODO : Je ne vois pas vraiment...] >> ;\
                }\
          |*/")
PREFIX(DisableDepthTest, boolean, "disable_depth_test",,
       RTAO(depthTest(self, false)), 
       "/*| docname \"disable_depth_test\", \"code:graph\", do { \
                dsyntax <<disable_depth_test>>;\
                synopsis \"\" ; \
                description <<[TODO : Je ne vois pas vraiment...]>> ;\
                }\
          |*/")
PREFIX(Refresh, tree, "refresh", PARM(d, real), RTAO(refresh(self, d)), 
       "/*| docname \"refresh\", \"code:graph:time\", do { \
                dsyntax <<refresh d>>;\
                synopsis \"Refresh after d second\" ; \
                description <<Refresh the screen after the given time interval>> ;\
                parameters;\
                parameter \"real\", \"d\", <<The delay to wait.>>;\
                return_value \"boolean\", <<>>;\
                }\
          |*/")
PREFIX(ShowSource, boolean, "show_source", PARM(an, boolean),
       RTAO(showSource(self, an)), 
       "/*| docname \"show_source\", \"gui\", do { \
                dsyntax <<show_source an>>;\
                synopsis \"Source pane view\" ; \
                description <<Show or hide the source pane.>> ;\
                parameters;\
                parameter \"boolean\", \"an\", <<Show the source pane if true.>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FullScreen, boolean, "full_screen", PARM(fs, boolean),
       RTAO(fullScreen(self, fs)), 
       "/*| docname \"full_screen\", \"gui\", do { \
                dsyntax <<full_screen fs>>;\
                synopsis \"Switch to full screen\" ; \
                description <<Set the full screen mode>> ;\
                parameters;\
                parameter \"boolean\", \"fs\", <<on or off>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(ToggleFullScreen, boolean, "toggle_full_screen", ,
       RTAO(toggleFullScreen(self)), 
       "/*| docname \"toggle_full_screen\", \"gui\", do { \
                dsyntax <<toggle_full_screen>>;\
                synopsis \"Toggle the full screen mode\" ; \
                description <<Toggle the full screen mode>> ;\
                }\
          |*/")
PREFIX(ResetView, boolean, "reset_view", ,
       RTAO(resetView(self)), 
       "/*| docname \"reset_view\", \"gui\", do { \
                dsyntax <<reset_view>>;\
                synopsis \"Reset view to default parameters\" ; \
                description <<Restore default view parameters (zoom, position etc.)>> ;\
                }\
          |*/")
PREFIX(PanEye, boolean, "pan", PARM(dx, real) PARM(dy, real),
       RTAO(panView(self,dx,dy)), 
       "/*| docname \"pan\", \"gui\", do { \
                dsyntax <<pan dx, dy>>;\
                synopsis \"Pan the current view by the current amount\" ; \
                description <<Pan the current view by the current amount in x and y axis>> ;\
                parameters;\
                parameter \"real\", \"dx\", <<value for x-axis>>;\
                parameter \"real\", \"dy\", <<value for y-axis>>;\
                }\
          |*/")
PREFIX(GetZoom, real, "zoom", , RTAO(currentZoom(self)), "")
PREFIX(SetZoom, boolean, "zoom", PARM(z, real), RTAO(setZoom(self, z)), 
       "/*| docname \"zoom\", \"gui\", do { \
                synopsis \"zoom manipulation\" ; \
                dsyntax <<zoom>>;\
                description <<Get the zoom level>> ;\
                return_value \"real\", <<the current zoom factor>>;\
                dsyntax <<zoom z>>;\
                description <<Set the zoom level>> ;\
                parameters;\
                parameter \"real\", \"z\", <<the zoom factor>>;\
                }\
          |*/")
PREFIX(GetEye, infix, "eye_position", , RTAO(currentEyePosition(self)), "")
PREFIX(SetEye, boolean, "eye_position", PARM(x, real) PARM(y, real),
       RTAO(setEyePosition(self,x,y)), 
       "/*| docname \"eye_position\", \"gui\", do { \
                synopsis \"eye position manipulation\" ; \
                dsyntax <<eye_position>>;\
                return_value \"infix\", <<(x,y) :the current eye position.>>;\
                description <<Get the eye position value.>> ;\
                dsyntax <<eye_position x, y>>;\
                description <<Set the eye position value.>> ;\
                parameters;\
                parameter \"real\", \"x\", <<eye position on x-axis>>;\
                parameter \"real\", \"y\", <<eye position on y-axis>>;\
                }\
          |*/")
PREFIX(GetCenter, infix, "center_position", , RTAO(currentCenterPosition(self)),  "")
PREFIX(SetCenter, boolean, "center_position", PARM(x, real) PARM(y, real),
       RTAO(setCenterPosition(self,x,y)), 
       "/*| docname \"center_position\", \"gui\", do { \
                synopsis \"Center position management\" ; \
                dsyntax <<center_position>>;\
                description <<Return the current center position>> ;\
                return_value \"infix\", <<(x,y) : the current center position>>;\
                dsyntax <<center_position x, y>>;\
                description <<Set the current center position>> ;\
                parameters;\
                parameter \"real\", \"x\", <<eye position on x-axis>>;\
                parameter \"real\", \"y\", <<eye position on y-axis>>;\
                }\
          |*/")
PREFIX(ToggleHandCursor, boolean, "toggle_hand_cursor", ,
       RTAO(toggleHandCursor(self)), 
       "/*| docname \"toggle_hand_cursor\", \"gui\", do { \
                dsyntax <<toggle_hand_cursor>>;\
                synopsis \"Switch between hand and arrow cursor\" ; \
                description <<Switch between hand and arrow cursor>> ;\
                return_value \"boolean\", <<>>;\
                }\
          |*/")
PREFIX(KeyboardModifiers, integer, "keyboard_modifiers", ,
       RTAO(lastModifiers(self)), 
       "/*| docname \"keyboard_modifiers\", \"code\", do { \
                dsyntax <<keyboard_modifiers>>;\
                synopsis \"Get the current modifiers\" ; \
                description <<Get the current keyboard modifiers. The value is an OR combination of the following :\n\
Qt::NoModifier	0x00000000	No modifier key is pressed.\n\
Qt::ShiftModifier	0x02000000	A Shift key on the keyboard is pressed.\n\
Qt::ControlModifier	0x04000000	A Ctrl key on the keyboard is pressed.\n\
Qt::AltModifier	0x08000000	An Alt key on the keyboard is pressed.\n\
Qt::MetaModifier	0x10000000	A Meta key on the keyboard is pressed.\n\
Qt::KeypadModifier	0x20000000	A keypad button is pressed.\n\
Qt::GroupSwitchModifier	0x40000000	X11 only. A Mode_switch key on the keyboard is pressed.\n\
Note: On Mac OS X, the ControlModifier value corresponds to the Command keys on the Macintosh keyboard, and the MetaModifier value corresponds to the Control keys. The KeypadModifier value will also be set when an arrow key is pressed as the arrow keys are considered part of the keypad.\n\
Note: On Windows Keyboards, Qt::MetaModifier and Qt::Key_Meta are mapped to the Windows key.>> ;\
                return_value \"integer\", <<Return the current modifiers>>;\
                }\
          |*/")
PREFIX(EnableAnimations, boolean, "enable_animations", PARM(an, boolean),
       RTAO(enableAnimations(self, an)), 
       "/*| docname \"enable_animations\", \"gui\", do { \
                dsyntax <<enable_animations an>>;\
                synopsis \"Enable or disable animations\" ; \
                description <<Enable or disable animations>> ;\
                parameters;\
                parameter \"boolean\", \"an\", <<on or off>>;\
                return_value \"boolean\", <<True if previous state was on.>>;\
                }\
          |*/")
PREFIX(EnableStereoscopy, boolean, "enable_stereoscopy", PARM(f, boolean),
       RTAO(enableStereoscopy(self, f)), 
       "/*| docname \"enable_stereoscopy\", \"gui\", do { \
                dsyntax <<enable_stereoscopy s>>;\
                synopsis \"Enable or disable stereoscopie mode\" ; \
                description <<Enable or disable stereoscopie mode>> ;\
                parameters;\
                parameter \"boolean\", \"s\", <<on or off>>;\
                return_value \"\", <<True if previous state was on.>>;\
                }\
          |*/")
PREFIX(PolygonOffset, integer, "polygon_offset",
       PARM(f0, real) PARM(f1, real) PARM(u0, real) PARM(u1, real),
       RTAO(polygonOffset(self, f0, f1, u0, u1)), 
       "/*| docname \"polygon_offset\", \"graph\", do { \
                dsyntax <<polygon_offset f0, f1, u0, u1>>;\
                synopsis \"Set the polygon offset factors\" ; \
                description <<Set the polygon offset factors>> ;\
                parameters;\
                parameter \"real\", \"f0\", <<factor base>>;\
                parameter \"real\", \"f1\", <<factor increment>>;\
                parameter \"real\", \"u0\", <<unit base>>;\
                parameter \"real\", \"u1\", <<unit increment>>;\
                return_value \"integer\", <<the current polygon offset>>;\
                }\
          |*/")
PREFIX(PrintOnePage, boolean, "print_page", , RTAO(printPage(self, "")), "")
PREFIX(printPage, boolean, "print_page", PARM(f, text), RTAO(printPage(self,f)), 
       "/*| docname \"print_page\", \"export\", do { \
                dsyntax <<print_page>>;\
                dsyntax <<print_page f>>;        \
                synopsis \"Print a page\" ; \
                description <<Print a page either to a file or by picking file>> ;\
                parameters;\
                parameter \"text\", \"f\", <<file name. If empty a dialog box pops up.>>;\
                }\
          |*/")



// ============================================================================
//
//    Graphic attributes
//
// ============================================================================

PREFIX(LineColorName, tree, "line_color",
       PARM(n, text) PARM(a, real),
       RTAO(lineColorName(self, n, a)),
       "/*| docname \"color\", \"graph:attribute\", do { \
                dsyntax <<line_color name, a>>;\
                dsyntax <<line_color r, g, b, a>>;\
                dsyntax <<line_color_hsl h, s, l, a>>;\
                dsyntax <<line_color_hsv h, s, v, a>>;\
                dsyntax <<line_color_cmyk c, m, y, k, a>>;\
                synopsis \"Set the line color\" ; \
                description <<Set the color for lines.>> ;\
                parameters;\
                parameter \"text\", \"name\", <<The name of the color, which can be one of the SVG color keywork names, or in one of these formats: #RGB or #RRGGBB  (each of R, G, and B being a single hex digit).>>;\
                parameter \"real\", \"r\", <<The red component of an color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"g\", <<The blue component of an RGB color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"b\", <<The green component of an RGB color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"h\", <<The hue of an HSL or HSV color, is in the range 0.0 to 1.0 if the color is chromatic (not gray), or meaningless if it is gray. It represents degrees/360 on the color wheel familiar to most people. Red is 0, green is 1/3, and blue is 2/3.>>;\
                parameter \"real\", \"s\", <<The saturation of an HSL or HSV color, is in the range 0.0 to 1.0, and the bigger it is, the stronger the color is. Grayish colors have saturation near 0; very strong colors have saturation near 1.>>;\
                parameter \"real\", \"l\", <<The lightness an HSL color, is in the range 0.0 to 1.0. 0 is black; 1 is as far from black as possible. In the HSL model, lightness is defined as the average of the largest and smallest color components.>>;\
                parameter \"real\", \"v\", <<The value or brightness of an HSV color, is in the range 0.0 to 1.0. 0 is black; 1 is as far from black as possible. In the HSV model, value is defined as the largest component of a color.>>;\
                parameter \"real\", \"c\", <<The cyan component of the a color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"m\", <<The magenta component of a CMYK color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"y\", <<The Yellow component of a CMYK color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"k\", <<The black component of a CMYK color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"a\", <<The alpha channel, transparency of the color, is in the range 0.0 to 1.0. >>;\
                }\
          |*/")
PREFIX(LineColorRGB, tree, "line_color",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(lineColorRgb(self, r, g, b, a)),
       "")
PREFIX(LineColorHSL, tree, "line_color_hsl",
       PARM(h, real) PARM(s, real) PARM(l, real) PARM(a, real),
       RTAO(lineColorHsl(self, h, s, l, a)),
       "")
PREFIX(LineColorHSV, tree, "line_color_hsv",
       PARM(h, real) PARM(s, real) PARM(v, real) PARM(a, real),
       RTAO(lineColorHsv(self, h, s, v, a)),
       "")
PREFIX(LineColorCMYK, tree, "line_color_cmyk",
       PARM(c, real) PARM(m, real) PARM(y, real) PARM(k, real) PARM(a, real),
       RTAO(lineColorCmyk(self, c, m, y, k, a)),
       "")
PREFIX(LineWidth, tree, "line_width", PARM(lw, real), RTAO(lineWidth(self, lw)), 
       "/*| docname \"line_width\", \"graph:attribute\", do { \
                dsyntax <<line_width lw>>;\
                synopsis \"Select the line width for OpenGL\" ; \
                description <<Set the line width for OpenGL>> ;\
                parameters;\
                parameter \"real\", \"lw\", <<The line width to set.>>;\
                }\
          |*/")
PREFIX(LineStipple, tree, "line_stipple",
       PARM(p, integer) PARM(s, integer),
       RTAO(lineStipple(self, p, s)), 
       "/*| docname \"line_stipple\", \"graph:attribute\", do { \
                dsyntax <<line_stipple p, s>>;\
                synopsis \"line stipple pattern\" ; \
                description <<Select the line stipple pattern for OpenGL>> ;\
                parameters;\
                parameter \"integer\", \"p\", <<pattern [TODO: which value to which pattern ?]>>;\
                parameter \"integer\", \"s\", <<scale>>;\
                }\
          |*/")
PREFIX(FillColorName, tree, "color",
       PARM(n, text) PARM(a, real),
       RTAO(fillColorName(self, n, a)),
       "/*| docname \"color\", \"graph:attribute\", do { \
                dsyntax <<color name, a>>;\
                dsyntax <<color r, g, b, a>>;\
                dsyntax <<color_hsl h, s, l, a>>;\
                dsyntax <<color_hsv h, s, v, a>>;\
                dsyntax <<color_cmyk c, m, y, k, a>>;\
                synopsis \"Set the fill color\" ; \
                description <<Set the color for fill.>> ;\
                parameters;\
                parameter \"text\", \"name\", <<The name of the color, which can be one of the SVG color keywork names, or in one of these formats: #RGB or #RRGGBB  (each of R, G, and B being a single hex digit).>>;\
                parameter \"real\", \"r\", <<The red component of an color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"g\", <<The blue component of an RGB color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"b\", <<The green component of an RGB color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"h\", <<The hue of an HSL or HSV color, is in the range 0.0 to 1.0 if the color is chromatic (not gray), or meaningless if it is gray. It represents degrees/360 on the color wheel familiar to most people. Red is 0, green is 1/3, and blue is 2/3.>>;\
                parameter \"real\", \"s\", <<The saturation of an HSL or HSV color, is in the range 0.0 to 1.0, and the bigger it is, the stronger the color is. Grayish colors have saturation near 0; very strong colors have saturation near 1.>>;\
                parameter \"real\", \"l\", <<The lightness an HSL color, is in the range 0.0 to 1.0. 0 is black; 1 is as far from black as possible. In the HSL model, lightness is defined as the average of the largest and smallest color components.>>;\
                parameter \"real\", \"v\", <<The value or brightness of an HSV color, is in the range 0.0 to 1.0. 0 is black; 1 is as far from black as possible. In the HSV model, value is defined as the largest component of a color.>>;\
                parameter \"real\", \"c\", <<The cyan component of the a color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"m\", <<The magenta component of a CMYK color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"y\", <<The Yellow component of a CMYK color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"k\", <<The black component of a CMYK color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"a\", <<The alpha channel, transparency of the color, is in the range 0.0 to 1.0. >>;\
                }\
          |*/")
PREFIX(FillColorRGB, tree, "color",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(fillColorRgb(self, r, g, b, a)),
       "")
PREFIX(FillColorHSL, tree, "color_hsl",
       PARM(h, real) PARM(s, real) PARM(l, real) PARM(a, real),
       RTAO(fillColorHsl(self, h, s, l, a)),
       "")
PREFIX(FillColorHSV, tree, "color_hsv",
       PARM(h, real) PARM(s, real) PARM(v, real) PARM(a, real),
       RTAO(fillColorHsv(self, h, s, v, a)),
       "")
PREFIX(FillColorCMYK, tree, "color_cmyk",
       PARM(c, real) PARM(m, real) PARM(y, real) PARM(k, real) PARM(a, real),
       RTAO(fillColorCmyk(self, c, m, y, k, a)),
       "")
PREFIX(FillTexture, tree, "texture", PARM(n, text),
       RTAO(fillTexture(self, n)), 
       "/*| docname \"texture\", \"graph:attribute\", do { \
                dsyntax <<texture img>>;\
                synopsis \"Create a GL texture\" ; \
                description <<Build a GL texture out of an image file. Supported format are:\n\
BMP	Windows Bitmap\n\
GIF	Graphic Interchange Format (optional)\n\
JPG	Joint Photographic Experts Group\n\
JPEG	Joint Photographic Experts Group\n\
PNG	Portable Network Graphics\n\
PBM	Portable Bitmap\n\
PGM	Portable Graymap\n\
PPM	Portable Pixmap\n\
TIFF	Tagged Image File Format\n\
XBM	X11 Bitmap\n\
XPM	X11 Pixmap>> ;\
                parameters;\
                parameter \"text\", \"img\", <<The image filename.>>;\
                }\
          |*/")
PREFIX(FillTextureSVG, tree,"svg", PARM(img, text),
       RTAO(fillTextureFromSVG(self, img)), 
       "/*| docname \"svg\", \"graph\", do { \
                dsyntax <<svg img>>;\
                synopsis \"Create a texture from an SVG\" ; \
                description <<Draw an image from an SVG format>> ;\
                parameters;\
                parameter \"text\", \"img\", <<The image filename.>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(ImageA, tree,"image",
       PARM(x, real) PARM(y, real) PARM(w, real) PARM(h, real) PARM(img, text),
       RTAO(image(self, x, y, w, h, img)), "")
PREFIX(ImageB, tree,"image",
       PARM(x, real) PARM(y, real) PARM(img, text),
       RTAO(image(self, x, y, img)), 
       "/*| docname \"image\", \"graph\", do { \
                synopsis \"Make an image\" ; \
                dsyntax <<image x, y, w, h, img >>;\
                dsyntax <<image x, y, img >>;\
                description <<Make an image. image x,y,img rewrites the source with image x,y,w,h,img where w and h are the original size of the image.>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate of the image>>;\
                parameter \"real\", \"y\", <<y-coordinate of the image>>;\
                parameter \"real\", \"w\", <<width of the image>>;\
                parameter \"real\", \"h\", <<height of the image>>;\
                parameter \"text\", \"img\", <<image file name>>;\
                }\
          |*/")
PREFIX(TextureWrap, tree, "texture_wrap", PARM(s, boolean) PARM(t, boolean),
       RTAO(textureWrap(self, s, t)), 
       "/*| docname \"texture_wrap\", \"graph\", do { \
                dsyntax <<texture_wrap s, t>>;\
                synopsis \"wrap textures or clamp them\" ; \
                description <<Record if we want to wrap textures or clamp them>> ;\
                parameters;\
                parameter \"boolean\", \"s\", <<[TODO]>>;\
                parameter \"boolean\", \"t\", <<[TODO]>>;\
                }\
          |*/")
PREFIX(TextureTransform, tree, "texture_transform", PARM(t, tree),
       RTAO(textureTransform(self, t)), 
       "/*| docname \"texture_transform\", \"graph\", do { \
                dsyntax <<texture_transform t>>;\
                synopsis \"Apply a texture transformation\" ; \
                description <<Apply a texture transformation.[TODO: de quel genre ?]>> ;\
                parameters;\
                parameter \"tree\", \"t\", <<[TODO]>>;\
                return_value \"tree\", <<The result of the child evaluation.>>;\
                }\
          |*/")



// ============================================================================
//
//   Generating a path
//
// ============================================================================

PREFIX(Path,   tree, "path", PARM(t, tree), RTAO(newPath(self, t)), 
       "/*| docname \"path\", \"graph:path\", do { \
                dsyntax <<path t>>;\
                synopsis \"Start a path\" ; \
                description <<Evaluate the child tree within a polygon>> ;\
                parameters;\
                parameter \"tree\", \"t\", <<The definition of the path.>>;\
                return_value \"tree\", <<The result of the child evaluation.>>;\
                }\
          |*/")
PREFIX(MoveTo, tree, "move_to", PARM(x, real) PARM(y, real) PARM(z, real),
       RTAO(moveTo(self, x, y, z)), 
       "/*| docname \"move_to\", \"graph:path\", do { \
                dsyntax <<move_to x, y, z>>;\
                synopsis \"move to point\" ; \
                description <<Add a 'moveTo' to the current path>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate of the point to move to.>>;\
                parameter \"real\", \"y\", <<y-coordinate of the point to move to.>>;\
                parameter \"real\", \"z\", <<z-coordinate of the point to move to.>>;\
                }\
          |*/")
PREFIX(LineTo, tree, "line_to", PARM(x, real) PARM(y, real) PARM(z, real),
       RTAO(lineTo(self, x, y, z)), 
       "/*| docname \"line_to\", \"graph:path\", do { \
                dsyntax <<line_to x, y, z>>;\
                synopsis \"line to point\" ; \
                description <<Add a 'lineTo' to the current path>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate of the point to line to.>>;\
                parameter \"real\", \"y\", <<y-coordinate of the point to line to.>>;\
                parameter \"real\", \"z\", <<z-coordinate of the point to line to.>>;\
                }\
          |*/")
PREFIX(QuadTo, tree, "quad_to",
       PARM(cx, real) PARM(cy, real) PARM(cz, real)
       PARM(x, real) PARM(y, real) PARM(z, real),
       RTAO(curveTo(self, cx, cy, cz, x, y, z)), 
       "/*| docname \"quad_to\", \"graph:path\", do { \
                dsyntax <<quad_to cx, cy, cz, x, y, z>>;\
                synopsis \" quadric curveTo\" ; \
                description <<Add a quadric curveTo to the current path.>> ;\
                parameters;\
                parameter \"real\", \"cx\", <<x-coordinate of the control point.>>;\
                parameter \"real\", \"cy\", <<y-coordinate of the control point.>>;\
                parameter \"real\", \"cz\", <<z-coordinate of the control point.>>;\
                parameter \"real\", \"x\", <<x-coordinate of the point to finish to.>>;\
                parameter \"real\", \"y\", <<y-coordinate of the point to finish to.>>;\
                parameter \"real\", \"z\", <<z-coordinate of the point to finish to.>>;\
                }\
          |*/")
PREFIX(CubicTo, tree, "cubic_to",
       PARM(c1x, real) PARM(c1y, real) PARM(c1z, real)
       PARM(c2x, real) PARM(c2y, real) PARM(c2z, real)
       PARM(x, real) PARM(y, real) PARM(z, real),
       RTAO(curveTo(self, c1x, c1y, c1z, c2x, c2y, c2z, x, y, z)), 
       "/*| docname \"cubic_to\", \"graph:path\", do { \
                dsyntax <<cubic_to c1x, c1y, c1z, c2x, c2y, c2z, x, y, z>>;\
                synopsis \"cubic curveTo\" ; \
                description <<Add a cubic curveTo to the current path>> ;\
                parameters;\
                parameter \"real\", \"cx1\", <<x-coordinate of the first control point.>>;\
                parameter \"real\", \"cy1\", <<y-coordinate of the first control point.>>;\
                parameter \"real\", \"cz1\", <<z-coordinate of the first control point.>>;\
                parameter \"real\", \"cx2\", <<x-coordinate of the second control point.>>;\
                parameter \"real\", \"cy2\", <<y-coordinate of the second control point.>>;\
                parameter \"real\", \"cz2\", <<z-coordinate of the second control point.>>;\
                parameter \"real\", \"x\", <<x-coordinate of the point to finish to.>>;\
                parameter \"real\", \"y\", <<y-coordinate of the point to finish to.>>;\
                parameter \"real\", \"z\", <<z-coordinate of the point to finish to.>>;\
                }\
          |*/")
PREFIX(MoveRel, tree, "move_relative", PARM(x,real) PARM(y,real) PARM(z,real),
       RTAO(moveToRel(self, x, y, z)), 
       "/*| docname \"move_relative\", \"graph:path\", do { \
                dsyntax <<move_relative dx, dy, dz>>;\
                synopsis \"relative moveTo\" ; \
                description <<Add a relative moveTo>> ;\
                parameters;\
                parameter \"real\", \"dx\", <<delta to move to on x-axis.>>;\
                parameter \"real\", \"dy\", <<delta to move to on y-axis.>>;\
                parameter \"real\", \"dz\", <<delta to move to on z-axis.>>;\
                }\
          |*/")
PREFIX(LineRel, tree, "line_relative", PARM(x,real) PARM(y,real) PARM(z,real),
       RTAO(lineToRel(self, x, y, z)), 
       "/*| docname \"line_relative\", \"graph:path\", do { \
                dsyntax <<line_relative dx, dy, dz>>;\
                synopsis \"relative line to\" ; \
                description <<Add a relative 'lineTo' to the current path>> ;\
                parameters;\
                parameter \"real\", \"dx\", <<delta to line to on x-axis.>>;\
                parameter \"real\", \"dy\", <<delta to line to on y-axis.>>;\
                parameter \"real\", \"dz\", <<delta to line to on z-axis.>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(PathTexCoord, tree, "path_texture", PARM(x,real)PARM(y,real)PARM(z,real),
       RTAO(pathTextureCoord(self, x, y, z)), 
       "/*| docname \"path_texture\", \"graph:path\", do { \
                dsyntax <<path_texture x, y, z>>;\
                synopsis \"Not supported yet\" ; \
                description << NOT SUPPORTED YET. Add a texture coordinate to the path. NOT SUPPORTED YET>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"z\", <<z-coordinate>>;\
                }\
          |*/")
PREFIX(PathColor, tree, "path_color",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(pathColor(self, r,g,b, a)), 
       "/*| docname \"path_color\", \"graph:path\", do { \
                dsyntax <<path_color>>;\
                synopsis \"Not supported yet\" ; \
                description <<NOT SUPPORTED YET. Add a color element to the path. NOT SUPPORTED YET. >> ;\
                parameters;\
                parameter \"real\", \"r\", <<The red componant of the color>>;\
                parameter \"real\", \"g\", <<The blue componant of the color>>;\
                parameter \"real\", \"b\", <<The green componant of the color>>;\
                parameter \"real\", \"a\", <<Alpha channel: the transparency of the color. >>;\
                }\
          |*/")
PREFIX(ClosePath, tree, "close_path",, RTAO(closePath(self)), 
       "/*| docname \"close_path\", \"graph:path\", do { \
                dsyntax <<close_path>>;\
                synopsis \"close the path\" ; \
                description <<Close the path back to its origin>> ;\
                }\
          |*/")
PREFIX(EndpointsStyle, tree, "endpoints_style",
       PARM(s, symbol) PARM(e, symbol),
       RTAO(endpointsStyle(self, s, e)), 
       "/*| docname \"endpoints_style\", \"graph:path\", do { \
                dsyntax <<endpoints_style s, e>>;\
                synopsis \"style of the path endpoints\" ; \
                description <<Specify the style of the path endpoints. Supported values are : ARROWHEAD, ARROWHEAD, POINTER, DIAMOND, CIRCLE, SQUARE, BAR, CUP, FLETCHING, HOLLOW_CIRCLE, HOLLOW_SQUARE.>> ;\
                parameters;\
                parameter \"symbol\", \"s\", <<start endpoint style>>;\
                parameter \"symbol\", \"e\", <<end endpoint style>>;\
                return_value \"\", <<>>;\
                }\
          |*/")



// ============================================================================
//
//   2D primitives (either standalone, or added to the current path)
//
// ============================================================================

PREFIX(Point, tree, "point",
       PARM(x,real) PARM(y,real) PARM(z,real) PARM(s,real),
       RTAO(fixedSizePoint(self, x, y, z, s)), 
       "/*| docname \"point\", \"graph:path\", do { \
                dsyntax <<point x, y, z, s>>;\
                synopsis \"Draw a point\" ; \
                description <<Draw a point with the given size>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"z\", <<z-coordinate>>;\
                parameter \"real\", \"s\", <<THe size of the point>>;\
                }\
          |*/")
PREFIX(Rectangle, tree, "rectangle",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real),
       RTAO(rectangle(self, x, y, w, h)), 
       "/*| docname \"rectangle\", \"graph:path:shape\", do { \
                dsyntax <<rectangle x, y, w, h>>;\
                synopsis \"Draw a rectangle\" ; \
                description <<Draw a rectangle>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the rectangle>>;\
                parameter \"real\", \"h\", <<height of the rectangle>>;\
                }\
          |*/")
PREFIX(Triangle, tree, "triangle",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real),
       RTAO(isoscelesTriangle(self, x, y, w, h)), 
       "/*| docname \"triangle\", \"graph:path:shape\", do { \
                dsyntax <<triangle x, y, b, h>>;\
                synopsis \"Isocele triangle\" ; \
                description <<Draw an isocele triangle>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"b\", <<base of the triangle>>;\
                parameter \"real\", \"h\", <<height of the triangle>>;\
                }\
          |*/")
PREFIX(RightTriangle, tree, "right_triangle",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real),
       RTAO(rightTriangle(self, x, y, w, h)), 
       "/*| docname \"right_triangle\", \"graph:path:shape\", do { \
                dsyntax <<right_triangle x, y, b, h>>;\
                synopsis \"Right triangle\" ; \
                description <<Draw a right triangle>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"b\", <<base of the triangle>>;\
                parameter \"real\", \"h\", <<height of the triangle>>;\
                }\
          |*/")
PREFIX(Ellipse, tree, "ellipse",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real),
       RTAO(ellipse(self, x, y, w, h)), 
       "/*| docname \"ellipse\", \"graph:path:shape\", do { \
                dsyntax <<ellipse cx, cy, w, h>>;\
                synopsis \"Ellipse\" ; \
                description <<Draw an ellipse centered around (cx,cy), size w * h>> ;\
                parameters;\
                parameter \"real\", \"cx\", <<x-coordinate>>;\
                parameter \"real\", \"cy\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the ellipse>>;\
                parameter \"real\", \"h\", <<height of the ellipse>>;\
                }\
          |*/")
PREFIX(EllipseArc, tree, "ellipse_arc",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(start, real) PARM(sweep, real),
       RTAO(ellipseArc(self, x, y, w, h, start, sweep)), 
       "/*| docname \"ellipse_arc\", \"graph:path:shape\", do { \
                dsyntax <<ellipse_arc x, y, w, h, start, sweep>>;\
                synopsis \"Elliptic sector\" ; \
                description <<Elliptic sector centered around (cx,cy) that occupies the given rectangle, beginning at the specified startAngle and extending sweepLength degrees counter-clockwise. Angles are specified in degrees. Clockwise arcs can be specified using negative angles.>> ;\
                parameters;\
                parameter \"real\", \"cx\", <<x-coordinate>>;\
                parameter \"real\", \"cy\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the ellipse>>;\
                parameter \"real\", \"h\", <<height of the ellipse>>;\
                parameter \"real\", \"start\", <<start angle>>;\
                parameter \"real\", \"sweep\", <<sweep angle>>;\
                }\
          |*/")
PREFIX(RoundedRectangle, tree, "rounded_rectangle",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(r, real),
       RTAO(roundedRectangle(self, x, y, w, h, r)), 
       "/*| docname \"rounded_rectangle\", \"graph:path:shape\", do { \
                dsyntax <<rounded_rectangle x, y, w, h, r>>;\
                synopsis \"Rounded rectangle\" ; \
                description <<Rounded rectangle with radius r for the rounded corners>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the rectangle>>;\
                parameter \"real\", \"h\", <<height of the rectangle>>;\
                parameter \"real\", \"r\", <<corner radius>>;\
                }\
          |*/")
PREFIX(EllipticalRectangle, tree, "elliptical_rectangle",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(r, real),
       RTAO(ellipticalRectangle(self, x, y, w, h, r)), 
       "/*| docname \"elliptical_rectangle\", \"graph:path:shape\", do { \
                dsyntax <<elliptical_rectangle>>;\
                synopsis \"Elliptical rectangle\" ; \
                description <<Elliptical rectangle with ratio r for the elliptic sides>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the rectangle>>;\
                parameter \"real\", \"h\", <<height of the rectangle>>;\
                parameter \"real\", \"r\", <<ration of the ellpitic sides>>;\
                }\
          |*/")
PREFIX(Arrow, tree, "arrow",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(ax, real) PARM(ay, real),
       RTAO(arrow(self, x, y, w, h, ax, ay)), 
       "/*| docname \"arrow\", \"graph:path:shape\", do { \
                dsyntax <<arrow x, y, w, h, ax, ay>>;\
                synopsis \"Draw an arraw\" ; \
                description <<Draw an arraw>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of  [TODO: what ?]>>;\
                parameter \"real\", \"h\", <<height of [TODO: what ?]>>;\
                parameter \"real\", \"ax\", <<[TODO]>>;\
                parameter \"real\", \"ay\", <<[TODO]>>;\
                }\
          |*/")
PREFIX(DoubleArrow, tree, "double_arrow",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(ax, real) PARM(ay, real),
       RTAO(doubleArrow(self, x, y, w, h, ax, ay)), 
       "/*| docname \"double_arrow\", \"graph:path:shape\", do { \
                dsyntax <<double_arrow x, y, w, h, ax, ay>>;\
                synopsis \"Double arraw\" ; \
                description <<Draw a symetric double arraw>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of  [TODO: what ?]>>;\
                parameter \"real\", \"h\", <<height of [TODO: what ?]>>;\
                parameter \"real\", \"ax\", <<[TODO]>>;\
                parameter \"real\", \"ay\", <<[TODO]>>;\
                }\
          |*/")
PREFIX(StarPolygon, tree, "star_polygon",
       PARM(x, real) PARM(y, real) PARM(w, real) PARM(h, real)
       PARM(p, integer) PARM(q, integer),
       RTAO(starPolygon(self, x, y, w, h, p, q)), 
       "/*| docname \"star_polygon\", \"graph:path:shape\", do { \
                dsyntax <<star_polygon cx, cy, w, h, p, q>>;\
                synopsis \"Draw a star\" ; \
                description <<GL regular p-side star polygon {p/q} centered around (cx,cy)>> ;\
                parameters;\
                parameter \"real\", \"cx\", <<center x-coordinate>>;\
                parameter \"real\", \"cy\", <<center y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the star>>;\
                parameter \"real\", \"h\", <<height of the star>>;\
                parameter \"real\", \"p\", <<Number of branch[TODO: is OK?]>>;\
                parameter \"real\", \"q\", <<[TODO]>>;\
                }\
          |*/")
PREFIX(Star, tree, "star",
       PARM(x, real) PARM(y, real) PARM(w, real) PARM(h, real)
       PARM(p, integer) PARM(r, real),
       RTAO(star(self, x, y, w, h, p, r)), 
       "/*| docname \"star\", \"graph:path:shape\", do { \
                dsyntax <<star x, y, w, h, p, r>>;\
                synopsis \"Draw a star\" ; \
                description <<GL regular p-side star centered around (cx,cy), inner radius ratio r>> ;\
                parameters;\
                parameter \"real\", \"cx\", <<center x-coordinate>>;\
                parameter \"real\", \"cy\", <<center y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the star>>;\
                parameter \"real\", \"h\", <<height of the star>>;\
                parameter \"real\", \"p\", <<Number of branch[TODO: is OK?]>>;\
                parameter \"real\", \"r\", <<inner radius ratio>>;\
                }\
          |*/")
PREFIX(SpeechBalloon, tree, "speech_balloon",
       PARM(x, real) PARM(y, real) PARM(w, real) PARM(h, real)
       PARM(r, real) PARM(ax, real) PARM(ay, real),
       RTAO(speechBalloon(self, x, y, w, h, r, ax, ay)), 
       "/*| docname \"speech_balloon\", \"graph:path:shape\", do { \
                dsyntax <<speech_balloon x, y, w, h, r, ax, ay>>;\
                synopsis \"Speech balloon\" ; \
                description <<Speech balloon with radius r for rounded corners, and point a for the tail>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the balloon>>;\
                parameter \"real\", \"h\", <<height of the balloon>>;\
                parameter \"real\", \"r\", <<radius>>;\
                parameter \"real\", \"ax\", <<[TODO]>>;\
                parameter \"real\", \"ay\", <<[TODO]>>;\
                }\
          |*/")
PREFIX(Callout, tree, "callout",
       PARM(x, real) PARM(y, real) PARM(w, real) PARM(h, real)
       PARM(r, real) PARM(ax, real) PARM(ay, real) PARM(d, real),
       RTAO(callout(self, x, y, w, h, r, ax, ay, d)), 
       "/*| docname \"callout\", \"graph:path:shape\", do { \
                dsyntax <<callout>>;\
                synopsis \"callout\" ; \
                description <<Callout with radius r for corners, and point a, width b [TODO: is d or b] for the tail>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the callout>>;\
                parameter \"real\", \"h\", <<height of the callout>>;\
                parameter \"real\", \"r\", <<radius>>;\
                parameter \"real\", \"ax\", <<x-coordinate of point a>>;\
                parameter \"real\", \"ay\", <<y-coordinate of point a>>;\
                parameter \"real\", \"d\", <<[TODO]>>;\
                }\
          |*/")

PREFIX(DebugBinPacker, tree, "binpacker",
       PARM(w, integer) PARM(h, integer) PARM(t, tree),
       RTAO(debugBinPacker(self, w, h, t)), 
       "/*| docname \"binpacker\", \"graph:debug\", do { \
                dsyntax <<binpacker w, h, t>>;\
                synopsis \"Debug the bin packer\" ; \
                description <<Debug the bin packer>> ;\
                parameters;\
                parameter \"integer\", \"w\", <<width>>;\
                parameter \"integer\", \"h\", <<height>>;\
                parameter \"real\", \"t\", <<[TODO]>>;\
                }\
          |*/")
PREFIX(DebugParamters, tree, "debug_parameters",
       PARM(x, real) PARM(y, real) PARM(w, real) PARM(h, real),
       RTAO(debugParameters(self, x, y, w, h)), 
       "/*| docname \"debug_parameters\", \"graph:debug\", do { \
                dsyntax <<debug_parameters x, y, w, h>>;\
                synopsis \"Set debug parameters\" ; \
                description <<Set debug parameters for fine-tuning stuff>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                }\
          |*/")



// ============================================================================
//
//   3D primitives
//
// ============================================================================

PREFIX(Sphere, tree, "sphere",
       PARM(x, real) PARM(y, real) PARM(z, real)
       PARM(w, real) PARM(h, real) PARM(d, real)
       PARM(slices, integer) PARM(stacks, integer),
       RTAO(sphere(self, x, y, z, w, h, d, slices, stacks)), 
       "/*| docname \"sphere\", \"graph\", do { \
                dsyntax <<sphere x, y, z, w, h, d, slices, stacks>>;\
                synopsis \"sphere like\" ; \
                description <<GL sphere [TODO or ovoid ? Add the incidence of slices and stacks on the sphere rendering time.]>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"z\", <<z-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"real\", \"d\", <<depth>>;\
                parameter \"integer\", \"slices\", <<number of slices>>;\
                parameter \"integer\", \"stacks\", <<[TODO]>>;\
               return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(Cube, tree, "cube",
       PARM(x, real) PARM(y, real) PARM(z, real)
       PARM(w, real) PARM(h, real) PARM(d, real),
       RTAO(cube(self, x, y, z, w, h, d)), 
       "/*| docname \"cube\", \"graph\", do { \
                dsyntax <<cube x, y, z, w, h, d>>;\
                synopsis \"cube like\" ; \
                description <<parallelepiped rectangle>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"z\", <<z-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"real\", \"d\", <<depth>>;\
                }\
          |*/")
PREFIX(Cone, tree, "cone",
       PARM(x, real) PARM(y, real) PARM(z, real)
       PARM(w, real) PARM(h, real) PARM(d, real),
       RTAO(cone(self, x, y, z, w, h, d)), 
       "/*| docname \"cone\", \"graph\", do { \
                dsyntax <<cone x, y, z, w, h, d>>;\
                synopsis \"cone\" ; \
                description <<cone[TODO]>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"z\", <<z-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"real\", \"d\", <<depth>>;\
                }\
          |*/")
PREFIX(Object3D, tree, "object",
       PARM(x, real) PARM(y, real) PARM(z, real)
       PARM(w, real) PARM(h, real) PARM(d, real)
       PARM(f, text),
       RTAO(object(self, x, y, z, w, h, d, f)), 
       "/*| docname \"object\", \"graph\", do { \
                dsyntax <<object x, y, z, w, h, d, f>>;\
                synopsis \"Load a 3D object\" ; \
                description <<Load a 3D object [TODO: which format of file can be loaded ?>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"z\", <<z-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"real\", \"d\", <<depth>>;\
                parameter \"text\", \"f\", <<filename>>;\
                }\
          |*/")



// ============================================================================
//
//   Text and font
//
// ============================================================================

PREFIX(TextBox, tree, "text_box",
       PARM(x, real) PARM(y, real) PARM(w, real) PARM(h, real) PARM(t, tree),
       RTAO(textBox(self, x, y, w, h, t)), 
       "/*| docname \"text_box\", \"text\", do { \
                dsyntax <<text_box>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(TextOverflow, tree, "text_overflow",
       PARM(x, real) PARM(y, real) PARM(w, real) PARM(h, real),
       RTAO(textOverflow(self, x, y, w, h)), 
       "/*| docname \"text_overflow\", \"\", do { \
                dsyntax <<text_overflow>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(TextFlow, tree, "text_flow", PARM(n, text), RTAO(textFlow(self, n)), 
       "/*| docname \"text_flow\", \"\", do { \
                dsyntax <<text_flow>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")

PREFIX(TextSpan, tree,"text", PARM(t, text), RTAO(textSpan(self, t)), 
       "/*| docname \"text\", \"\", do { \
                dsyntax <<text>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(TextFormula, tree,"formula", PARM(t, tree), RTAO(textFormula(self, t)), 
       "/*| docname \"formula\", \"\", do { \
                dsyntax <<formula>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(Font, tree, "font", PARM(f, tree), RTAO(font(self, f)), 
       "/*| docname \"font\", \"\", do { \
                dsyntax <<font>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontSize, tree, "font_size", PARM(s, real), RTAO(fontSize(self, s)), 
       "/*| docname \"font_size\", \"\", do { \
                dsyntax <<font_size>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontScaling, tree, "font_scaling", PARM(s,real) PARM(ms,real),
       RTAO(fontScaling(self,s,ms)), 
       "/*| docname \"font_scaling\", \"\", do { \
                dsyntax <<font_scaling>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontPlain, tree, "plain",, RTAO(fontPlain(self)), 
       "/*| docname \"plain\", \"\", do { \
                dsyntax <<plain>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontSlant, tree, "slant", PARM(a, real), RTAO(fontItalic(self, a/100)), 
       "/*| docname \"slant\", \"\", do { \
                dsyntax <<slant>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontRoman, tree, "roman",, RTAO(fontItalic(self, 0)), 
       "/*| docname \"roman\", \"\", do { \
                dsyntax <<roman>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontItalic, tree, "italic",, RTAO(fontItalic(self, 1)), 
       "/*| docname \"italic\", \"\", do { \
                dsyntax <<italic>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontOblique, tree, "oblique",, RTAO(fontItalic(self, 2)), 
       "/*| docname \"oblique\", \"\", do { \
                dsyntax <<oblique>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontWeight, tree, "weight", PARM(a, real), RTAO(fontBold(self, a)), 
       "/*| docname \"weight\", \"\", do { \
                dsyntax <<weight>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontRegular, tree, "regular",, RTAO(fontBold(self, 50)), 
       "/*| docname \"regular\", \"\", do { \
                dsyntax <<regular>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontLight, tree, "light",, RTAO(fontBold(self, 25)), 
       "/*| docname \"light\", \"\", do { \
                dsyntax <<light>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontBold, tree, "bold",, RTAO(fontBold(self, 75)), 
       "/*| docname \"bold\", \"\", do { \
                dsyntax <<bold>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontUnderline, tree, "underline", PARM(a, real),
       RTAO(fontUnderline(self, a)), 
       "/*| docname \"underline\", \"\", do { \
                dsyntax <<underline>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontOverline, tree, "overline", PARM(a, real),
       RTAO(fontOverline(self, a)), 
       "/*| docname \"overline\", \"\", do { \
                dsyntax <<overline>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontStrikeout, tree, "strikeout", PARM(a, real),
       RTAO(fontStrikeout(self, a)), 
       "/*| docname \"strikeout\", \"\", do { \
                dsyntax <<strikeout>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontStretch, tree, "stretch", PARM(s,real),RTAO(fontStretch(self,s)), 
       "/*| docname \"stretch\", \"\", do { \
                dsyntax <<stretch>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(Justify, tree, "justify",
       PARM(a, real), RTAO(justify(self, a, 0)), 
       "/*| docname \"justify\", \"\", do { \
                dsyntax <<justify>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(VJustify, tree, "vertical_justify",
       PARM(a, real), RTAO(justify(self, a, 1)), 
       "/*| docname \"vertical_justify\", \"\", do { \
                dsyntax <<vertical_justify>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(Center, tree, "center",
       PARM(a, real), RTAO(center(self, a, 0)), 
       "/*| docname \"center\", \"\", do { \
                dsyntax <<center>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(VCenter, tree, "vertical_center",
       PARM(a, real), RTAO(center(self, a, 1)), 
       "/*| docname \"vertical_center\", \"\", do { \
                dsyntax <<vertical_center>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(Spread, tree, "spread",
       PARM(a, real), RTAO(spread(self, a, 0)), 
       "/*| docname \"spread\", \"\", do { \
                dsyntax <<spread>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(VSpread, tree, "vertical_spread",
       PARM(a, real), RTAO(spread(self, a, 1)), 
       "/*| docname \"vertical_spread\", \"\", do { \
                dsyntax <<vertical_spread>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(Spacing, tree, "spacing",
       PARM(a, real), RTAO(spacing(self, a, 0)), 
       "/*| docname \"spacing\", \"\", do { \
                dsyntax <<spacing>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(VSpacing, tree, "vertical_spacing",
       PARM(a, real), RTAO(spacing(self, a, 1)), 
       "/*| docname \"vertical_spacing\", \"\", do { \
                dsyntax <<vertical_spacing>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(MinimumParagraphSpace, tree, "paragraph_space",
       PARM(b, real) PARM(a, real), RTAO(minimumSpace(self, b, a, 1)), 
       "/*| docname \"paragraph_space\", \"\", do { \
                dsyntax <<paragraph_space>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(MinimumCharacterSpace, tree, "character_space",
       PARM(b, real) PARM(a, real), RTAO(minimumSpace(self, b, a, 0)), 
       "/*| docname \"character_space\", \"\", do { \
                dsyntax <<character_space>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(Margins, tree, "margins", PARM(l, real) PARM(r, real),
       RTAO(horizontalMargins(self, l, r)), 
       "/*| docname \"margins\", \"\", do { \
                dsyntax <<margins>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(VMargins, tree, "vertical_margins", PARM(t, real) PARM(b, real),
       RTAO(verticalMargins(self, t, b)), 
       "/*| docname \"vertical_margins\", \"\", do { \
                dsyntax <<vertical_margins>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(LineBreak, tree, "line_break",,
       RTAO(drawingBreak(self, Tao::Drawing::LineBreak)), 
       "/*| docname \"line_break\", \"\", do { \
                dsyntax <<line_break>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(SentenceBreak, tree, "sentence_break",,
       RTAO(drawingBreak(self, Tao::Drawing::SentenceBreak)), 
       "/*| docname \"sentence_break\", \"\", do { \
                dsyntax <<sentence_break>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(ParaBreak, tree, "paragraph_break",,
       RTAO(drawingBreak(self, Tao::Drawing::ParaBreak)), 
       "/*| docname \"paragraph_break\", \"\", do { \
                dsyntax <<paragraph_break>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(ColumnBreak, tree, "column_break",,
       RTAO(drawingBreak(self, Tao::Drawing::ColumnBreak)), 
       "/*| docname \"column_break\", \"\", do { \
                dsyntax <<column_break>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(PageBreak, tree, "page_break",,
       RTAO(drawingBreak(self, Tao::Drawing::PageBreak)), 
       "/*| docname \"page_break\", \"\", do { \
                dsyntax <<page_break>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(TextEditKey, boolean, "text_edit_key", PARM(k, text),
       RTAO(textEditKey(self, k)), 
       "/*| docname \"text_edit_key\", \"\", do { \
                dsyntax <<text_edit_key>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(LoremIpsum, tree, "lorem_ipsum",PARM(w,integer),
       RTAO(loremIpsum(self,w)), 
       "/*| docname \"lorem_ipsum\", \"\", do { \
                dsyntax <<lorem_ipsum>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(LoadText, tree, "load_text",PARM(f,text),
       RTAO(loadText(self,f)), 
       "/*| docname \"load_text\", \"\", do { \
                dsyntax <<load_text>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(TaoVersion, tree, "tao_version",, RTAO(taoVersion(self)), 
       "/*| docname \"tao_version\", \"\", do { \
                dsyntax <<tao_version>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(DocVersion, tree, "doc_version",, RTAO(docVersion(self)), 
       "/*| docname \"doc_version\", \"\", do { \
                dsyntax <<doc_version>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")



// ============================================================================
//
//   Tables
//
// ============================================================================

PREFIX(NewTableAt, tree, "table",
       PARM(x,real) PARM(y, real) PARM(r,integer) PARM(c,integer) PARM(b,tree),
       RTAO(newTable(self, x, y, r, c, b)), "");
PREFIX(NewTable, tree, "table", PARM(r,integer) PARM(c,integer) PARM(b,tree),
       RTAO(newTable(self, r, c, b)), 
       "/*| docname \"table\", \"\", do { \
                dsyntax <<table x, y, r, c, b>>;\
                dsyntax <<table r, c, b>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/");
PREFIX(TableSizedCell, tree, "table_cell",
       PARM(w, real) PARM(h, real) PARM(b, tree),
       RTAO(tableCell(self, w, h, b)), "")
PREFIX(TableCell, tree, "table_cell", PARM(b, tree),
       RTAO(tableCell(self, b)), 
       "/*| docname \"table_cell\", \"\", do { \
                dsyntax <<table_cell w, h, b>>;\
                dsyntax <<table_cell b>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(TableMargins2, tree, "table_cell_margins",
       PARM(w, real) PARM(h, real),
       RTAO(tableMargins(self, w, h)), "")
PREFIX(TableMargins, tree, "table_cell_margins",
       PARM(x, real) PARM(y, real) PARM(w, real) PARM(h, real),
       RTAO(tableMargins(self, x, y, w, h)), 
       "/*| docname \"table_cell_margins\", \"\", do { \
                dsyntax <<table_cell_margins x, y, w, h>>;\
                dsyntax <<table_cell_margins w, h>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(TableFill, tree, "table_cell_fill", PARM(b, tree),
       RTAO(tableFill(self, b)), 
       "/*| docname \"table_cell_fill\", \"\", do { \
                dsyntax <<table_cell_fill>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(TableBorder, tree, "table_cell_border", PARM(b, tree),
       RTAO(tableBorder(self, b)), 
       "/*| docname \"table_cell_border\", \"\", do { \
                dsyntax <<table_cell_border>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(TableCellX, tree, "table_cell_x", , RTAO(tableCellX(self)), 
       "/*| docname \"table_cell_x\", \"\", do { \
                dsyntax <<table_cell_x>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(TableCellY, tree, "table_cell_y", , RTAO(tableCellY(self)), 
       "/*| docname \"table_cell_y\", \"\", do { \
                dsyntax <<table_cell_y>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(TableCellW, tree, "table_cell_w", , RTAO(tableCellW(self)), 
       "/*| docname \"table_cell_w\", \"\", do { \
                dsyntax <<table_cell_w>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(TableCellH, tree, "table_cell_h", , RTAO(tableCellH(self)), 
       "/*| docname \"table_cell_h\", \"\", do { \
                dsyntax <<table_cell_h>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(TableRow, tree,   "table_cell_row", , RTAO(tableRow(self)), 
       "/*| docname \"table_cell_row\", \"\", do { \
                dsyntax <<table_cell_row>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(TableColumn, tree, "table_cell_column", , RTAO(tableColumn(self)), 
       "/*| docname \"table_cell_column\", \"\", do { \
                dsyntax <<table_cell_column>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(TableRows, tree, "table_rows", , RTAO(tableRows(self)), 
       "/*| docname \"table_rows\", \"\", do { \
                dsyntax <<table_rows>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(TableColumns, tree, "table_columns", , RTAO(tableColumns(self)), 
       "/*| docname \"table_columns\", \"\", do { \
                dsyntax <<table_columns>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")



// ============================================================================
//
//   Frames and widgets
//
// ============================================================================

PREFIX(Caption, tree, "status", PARM(t, text), RTAO(status(self, t)), 
       "/*| docname \"status\", \"\", do { \
                dsyntax <<status>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(Frame, tree, "frame",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real) PARM(p, tree),
       RTAO(framePaint(self, x, y, w, h, p)), 
       "/*| docname \"frame\", \"\", do { \
                dsyntax <<frame>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FrameTexture, tree, "frame_texture",
       PARM(w,real) PARM(h,real) PARM(p, tree),
       RTAO(frameTexture(self, w, h, p)), 
       "/*| docname \"frame_texture\", \"\", do { \
                dsyntax <<frame_texture>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(Url, tree, "url",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real) PARM(u, text),
       RTAO(urlPaint(self, x, y, w, h, u, NULL)), "")
PREFIX(UrlProgress, tree, "url",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(u, text) PARM(progress, integer),
       RTAO(urlPaint(self, x, y, w, h, u, progress)), 
       "/*| docname \"url\", \"\", do { \
                dsyntax <<url x, y, w, h, u, progress>>;\
                dsyntax <<url x, y, w, h, u>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(UrlTexture, tree, "url_texture",
       PARM(w,real) PARM(h,real) PARM(u, text),
       RTAO(urlTexture(self, w, h, u, NULL)), 
       "")
PREFIX(UrlTextureProgress, tree, "url_texture",
       PARM(w,real) PARM(h,real) PARM(u, text) PARM(progress, integer),
       RTAO(urlTexture(self, w, h, u, progress)), 
       "/*| docname \"url_texture\", \"\", do { \
                dsyntax <<url_texture w, h, u, progress>>;\
                dsyntax <<url_texture w, h, u>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(LineEdit, tree, "line_edit",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real) PARM(u, text),
       RTAO(lineEdit(self, x, y, w, h, u)), 
       "/*| docname \"line_edit\", \"\", do { \
                dsyntax <<line_edit>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(LineEditTexture, tree, "line_edit_texture",
       PARM(w,real) PARM(h,real) PARM(u, text),
       RTAO(lineEditTexture(self, w, h, u)), 
       "/*| docname \"line_edit_texture\", \"\", do { \
                dsyntax <<line_edit_texture>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")

PREFIX(PushButton, tree, "push_button",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(n, text) PARM(l, text) PARM(a, tree),
       RTAO(pushButton(self, x, y, w, h, n, l, a)), 
       "/*| docname \"push_button\", \"\", do { \
                dsyntax <<push_button>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(PushButtonTexture, tree, "push_button_texture",
       PARM(w,real) PARM(h,real) PARM(n, text) PARM(l, text) PARM(a, tree),
       RTAO(pushButtonTexture(self, w, h, n, l, a)), 
       "/*| docname \"push_button_texture\", \"\", do { \
                dsyntax <<push_button_texture>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")

PREFIX(RadioButton, tree, "radio_button",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(n, text) PARM(l, text) PARM(m, text) PARM(a, tree),
       RTAO(radioButton(self, x, y, w, h, n, l, m, a)), 
       "/*| docname \"radio_button\", \"\", do { \
                dsyntax <<radio_button>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(RadioButtonTexture, tree, "radio_button_texture",
       PARM(w,real) PARM(h,real) PARM(n, text) PARM(l, text)
       PARM(m, text) PARM(a, tree),
       RTAO(radioButtonTexture(self, w, h, n, l, m, a)), 
       "/*| docname \"radio_button_texture\", \"\", do { \
                dsyntax <<radio_button_texture>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")

PREFIX(CheckBoxButton, tree, "check_box_button",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(n, text) PARM(l, text) PARM(m, text) PARM(a, tree),
       RTAO(checkBoxButton(self, x, y, w, h, n, l, m, a)), 
       "/*| docname \"check_box_button\", \"\", do { \
                dsyntax <<check_box_button>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(CheckBoxButtonTexture, tree, "check_box_button_texture",
       PARM(w,real) PARM(h,real) PARM(n, text) PARM(l, text)
       PARM(m, text) PARM(a, tree),
       RTAO(checkBoxButtonTexture(self, w, h, n, l, m, a)), 
       "/*| docname \"check_box_button_texture\", \"\", do { \
                dsyntax <<check_box_button_texture>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")

PREFIX(ColorChooser, tree, "color_chooser",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real) PARM(t,tree),
       RTAO(colorChooser(self, x, y, w, h, t)), 
       "/*| docname \"color_chooser\", \"\", do { \
                dsyntax <<color_chooser>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(ColorChooserTexture, tree, "color_chooser_texture",
       PARM(w,real) PARM(h,real) PARM(t,tree),
       RTAO(colorChooserTexture(self, w, h, t)), 
       "/*| docname \"color_chooser_texture\", \"\", do { \
                dsyntax <<color_chooser_texture>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(ColorChooserNow, tree, "color_chooser", PARM(n, text) PARM(t,tree),
       RTAO(colorChooser(self, n, t)), 
       "/*| docname \"color_chooser\", \"\", do { \
                dsyntax <<color_chooser>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")

PREFIX(FontChooser, tree, "font_chooser",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real) PARM(t,tree),
       RTAO(fontChooser(self, x, y, w, h, t)), 
       "/*| docname \"font_chooser\", \"\", do { \
                dsyntax <<font_chooser>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontChooserTexture, tree, "font_chooser_texture",
       PARM(w,real) PARM(h,real) PARM(t,tree),
       RTAO(fontChooserTexture(self, w, h, t)), 
       "/*| docname \"font_chooser_texture\", \"\", do { \
                dsyntax <<font_chooser_texture>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontChooserNow, tree, "font_chooser", PARM(t,tree),
       RTAO(fontChooser(self, t)), 
       "/*| docname \"font_chooser\", \"\", do { \
                dsyntax <<font_chooser>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")

PREFIX(FileChooser, tree, "file_chooser",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real) PARM(t,tree),
       RTAO(fileChooser(self, x, y, w, h, t)), 
       "/*| docname \"file_chooser\", \"\", do { \
                dsyntax <<file_chooser>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FileChooserTexture, tree, "file_chooser_texture",
       PARM(w,real) PARM(h,real) PARM(t,tree),
       RTAO(fileChooserTexture(self, w, h, t)), 
       "/*| docname \"\", \"\", do { \
                dsyntax <<>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FileChooserNow, tree, "file_chooser", PARM(t,tree),
       RTAO(fileChooser(self, t)), 
       "/*| docname \"file_chooser\", \"\", do { \
                dsyntax <<file_chooser>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(SetFileDialogAction, tree, "file_chooser_action", PARM(t, tree),
       RTAO(setFileDialogAction(self, t)), 
       "/*| docname \"file_chooser_action\", \"\", do { \
                dsyntax <<file_chooser_action>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(SetFileDialogDirectory, tree, "file_chooser_directory", PARM(d, text),
       RTAO(setFileDialogDirectory(self, d)), 
       "/*| docname \"file_chooser_directory\", \"\", do { \
                dsyntax <<file_chooser_directory>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(SetFileDialogFilter, tree, "file_chooser_filter", PARM(d, text),
       RTAO(setFileDialogFilter(self, d)), 
       "/*| docname \"file_chooser_filter\", \"\", do { \
                dsyntax <<file_chooser_filter>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(SetFileDialogLabel, tree, "file_chooser_label",
       PARM(lbl, text) PARM(v, text),
       RTAO(setFileDialogLabel(self, lbl, v)), 
       "/*| docname \"file_chooser_label\", \"\", do { \
                dsyntax <<file_chooser_label>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")

PREFIX(Action, tree, "button_group_action", PARM(act, tree),
       RTAO(setButtonGroupAction(self, act)), 
       "/*| docname \"button_group_action\", \"\", do { \
                dsyntax <<button_group_action>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")

PREFIX(ButtonGroup, tree, "button_group",
       PARM(ex, boolean) PARM(b, tree),
       RTAO(buttonGroup(self, ex, b)), 
       "/*| docname \"button_group\", \"\", do { \
                dsyntax <<button_group>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")

PREFIX(GroupBox, tree, "group_box",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(u, text) PARM(b, tree),
       RTAO(groupBox(self, x, y, w, h, u, b)), 
       "/*| docname \"group_box\", \"\", do { \
                dsyntax <<group_box>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(GroupBoxTexture, tree, "group_box_texture",
       PARM(w,real) PARM(h,real) PARM(u, text),
       RTAO(groupBoxTexture(self, w, h, u)), 
       "/*| docname \"group_box_texture\", \"\", do { \
                dsyntax <<group_box_texture>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")


PREFIX(VideoPlayer, tree, "video_player",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real) PARM(u,text),
       RTAO(videoPlayer(self, x, y, w, h, u)), 
       "/*| docname \"video_player\", \"\", do { \
                dsyntax <<video_player>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(VideoPlayerTexture, tree, "video_player_texture",
       PARM(w,real) PARM(h,real) PARM(u,text),
       RTAO(videoPlayerTexture(self, w, h, u)), 
       "/*| docname \"video_player_texture\", \"\", do { \
                dsyntax <<video_player_texture>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")



// ============================================================================
//
//   Chooser
//
// ============================================================================

PREFIX(Chooser, tree, "chooser", PARM(n, text), RTAO(chooser(self, n)), 
       "/*| docname \"chooser\", \"\", do { \
                dsyntax <<chooser>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(ChooserChoice, tree, "chooser_choice", PARM(n, text) PARM(t, tree),
       RTAO(chooserChoice(self, n, t)), 
       "/*| docname \"chooser_choice\", \"\", do { \
                dsyntax <<chooser_choice>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(ChooserCommands, tree, "chooser_commands", PARM(p, text) PARM(t,text),
       RTAO(chooserCommands(self, p, t)), 
       "/*| docname \"chooser_commands\", \"\", do { \
                dsyntax <<chooser_commands>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(ChooserPages, tree, "chooser_pages", PARM(p, symbol) PARM(l, text),
       RTAO(chooserPages(self, p, l)), 
       "/*| docname \"chooser_pages\", \"\", do { \
                dsyntax <<chooser_pages>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")



// ============================================================================
//
//    Menus
//
// ============================================================================

PREFIX(MenuItem, tree, "menu_item",
       PARM(n, text) PARM(lbl, text) PARM(icon, text) PARM(cable, boolean)
       PARM(isc, text)  PARM(t, tree),
       RTAO(menuItem(self, n, lbl, icon, cable, isc, t)),
       "/*| docname \"menu_item\", \"widget:menu\", do { \
                dsyntax <<menu_item \"unique_name\", \"label\", \"icon\", checkable, isChecked, tree>>;\
                synopsis \"add an entry in a menu\" ; \
                }\
          |*/")

PREFIX(Menu, tree, "menu", PARM(n, text) PARM(lbl, text) PARM(icon, text),
       RTAO(menu(self, n, lbl, icon, false)),
       "/*| docname \"menu\", \"\", do { \
                dsyntax <<menu>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")

PREFIX(SubMenu, tree, "submenu",
       PARM(name, text) PARM(lbl, text) PARM(icon, text),
       RTAO(menu(self, name, lbl, icon, true)), 
       "/*| docname \"submenu\", \"\", do { \
                dsyntax <<submenu>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")

PREFIX(ToolBar, tree, "toolbar",
       PARM(name, text) PARM(lbl, text) PARM(loc, text),
       RTAO(toolBar(self, name, lbl, true, loc)), 
       "/*| docname \"toolbar\", \"\", do { \
                dsyntax <<toolbar>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")

PREFIX(MenuBar, tree, "menubar", , RTAO(menuBar(self)), 
       "/*| docname \"menubar\", \"\", do { \
                dsyntax <<menubar>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")

PREFIX(Separator, tree, "separator", ,
       RTAO(separator(self)), 
       "/*| docname \"separator\", \"\", do { \
                dsyntax <<separator>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")


// ============================================================================
//
//   Error management
//
// ============================================================================

PREFIX(ErrorMessage, tree, "error", PARM(m, text) PARM(s, tree),
       return Tao::Widget::runtimeError(self, m, s), "")
PREFIX(ErrorMessage0, tree, "error", PARM(m, text),
       return Tao::Widget::runtimeError(self, m, NULL), 
       "/*| docname \"error\", \"\", do { \
                dsyntax <<error m, s>>;\
                dsyntax <<error m>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")



// ============================================================================
//
//   Tree management
//
// ============================================================================
PREFIX(Insert0, boolean, "insert", PARM(m, text) PARM(t, tree),
       RTAO(insert(self, t, m)), "")
PREFIX(Insert, boolean, "insert", PARM(t, tree), RTAO(insert(self, t)), 
       "/*| docname \"insert\", \"\", do { \
                dsyntax <<insert m, t>>;\
                dsyntax <<insert t>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(Delete, boolean, "delete_selection", PARM(k, text),
       RTAO(deleteSelection(self, k)), 
       "/*| docname \"delete_selection\", \"\", do { \
                dsyntax <<delete_selection>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(SetAttribute, boolean, "set_attribute",
       PARM(n, text) PARM(t, tree),
       RTAO(setAttribute(self, n, t, "group,shape")), 
       "/*| docname \"set_attribute\", \"\", do { \
                dsyntax <<set_attribute>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")


// ============================================================================
//
//   z order management
//
// ============================================================================

PREFIX(BringToFront, boolean, "bring_to_front",, RTAO(bringToFront(self)), 
       "/*| docname \"bring_to_front\", \"\", do { \
                dsyntax <<bring_to_front>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(BringForward, boolean, "bring_forward",, RTAO(bringForward(self)), 
       "/*| docname \"bring_forward\", \"\", do { \
                dsyntax <<bring_forward>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(SendToBack, boolean, "send_to_back",, RTAO(sendToBack(self)), 
       "/*| docname \"send_to_back\", \"\", do { \
                dsyntax <<send_to_back>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(SendBackward, boolean, "send_backward",, RTAO(sendBackward(self)), 
       "/*| docname \"send_backward\", \"\", do { \
                dsyntax <<send_backward>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")

// ============================================================================
//
//   group management
//
// ============================================================================

PREFIX(Group, tree, "group",   PARM(t, tree), RTAO(group(self, t)), 
       "/*| docname \"group\", \"\", do { \
                dsyntax <<group>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(GroupSelection, boolean, "group_selection",, RTAO(groupSelection(self)), 
       "/*| docname \"group_selection\", \"\", do { \
                dsyntax <<group_selection>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(UngroupSelection, boolean, "ungroup_selection",, RTAO(ungroupSelection(self)), 
       "/*| docname \"ungroup_selection\", \"\", do { \
                dsyntax <<ungroup_selection>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")

// ============================================================================
//
//   Unit conversions
//
// ============================================================================

POSTFIX(FromCm,   real, PARM(x, real), "cm", RTAO(fromCm(self, x)),
"/*| docname \"cm\", \"unit\", do { \
         dsyntax \"x cm\" ;\
         synopsis \"Specify the unit as centimeter \"; \
         description \"This postfix specify the previous real as centimeter. \"; \
         parameters; \
         parameter \"real\", \"x\", \"The value\";\
         return_value \"real\", \"The value in centimeter. \";\
         }\
|*/")
POSTFIX(FromMm,   real, PARM(x, real), "mm", RTAO(fromMm(self, x)), 
       "/*| docname \"mm\", \"\", do { \
                dsyntax <<mm>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
POSTFIX(FromInch, real, PARM(x, real), "inch", RTAO(fromIn(self, x)), 
       "/*| docname \"inch\", \"\", do { \
                dsyntax <<inch>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
POSTFIX(FromPt,   real, PARM(x, real), "pt", RTAO(fromPt(self, x)), 
       "/*| docname \"pt\", \"\", do { \
                dsyntax <<pt>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
POSTFIX(FromPx,   real, PARM(x, real), "px", RTAO(fromPx(self, x)), 
       "/*| docname \"px\", \"\", do { \
                dsyntax <<px>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")



// ============================================================================
//
//   Misc...
//
// ============================================================================

PREFIX(Constant, tree, "constant", PARM(t, tree), RTAO(constant(self, t)), 
       "/*| docname \"constant\", \"\", do { \
                dsyntax <<constant>>;\
                synopsis \"\" ; \
                description <<>> ;\
                parameters;\
                parameter \"\", \"\", <<>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(GenDoc, tree, "generate_doc", PARM(t, tree),RTAO(generateDoc(self, t)),
"/*| docname \"generate_doc\", \"documentation\", do { \
         dsyntax \"generate_doc t\" ;\
         synopsis \"generate the doc for the specified tree \"; \
         description \"Extract the documentation from the specified tree. \"; \
         parameters; \
         parameter \"tree\", \"t\", \"The tree from wich extracting the documentation\";\
         return_value \"Text\", \"The Text contains the documentation, ready to be parsed. \";\
         }\
|*/")

PREFIX(GenAllDoc, tree, "generate_all_doc", PARM(filename, text),
       RTAO(generateAllDoc(self, filename)),
"/*| docname \"generate_all_doc\", \"documentation\", do { \
         dsyntax \"generate_all_doc filename\" ;\
         synopsis \"generate all the documentation. \"; \
         description \"Extract the documentation from the context, the primitive and the current document. It writes the documentation into the specified files if any. \"; \
         parameters; \
         parameter \"text\", \"filename\", \"The location where to write the documentation. If empty, no file written. \";\
         return_value \"Text\", \"The Text contains the documentation, ready to be parsed. \";\
         }\
|*/")
