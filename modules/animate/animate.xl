// ****************************************************************************
//  animate.xl                                                     Tao project
// ****************************************************************************
//
//   File Description:
//
//     Module to interpolate angles and/or positions
//
//
//
//
//
//
//
//
// ****************************************************************************
// This document is released under the GNU General Public License.
//  (C) 1992-2010 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2010 Taodyne SAS
// ****************************************************************************

module_description
    id "8cc936c7-ee1b-41b6-bb06-7de7bb1ef709"
    name "Animate"
    description "Animation utilities."
    import_name "Animate"
    author "Taodyne SAS"
    website "http://www.taodyne.com"
    version 1.0

module_description "fr",
    name "Animations"
    description "Fonctions d'animation."

// Compatibility with wireless remotes
// Normally, PageUp and PageDown skip pages. But, most remotes have only
// two keys and send PageUp/PageDown. So, when the Animate module is in
// use it's better to bind the keys to the 'skip' function by default.
key "PageUp" -> skip -1
key "PageDown" -> skip 1

// ============================================================================
// 
//    Interpolation functions
// 
// ============================================================================

interpolate S:real, TX:real, X:real ->
// ----------------------------------------------------------------------------
//    Interpolate variable x with target value tx, change ratio S
// ----------------------------------------------------------------------------
    X := S * TX + (1-S) * X


interpolate S:real, TX:real, TY:real, TZ:real, X:real, Y:real, Z:real ->
// ----------------------------------------------------------------------------
//    Interpolate 3 variables at a time (typically coordinates)
// ----------------------------------------------------------------------------
    X := S * TX + (1-S) * X
    Y := S * TY + (1-S) * Y
    Z := S * TZ + (1-S) * Z


interpolate_position S:real, TX:real,TY:real,TZ:real, X:real,Y:real,Z:real ->
// ----------------------------------------------------------------------------
//    Interpolate a position and translate accordingly
// ----------------------------------------------------------------------------
    interpolate S, TX, TY, TZ, X, Y, Z
    translate X, Y, Z


interpolate_xangle S:real, TX:real, X:real ->
// ----------------------------------------------------------------------------
//   Interpolate a rotation angle around X (horizontal axis)
// ----------------------------------------------------------------------------
    interpolate S, TX, X
    rotatex X


interpolate_yangle S:real, TY:real, Y:real ->
// ----------------------------------------------------------------------------
//    Interpolate a rotation angle along Y (vertical axis)
// ----------------------------------------------------------------------------
    interpolate S, TY, Y
    rotatey Y


interpolate_zangle S:real, TZ:real, Z:real ->
// ----------------------------------------------------------------------------
//   Interpolate through Z axis (depth)
// ----------------------------------------------------------------------------
    interpolate S, TZ, Z
    rotatez Z


interpolate_scale S:real, TScale:real, Scale:real ->
// ----------------------------------------------------------------------------
//   Interpolate scale
// ----------------------------------------------------------------------------
    interpolate S, TScale, Scale
    scale Scale, Scale, Scale


interpolate_scale2 S:real, TScale:real, Scale:real ->
// ----------------------------------------------------------------------------
//   Interpolate scale on X and Y only
// ----------------------------------------------------------------------------
    interpolate S, TScale, Scale
    scale Scale, Scale, 1



// ============================================================================
// 
//   Fade-in and fade-out functions
// 
// ============================================================================

fade_in  Value:real, Duration:real  -> -expm1(-5 * Value / Duration)
fade_out Value:real, Duration:real  -> 1+expm1(-5 * Value / Duration)
fade_at X:real, N:real -> if X < N - 1 then 0 else if X < N - 0.5 then 2 * (X - N + 1) ^ 2 else if X < N then 1 - 2 * (X - N) ^ 2 else 1 
fade_out_at X:real, N:real -> 1 - fade_at (X, N) 
fade_between X:real, A:real, B:real -> (fade_at (X, A) * fade_at ( -X, -B) ) 

at N:real -> show fade_at (page_time, N) 
between A:real, B:real -> show fade_between (page_time, A, B) 

fade_list T:real, I:real, X:real -> X * fade_at (T, 1) 
fade_list T:real, I:real, X:real, Rest -> (X * fade_at (T, 1) + fade_list (T - I, I, Rest) ) 

disabled Body -> false 



// ============================================================================
// 
//   Helpers to skip to a given step in an animation
// 
// ============================================================================

step -> 0.0
smooth_step -> 0.0
highest_step -> 0.0
previous_page_number -> 0


skip S:real ->
// ----------------------------------------------------------------------------
//   Skip by amount S in the animation
// ----------------------------------------------------------------------------
    step := step + S
    if highest_step > 0 then
        if S > 0 and step > highest_step and page_number < page_count then
            goto_page page_name(page_number+1)
        if S < 0 and step < 0 and page_number >= 1 then
            goto_page page_name(page_number - 1)


skip_to S:real  ->
// ----------------------------------------------------------------------------
//   Skip directly to given animation step
// ----------------------------------------------------------------------------
    step := S


skip_directly_to S:real  ->
// ----------------------------------------------------------------------------
//   Skip directly to given animation step
// ----------------------------------------------------------------------------
    step := S
    smooth_step := S


step_scale N:integer ->
// ----------------------------------------------------------------------------
//    Adjust scale for current animation step
// ----------------------------------------------------------------------------
    fade_out((smooth_step - N) ^2, 1)


compute_smooth_step ->
// ----------------------------------------------------------------------------
//    Compute the value of smooth step
// ----------------------------------------------------------------------------
    if previous_page_number < page_number then
        step := 0.0
        smooth_step := 0.0
        previous_page_number := page_number
    else if previous_page_number > page_number then
        if (step = 12345678) then
            step := highest_step
            smooth_step := highest_step
            previous_page_number := page_number
        else
            step := 12345678

    page_time
    interpolate 0.05, step, smooth_step
    highest_step := 0.0


at_step N:integer ->
// ----------------------------------------------------------------------------
//   Show something at step N
// ----------------------------------------------------------------------------
    if N > highest_step then highest_step := N
    show fade_at(smooth_step, N)



// ============================================================================
// 
//   Specifying the duration of pages
// 
// ============================================================================

scheduled_duration -> 30.0 


page_duration Duration:real, Name:text -> 
// ----------------------------------------------------------------------------
//   Go to the named page after the given duration
// ----------------------------------------------------------------------------
    scheduled_duration := Duration 
    if page_time > Duration then 
        goto_page Name 


page_duration Duration:real, Page:integer ->
// ----------------------------------------------------------------------------
//   Go to a given page number after the given duration
// ----------------------------------------------------------------------------
    page_duration Duration, page_name Page 


page_duration Duration:real ->
// ----------------------------------------------------------------------------
//   Go to the next page after the given duration
// ----------------------------------------------------------------------------
    page_duration Duration, page_number + 1 
