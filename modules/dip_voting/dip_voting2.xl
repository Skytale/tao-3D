// ****************************************************************************
//  dip_voting2.xl                                                 Tao project
// ****************************************************************************
// 
//   File Description:
// 
//       DipVoting module definition
//
//       DIP protocol that deals with voting interaction data
//
// 
// 
// 
// 
// 
// ****************************************************************************
//  (C) 2012 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2012 Jerome Forissier <jerome@taodyne.com>
//  (C) 2012 Catherine Burvelle <catherine@taodyne.com>
// Copyright 2012 Taodyne SAS
// ****************************************************************************

import DIP 1.0

row_count -> 0

data vote_values
data item_types
data item_uuids

dip_voting_start Guuid:text ->
// ----------------------------------------------------------------------------
//   Start a voting game, given a game UUID
// ----------------------------------------------------------------------------
     page "Start voting " & Guuid,
        if check_license("DIP_voting 1.0", false) then
            locally
                if dip_start_game ("voting", Guuid) <> "" then
                    dip_next_page
                time
        else
            writeln"dip_voting_start inactive (no license)"


dip_voting_end Guuid:text ->
// ----------------------------------------------------------------------------
//   End a voting game, given a session UUID
// ----------------------------------------------------------------------------
    page "End voting " & Guuid,
        locally
            if dip_end_game ("voting", Guuid) <> "" then
                dip_next_page
            time


dip_voting Guuid:text, functionName:text ->
// ----------------------------------------------------------------------------
//   Apply function "functionName" to all voting items
// ----------------------------------------------------------------------------
    dip_get_csv "voting", Guuid, functionName


dip_voting Guuid:text ->
// ----------------------------------------------------------------------------
//  Register all voting items in vote_values, item_types and item_uuids tables
// ----------------------------------------------------------------------------
    row_count := 0
    dip_get_csv "voting", Guuid, "dip_voting_default_callback"
    

dip_voting_default_callback vote_value:integer, item_type:text, item_uuid:text ->
// ----------------------------------------------------------------------------
//  Store an item in vote_values, item_types and item_uuids tables
// ----------------------------------------------------------------------------
    vote_values[row_count] := vote_value
    item_types[row_count]  := item_type
    item_uuids[row_count]  := item_uuid
    row_count := row_count + 1

dip_voting_display_all ->
    dip_voting_display with 0 .. row_count

dip_voting_display row:integer ->
    writeln (text vote_values[row]) & " " & vote_types[row] & " " & vote_uuids[row]
