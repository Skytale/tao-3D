// ============================================================================
//
//   Definition of the interface between XLR and native code
//   for the "tao tester" module.
//   Tests...
//
// ============================================================================

#include "taotester.h"

#define RTAO(x)  return taoTester::tester()->x;

PREFIX(TestStartRec, tree, "test_start_record", ,
       RTAO(startRecTest(self)),
"/*| docname \"test_start_record\", \"test\", do { \
         dsyntax \"test_start_record\" ;\
         synopsis \"Start to record \"; \
         description \"Start to record events in order to replay them \"; \
         }\
|*/")
PREFIX(TestStopRec, tree, "test_stop_record", ,
       RTAO(stopRecTest(self)),
"/*| docname \"test_stop_record\", \"test\", do { \
         dsyntax \"test_stop_record\" ;\
         synopsis \"Stop the recording \"; \
         description \"Stop the recording \"; \
         }\
|*/")
PREFIX(TestReplay, tree, "test_replay", ,
       RTAO(playTest(self)),
"/*| docname \"test_replay\", \"test\", do { \
         dsyntax \"test_replay\" ;\
         synopsis \"Replay test \"; \
         description \"Replay the current test events. \"; \
         }\
|*/")
PREFIX(TestDef, tree, "test_definition",
       PARM(testname, text) PARM(feature, integer) PARM(description, text)
       PARM(threshold, real) PARM(testbody, tree),
       RTAO(testDef(context,
                    self, testname, feature, description,
                    testbody, threshold)),
"/*| docname \"test_definition\", \"test\", do { \
         dsyntax \"test_definition testname, feature, description, threshold, testbody\" ;\
         synopsis \"Define the current test\"; \
         description \"Test to activate rectangle action. \"; \
         parameters;\
         parameter \"text\", \"testname\", <<The name of the test.\
         It is used as basename for the filename, so it must not contain not valide characters for filename.>>;\
         parameter \"integer\", \"feature\", <<The feature identifier in redmine.>>;\
         parameter \"text\", \"description\", <<The description of the test.>>;\
         parameter \"real\", \"threshold\", <<The percentage of error authorized between reference and played images.>>;\
         parameter \"tree\", \"testbody\", <<The body of the test.\
         The description of events to play.>>;\
         }\
|*/")

PREFIX(TestAddKeyPress, tree, "test_add_key_press",
       PARM(key, integer) PARM(modifiers, integer) PARM(delay, integer),
       RTAO(testAddKeyPress(self, key, modifiers, delay)),
"/*| docname \"test_add_key_press\", \"test\", do { \
         dsyntax \"test_add_key_press key, modifiers, delay\" ;\
         synopsis \"Add a key press event \"; \
         description \"Add a key press event to the current test.\"; \
         parameters;\
         parameter \"integer\", \"key\", <<The code of the pressed key.\
         The possible values are the one from the enum Qt::Key.>>;\
         parameter \"integer\", \"modifiers\", \
         <<The ored value of modifiers hold down at the same time than the key.\
         The possible values are the one from the enum Qt::KeyboardModifier.>>;\
         parameter \"integer\", \"delay\", <<The delay in millisecond before \
         this event is executed.>>;\
         }\
|*/")
PREFIX(TestAddKeyRelease, tree, "test_add_key_release",
       PARM(key, integer) PARM(modifiers, integer) PARM(delay, integer),
       RTAO(testAddKeyRelease(self, key, modifiers, delay)),
"/*| docname \"test_add_key_release\", \"test\", do { \
         dsyntax \"test_add_key_release key, modifiers, delay\" ;\
         synopsis \"Add a key release event \"; \
         description \"Add a key release event to the current test.\"; \
         parameters;\
         parameter \"integer\", \"key\", <<The code of the released key.\
         The possible values are the one from the enum Qt::Key.>>;\
         parameter \"integer\", \"modifiers\", \
         <<The ored value of modifiers hold down at the same time than the key.\
         The possible values are the one from the enum Qt::KeyboardModifier.>>;\
         parameter \"integer\", \"delay\", <<The delay in millisecond before \
         this event is executed.>>;\
         }\
|*/")
PREFIX(TestAddMousePress, tree, "test_add_mouse_press",
       PARM(button, integer) PARM(modifiers, integer)
       PARM(x, integer) PARM(y, integer) PARM(delay, integer),
       RTAO(testAddMousePress(self, button, modifiers, x, y, delay)),
"/*| docname \"test_add_mouse_press\", \"test\", do { \
         dsyntax \"test_add_mouse_press button, modifiers, x, y, delay\" ;\
         synopsis \"Add a mouse button press event \"; \
         description \"Add a mouse button press event to the current test.\"; \
         parameters;\
         parameter \"integer\", \"button \", <<The code of the pressed key.\
         The possible values are the one from the enum Qt::MouseButton.>>;\
         parameter \"integer\", \"modifiers\", \
         <<The ored value of modifiers hold down at the same time than the key.\
         The possible values are the one from the enum Qt::KeyboardModifier.>>;\
         parameter \"integer\", \"x\", <<The x-coordinate of the event.>>;\
         parameter \"integer\", \"y\", <<The y-coordinate of the event.>>;\
         parameter \"integer\", \"delay\", <<The delay in millisecond before \
         this event is executed.>>;\
         }\
|*/")
PREFIX(TestAddMouseRelease, tree, "test_add_mouse_release",
       PARM(button, integer) PARM(modifiers, integer)
       PARM(x, integer) PARM(y, integer) PARM(delay, integer),
       RTAO(testAddMouseRelease(self, button, modifiers, x, y, delay)),
"/*| docname \"test_add_mouse_release\", \"test\", do { \
         dsyntax \"test_add_mouse_release button, modifiers, x, y, delay\" ;\
         synopsis \"Add a mouse button release event \"; \
         description \"Add a mouse button release event to the current test.\"; \
         parameters;\
         parameter \"integer\", \"button \", <<The code of the released key.\
         The possible values are the one from the enum Qt::MouseButton.>>;\
         parameter \"integer\", \"modifiers\", \
         <<The ored value of modifiers hold down at the same time than the key.\
         The possible values are the one from the enum Qt::KeyboardModifier.>>;\
         parameter \"integer\", \"x\", <<The x-coordinate of the event.>>;\
         parameter \"integer\", \"y\", <<The y-coordinate of the event.>>;\
         parameter \"integer\", \"delay\", <<The delay in millisecond before \
         this event is executed.>>;\
         }\
|*/")
PREFIX(TestAddMouseDClick, tree, "test_add_mouse_dclick",
       PARM(button, integer) PARM(modifiers, integer)
       PARM(x, integer) PARM(y, integer) PARM(delay, integer),
       RTAO(testAddMouseDClick(self, button, modifiers, x, y, delay)),
"/*| docname \"test_add_mouse_dclick\", \"test\", do { \
         dsyntax \"test_add_mouse_dclick button, modifiers, x, y, delay\" ;\
         synopsis \"Add a mouse button double click event \"; \
         description \"Add a mouse button double click event to the current test.\"; \
         parameters;\
         parameter \"integer\", \"button \", <<The code of the pressed button.\
         The possible values are the one from the enum Qt::MouseButton.>>;\
         parameter \"integer\", \"modifiers\", \
         <<The ored value of modifiers hold down at the same time than the key.\
         The possible values are the one from the enum Qt::KeyboardModifier.>>;\
         parameter \"integer\", \"x\", <<The x-coordinate of the event.>>;\
         parameter \"integer\", \"y\", <<The y-coordinate of the event.>>;\
         parameter \"integer\", \"delay\", <<The delay in millisecond before \
         this event is executed.>>;\
         }\
|*/")
PREFIX(TestAddMouseMove, tree, "test_add_mouse_move",
       PARM(button, integer) PARM(modifiers, integer)
       PARM(x, integer) PARM(y, integer) PARM(delay, integer),
       RTAO(testAddMouseMove(self, button, modifiers, x, y, delay)),
"/*| docname \"test_add_mouse_move\", \"test\", do { \
         dsyntax \"test_add_mouse_move button, modifiers, x, y, delay\" ;\
         synopsis \"Add a mouse move event \"; \
         description \"Add a mouse move event to the current test.\"; \
         parameters;\
         parameter \"integer\", \"button \", <<The code of the pressed button.\
         The possible values are the one from the enum Qt::MouseButton.>>;\
         parameter \"integer\", \"modifiers\", \
         <<The ored value of modifiers hold down at the same time than the key.\
         The possible values are the one from the enum Qt::KeyboardModifier.>>;\
         parameter \"integer\", \"x\", <<The x-coordinate of the event.>>;\
         parameter \"integer\", \"y\", <<The y-coordinate of the event.>>;\
         parameter \"integer\", \"delay\", <<The delay in millisecond before \
         this event is executed.>>;\
         }\
|*/")
PREFIX(TestAddAction, tree, "test_add_action",
       PARM(actionName, text) PARM(delay, integer),
       RTAO(testAddAction(self, actionName, delay)),
"/*| docname \"test_add_action\", \"test\", do { \
         dsyntax \"test_add_action actionName, delay\" ;\
         synopsis \"Add an action event \"; \
         description \"Add an action event to the current test.\"; \
         parameters;\
         parameter \"text\", \"actionName\", <<The objectName of the action.>>;\
         parameter \"integer\", \"delay\", <<The delay in millisecond before \
         this event is executed.>>;\
         }\
|*/")

PREFIX(TestSave, tree, "test_save", , RTAO(saveTest(self)),
"/*| docname \"test_save\", \"test\", do { \
         dsyntax \"test_save\" ;\
         synopsis \"Save the current test to disc\"; \
         description \"Save the current test to disc.\"; \
         }\
|*/")

PREFIX(TestReset, tree, "test_reset", , RTAO(resetTest(self)),
"/*| docname \"test_reset\", \"test\", do { \
         dsyntax \"test_reset\" ;\
         synopsis \"Save the current test to disc\"; \
         description \"Save the current test to disc.\"; \
         }\
|*/")

PREFIX(TestCheck, tree, "test_check", , RTAO(testCheck(self)),
"/*| docname \"test_check\", \"test\", do { \
         dsyntax \"test_check\" ;\
         synopsis \"Add a check point to the test\"; \
         description \"Add a check point with its image to the test list.\
         If the check pointis KO, the simulation is not stopped.\"; \
         }\
|*/")

PREFIX(TestAddCheck, tree, "test_add_check",
       PARM(num, integer) PARM(delay, integer),
       RTAO(testAddCheck(self, num, delay)),
"/*| docname \"test_add_check\", \"test\", do { \
         dsyntax \"test_add_check num, delay\" ;\
         synopsis \"Check the view\"; \
         description \"Check\"; \
         parameters;\
         parameter \"integer\", \"numero\", <<[TODO]>>;\
         parameter \"integer\", \"delay\", <<The delay in millisecond before \
         this event is executed.>>;\
         }\
|*/")

PREFIX(TestAddFont, tree, "test_add_font",
       PARM(diagname, text) PARM(ftname, text) PARM(delay, integer),
       RTAO(testAddFont(self, diagname, ftname, delay)),
"/*| docname \"test_add_font\", \"test\", do { \
         dsyntax \"test_add_font diagname, ftname, delay\" ;\
         synopsis \"Add an event to change the current font\"; \
         description \"Check[TODO]\"; \
         parameters;\
         parameter \"text\", \"diagname\", <<Dialog box name>>;\
         parameter \"integer\", \"numero\", <<[TODO]>>;\
         parameter \"integer\", \"delay\", <<The delay in millisecond before \
         this event is executed.>>;\
         }\
|*/")

PREFIX(TestAddColor, tree, "test_add_color",
       PARM(diagname, text) PARM(colname, text) PARM(delay, integer),
       RTAO(testAddColor(self, diagname, colname, delay)),
"/*| docname \"test_add_color\", \"test\", do { \
         dsyntax \"test_add_color diagname, colname, delay\" ;\
         synopsis \"Check the view[TODO]\"; \
         description \"Check\"; \
         parameters;\
         parameter \"text\", \"diagname\", <<Dialog box name>>;\
         parameter \"text\", \"colname\", <<The name of the color (ex: #8aff40)>>;\
         parameter \"integer\", \"delay\", <<The delay in millisecond before \
         this event is executed.>>;\
         }\
|*/")

PREFIX(TestAddCloseDialog, tree, "test_add_close_dialog",
       PARM(diagname, text) PARM(result, integer) PARM(delay, integer),
       RTAO(testAddCloseDialog(self, diagname, result, delay)),
"/*| docname \"test_add_close_dialog\", \"test\", do { \
         dsyntax \"test_add_close_dialog diagname, result, delay\" ;\
         synopsis \"Check the view [TODO]\"; \
         description \"Check\"; \
         parameters;\
         parameter \"text\", \"diagname\", <<Dialog box name>>;\
         parameter \"text\", \"colname\", <<The name of the color (ex: #8aff40)>>;\
         parameter \"integer\", \"delay\", <<The delay in millisecond before \
         this event is executed.>>;\
         }\
|*/")
