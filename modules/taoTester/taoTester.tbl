// ****************************************************************************
//  taoTester.tbl                                                   Tao project
// ****************************************************************************
//
//   File Description:
//
//   Definition of the interface between XLR and native code
//   for the "tao tester" module.
//   Tests...
//
//
//
//
//
//
// ****************************************************************************
// This software is property of Taodyne SAS - Confidential
// Ce logiciel est la propriété de Taodyne SAS - Confidentiel
//  (C) 2010 Catherine Burvelle <cathy@taodyne.com>
//  (C) 2010 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2010 Taodyne SAS
// ****************************************************************************

#include "taotester.h"

#define RTAO(x)  return taoTester::tester()->x;

PREFIX(TestStartRec,  tree,  "test_start_record", , RTAO(startRecTest(self)),
       GROUP(test)
       SYNOPSIS("Start to record ")
       DESCRIPTION("Start to record events in order to replay them "))
PREFIX(TestStop,  tree,  "test_stop", , RTAO(stop(self)),
       GROUP(test)
       SYNOPSIS("Stop the recording or the playing of tests.")
       DESCRIPTION("Stop the recording or the playing of tests."))
PREFIX(TestReplay,  tree,  "test_replay", , RTAO(playTest(self)),
       GROUP(test)
       SYNOPSIS("Replay test ")
       DESCRIPTION("Replay the current test events. "))
PREFIX(TestDef,  tree,  "test_definition",
       PARM(testname, text, "Name of the test. It is used to find/write files.")
       PARM(feature, integer, "The feature ID in Redmine this test refers to.")
       PARM(description, text, "The description of this particular test.")
       PARM(width, integer, "Width of the window.")
       PARM(height, integer, "Height of the window.")
       PARM(threshold, real, "The authorized error threshold for image comparison.")
       PARM(testbody, tree, "The sequence of actions that makes the test."),
       RTAO(testDef(context, self, testname, feature, description, testbody, threshold, width, height)),
       GROUP(test)
       SYNOPSIS("Define the current test")
       DESCRIPTION("Test to activate rectangle action. "))

PREFIX(TestAddKeyPress,  tree,  "test_add_key_press",
       PARM(key, integer, )
       PARM(modifiers, integer, )
       PARM(delay, integer, ),
       RTAO(testAddKeyPress(self, key, modifiers, delay)),
       GROUP(test)
       SYNOPSIS("Add a key press event ")
       DESCRIPTION("Add a key press event to the current test."))
PREFIX(TestAddKeyRelease,  tree,  "test_add_key_release",
       PARM(key, integer, )
       PARM(modifiers, integer, )
       PARM(delay, integer, ),
       RTAO(testAddKeyRelease(self, key, modifiers, delay)),
       GROUP(test)
       SYNOPSIS("Add a key release event ")
       DESCRIPTION("Add a key release event to the current test."))
PREFIX(TestAddMousePress,  tree,  "test_add_mouse_press",
       PARM(button, integer, )
       PARM(modifiers, integer, )
       PARM(x, integer, )
       PARM(y, integer, )
       PARM(delay, integer, ),
       RTAO(testAddMousePress(self, button, modifiers, x, y, delay)),
       GROUP(test)
       SYNOPSIS("Add a mouse button press event ")
       DESCRIPTION("Add a mouse button press event to the current test."))
PREFIX(TestAddMouseRelease,  tree,  "test_add_mouse_release",
       PARM(button, integer, )
       PARM(modifiers, integer, )
       PARM(x, integer, )
       PARM(y, integer, )
       PARM(delay, integer, ),
       RTAO(testAddMouseRelease(self, button, modifiers, x, y, delay)),
       GROUP(test)
       SYNOPSIS("Add a mouse button release event ")
       DESCRIPTION("Add a mouse button release event to the current test."))
PREFIX(TestAddMouseDClick,  tree,  "test_add_mouse_dclick",
       PARM(button, integer, )
       PARM(modifiers, integer, )
       PARM(x, integer, )
       PARM(y, integer, )
       PARM(delay, integer, ),
       RTAO(testAddMouseDClick(self, button, modifiers, x, y, delay)),
       GROUP(test)
       SYNOPSIS("Add a mouse button double click event ")
       DESCRIPTION("Add a mouse button double click event to the current test."))
PREFIX(TestAddMouseMove,  tree,  "test_add_mouse_move",
       PARM(button, integer, )
       PARM(modifiers, integer, )
       PARM(x, integer, )
       PARM(y, integer, )
       PARM(delay, integer, ),
       RTAO(testAddMouseMove(self, button, modifiers, x, y, delay)),
       GROUP(test)
       SYNOPSIS("Add a mouse move event ")
       DESCRIPTION("Add a mouse move event to the current test."))
PREFIX(TestAddAction,  tree,  "test_add_action",
       PARM(actionName, text, )
       PARM(delay, integer, ),
       RTAO(testAddAction(self, actionName, delay)),
       GROUP(test)
       SYNOPSIS("Add an action event ")
       DESCRIPTION("Add an action event to the current test."))

PREFIX(TestSave,  tree,  "test_save", , RTAO(saveTest(self)),
       GROUP(test)
       SYNOPSIS("Save the current test to disc")
       DESCRIPTION("Save the current test to disc."))

PREFIX(TestReset,  tree,  "test_reset", , RTAO(resetTest(self)),
       GROUP(test)
       SYNOPSIS("Save the current test to disc")
       DESCRIPTION("Save the current test to disc."))

PREFIX(TestCheck,  tree,  "test_check", , RTAO(testCheck(self)),
       GROUP(test)
       SYNOPSIS("Add a check point to the test")
       DESCRIPTION("Add a check point with its image to the test list. If the check pointis KO, the simulation is not stopped."))

PREFIX(TestAddCheck,  tree,  "test_add_check",
       PARM(num, integer, )
       PARM(delay, integer, ),
       RTAO(testAddCheck(self, num, delay)),
       GROUP(test)
       SYNOPSIS("Check the view")
       DESCRIPTION("Check"))

PREFIX(TestAddFont,  tree,  "test_add_font",
       PARM(diagname, text, )
       PARM(ftname, text, )
       PARM(delay, integer, ),
       RTAO(testAddFont(self, diagname, ftname, delay)),
       GROUP(test)
       SYNOPSIS("Add an event to change the current font")
       DESCRIPTION("Check[TODO]"))

PREFIX(TestAddFile,  tree,  "test_add_file",
       PARM(diagname, text, "The objectname of the dialog box.")
       PARM(filename, text, "The name of the selected file.")
       PARM(delay, integer, "The delay before this action is excuted."),
       RTAO(testAddFile(self, diagname, filename, delay)),
       GROUP(test)
       SYNOPSIS("Add an event to select a file name.")
       DESCRIPTION("Add an event to select a file name."))

PREFIX(TestAddColor,  tree,  "test_add_color",
       PARM(diagname, text, )
       PARM(colname, text, )
       PARM(delay, integer, ),
       RTAO(testAddColor(self, diagname, colname, delay)),
       GROUP(test)
       SYNOPSIS("Check the view[TODO]")
       DESCRIPTION("Check"))

PREFIX(TestAddCloseDialog,  tree,  "test_add_close_dialog",
       PARM(diagname, text, )
       PARM(result, integer, )
       PARM(delay, integer, ),
       RTAO(testAddCloseDialog(self, diagname, result, delay)),
       GROUP(test)
       SYNOPSIS("Check the view [TODO]")
       DESCRIPTION("Check"))
