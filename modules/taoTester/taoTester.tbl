// ============================================================================
//
//   Definition of the interface between XLR and native code
//   for the "tao tester" module.
//   Tests...
//
// ============================================================================


#include "taotester.h"

#define RTAO(x)  return taoTester::tester()->x;

PREFIX(TestStartRec,  tree,  "test_start_record", , RTAO(startRecTest(self)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Start to record "),
    DOC_DESCRIPTION("Start to record events in order to replay them "),, )
PREFIX(TestStopRec,  tree,  "test_stop_record", , RTAO(stopRecTest(self)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Stop the recording "),
    DOC_DESCRIPTION("Stop the recording "),, )
PREFIX(TestReplay,  tree,  "test_replay", , RTAO(playTest(self)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Replay test "),
    DOC_DESCRIPTION("Replay the current test events. "),, )
PREFIX(TestDef,  tree,  "test_definition",
    PARM(testname, text, )
    PARM(feature, integer, )
    PARM(description, text, )
    PARM(threshold, real, )
    PARM(testbody, tree, )
, RTAO(testDef(self, testname, feature, description, testbody, threshold)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Define the current test"),
    DOC_DESCRIPTION("Test to activate rectangle action. "),, )

PREFIX(TestAddKeyPress,  tree,  "test_add_key_press",
    PARM(key, integer, )
    PARM(modifiers, integer, )
    PARM(delay, integer, )
, RTAO(testAddKeyPress(self, key, modifiers, delay)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Add a key press event "),
    DOC_DESCRIPTION("Add a key press event to the current test."),, )
PREFIX(TestAddKeyRelease,  tree,  "test_add_key_release",
    PARM(key, integer, )
    PARM(modifiers, integer, )
    PARM(delay, integer, )
, RTAO(testAddKeyRelease(self, key, modifiers, delay)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Add a key release event "),
    DOC_DESCRIPTION("Add a key release event to the current test."),, )
PREFIX(TestAddMousePress,  tree,  "test_add_mouse_press",
    PARM(button, integer, )
    PARM(modifiers, integer, )
    PARM(x, integer, )
    PARM(y, integer, )
    PARM(delay, integer, )
, RTAO(testAddMousePress(self, button, modifiers, x, y, delay)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Add a mouse button press event "),
    DOC_DESCRIPTION("Add a mouse button press event to the current test."),, )
PREFIX(TestAddMouseRelease,  tree,  "test_add_mouse_release",
    PARM(button, integer, )
    PARM(modifiers, integer, )
    PARM(x, integer, )
    PARM(y, integer, )
    PARM(delay, integer, )
, RTAO(testAddMouseRelease(self, button, modifiers, x, y, delay)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Add a mouse button release event "),
    DOC_DESCRIPTION("Add a mouse button release event to the current test."),, )
PREFIX(TestAddMouseDClick,  tree,  "test_add_mouse_dclick",
    PARM(button, integer, )
    PARM(modifiers, integer, )
    PARM(x, integer, )
    PARM(y, integer, )
    PARM(delay, integer, )
, RTAO(testAddMouseDClick(self, button, modifiers, x, y, delay)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Add a mouse button double click event "),
    DOC_DESCRIPTION("Add a mouse button double click event to the current test."),, )
PREFIX(TestAddMouseMove,  tree,  "test_add_mouse_move",
    PARM(button, integer, )
    PARM(modifiers, integer, )
    PARM(x, integer, )
    PARM(y, integer, )
    PARM(delay, integer, )
, RTAO(testAddMouseMove(self, button, modifiers, x, y, delay)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Add a mouse move event "),
    DOC_DESCRIPTION("Add a mouse move event to the current test."),, )
PREFIX(TestAddAction,  tree,  "test_add_action",
    PARM(actionName, text, )
    PARM(delay, integer, )
, RTAO(testAddAction(self, actionName, delay)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Add an action event "),
    DOC_DESCRIPTION("Add an action event to the current test."),, )

PREFIX(TestSave,  tree,  "test_save", , RTAO(saveTest(self)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Save the current test to disc"),
    DOC_DESCRIPTION("Save the current test to disc."),, )

PREFIX(TestReset,  tree,  "test_reset", , RTAO(resetTest(self)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Save the current test to disc"),
    DOC_DESCRIPTION("Save the current test to disc."),, )

PREFIX(TestCheck,  tree,  "test_check", , RTAO(testCheck(self)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Add a check point to the test"),
    DOC_DESCRIPTION("Add a check point with its image to the test list. If the check pointis KO, the simulation is not stopped."),, )

PREFIX(TestAddCheck,  tree,  "test_add_check",
    PARM(num, integer, )
    PARM(delay, integer, )
, RTAO(testAddCheck(self, num, delay)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Check the view"),
    DOC_DESCRIPTION("Check"),, )

PREFIX(TestAddFont,  tree,  "test_add_font",
    PARM(diagname, text, )
    PARM(ftname, text, )
    PARM(delay, integer, )
, RTAO(testAddFont(self, diagname, ftname, delay)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Add an event to change the current font"),
    DOC_DESCRIPTION("Check[TODO]"),, )

PREFIX(TestAddColor,  tree,  "test_add_color",
    PARM(diagname, text, )
    PARM(colname, text, )
    PARM(delay, integer, )
, RTAO(testAddColor(self, diagname, colname, delay)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Check the view[TODO]"),
    DOC_DESCRIPTION("Check"),, )

PREFIX(TestAddCloseDialog,  tree,  "test_add_close_dialog",
    PARM(diagname, text, )
    PARM(result, integer, )
    PARM(delay, integer, )
, RTAO(testAddCloseDialog(self, diagname, result, delay)),
    DOC_GROUP(formula),
    DOC_SYNOPSIS("Check the view [TODO]"),
    DOC_DESCRIPTION("Check"),, )
