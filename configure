#!/bin/sh

CONFIGURE_OPTIONS="$@"

usage() {
  (
  echo "Usage: configure [options] [edition name] [QMake options]"
  echo ""
  echo "Runs QMake to configure the build environment for some pre-defined"
  echo "configurations of Tao Presentations. configure will:"
  echo ""
  echo "  - Select build options (enabling or disabling some features in the program)"
  echo "  - Select which modules will be built and packaged"
  echo "  - Select which templates will be included"
  echo "  - Define some variables related to license generation and checking"
  echo ""
  echo "Please look at the QMake 'Project MESSAGE' output for detailed information on"
  echo "what will be included in the build."
  echo ""
  echo "Options:"
  echo ""
  echo "  --debug         Build in debug mode (default is release)"
  echo "  -O3,-O4,-Ofast  Compiler options to make things faster"
  echo "  --with-modlic   Generate temporary (120-days) licenses for all licensed modules."
  echo "  --silent        Ignored."
  echo "  --verbose       Show all commands spawned by make (do not add CONFIG+=silent)."
  echo "  --disable-doc   Do not build documentation."
  echo "  --with-eula     Enable the End-User License Agreement dialog (REQUIRED for"
  echo "                  official builds)"
  echo "  --with-cfu      Check for update on application startup (unless overriden"
  echo "                  in preferences)"
  echo "  --with-ccache   Use compiler cache. Appends the following qmake flags:"
  echo "                  QMAKE_CC='ccache gcc' QMAKE_CXX='ccache g++'"
  echo ""
  echo "Edition Name:"
  echo ""
  echo "  design"
  echo "  <empty>     Configure for Tao Presentations Design and Design Pro."
  echo "              Edition is determined at run time, depending on the available licenses:"
  echo "                - 'Tao Presentations Design Pro <version>' => Design Pro"
  echo "                - 'Tao Presentations Impress <version>'    => Design Pro (compatibility)"
  echo "                - none of the above                        => Design"
  echo "              All default modules except autostereoscopic displays are built and"
  echo "              packaged, with no license. No application license is bundled."
  echo "              ** Design is an evaluation/demo version."
  echo "                - It shows a watermark (Taodyne logo in the corner)."
  echo "                - It shows a 'Buy' reminder on exit."
  echo "              ** Design Pro allows many modules to work without explicit license."
  echo "  player      Configure for the Tao Presentations Player and Player Pro."
  echo "              A stripped-down version of the regular build,"
  echo "              with no template, no documentation, no SDK, no Web Editor and some"
  echo "              limitations (see compile options). VLC is not packaged, it may be"
  echo "              installed separately."
  echo "              Edition is determined at run time, depending on the available licenses:"
  echo "                - 'Tao Presentations Player Pro <version>' => Player Pro"
  echo "                - otherwise                                => Player"
  echo "              ** Player is an evaluation/demo version."
  echo "                - It shows a watermark (Taodyne logo in the corner)."
  echo "                - It shows a 'Buy' reminder on exit."
  echo "              ** Player Pro removes the watermark if the document is signed by Design Pro."
  echo "  youactive   Configure for Tao Presentations YouActive. Same as the regular (\"unified\")"
  echo "              build, but includes additional modules used in the YouActive solution (DIP)."
  echo "  internal    Configure for an internal build with most features enabled (including"
  echo "              the less stable ones, not shipped with official Tao editions)".
  echo "                - This build checks the 'Design Pro' license"
  echo "                - All default modules are built and packaged, with 120-day licenses."
  echo ""
  echo "QMake options:"
  echo ""
  echo "  Any other option is passed unmodified to Qmake, after the options added by"
  echo "  this configure script. Many Tao build options are documented in main.pro."
  echo ""
  echo "Examples:"
  echo ""
  echo "  ./configure"
  echo "              Configure for the Design + Design Pro unfied build, in"
  echo "              release mode. './configure design' is equivalent."
  echo "  ./configure --debug designpro"
  echo "              Unified build with test license enabling Design Pro (debug build)."
  echo "  ./configure modules+=+some_module"
  echo "              Add module some_module to the modules normally selected"
  echo "              for the unified edition. Note the two + signs, before and after"
  echo "              the = sign. The first one means: append to the 'modules'"
  echo "              variable, do not overwrite it. As a result the module selected"
  echo "              for the unified edition are in effect and simply modified by the"
  echo "              option. The second + sign is processed by module_list.pri, see"
  echo "              this file for details."
  echo "  ./configure CONFIG+=x86"
  echo "              Configure for a 32-bit release build on MacOSX (default is 64-bit)"
  ) >&2
  exit 0
}

FLAGS="CONFIG+=release CONFIG+=silent"
VERSION=""
PACKAGE=""

done=
while [ $# -ne 0 ] ; do
  case "$1" in
    -h|--help)
      usage
      ;;
    -release|--release)
      FLAGS="$FLAGS DEFINES+=CFG_WITH_EULA"
      FLAGS="$FLAGS DEFINES+=CFG_WITH_CFU"
      shift
      ;;
    -debug|--debug)
      FLAGS="$FLAGS CONFIG-=release"
      VERSION="_Debug"
      shift
      ;;
    -O*)
      EXTRA="$EXTRA QMAKE_CFLAGS+=$1 QMAKE_CXXFLAGS+=$1 QMAKE_LDFLAGS+=$1"
      FLAGS="$FLAGS CONFIG-=release"
      VERSION="_$1"
      shift;;
    --with-modlic*)
      with_modlic=1
      shift
      ;;
    --silent)
      shift
      ;;
    --verbose)
      FLAGS="$FLAGS CONFIG-=silent"
      shift
      ;;
    --disable-doc)
      FLAGS="$FLAGS NO_DOC=1"
      shift
      ;;
    --with-eula)
      FLAGS="$FLAGS DEFINES+=CFG_WITH_EULA"
      shift
      ;;
    --with-cfu)
      FLAGS="$FLAGS DEFINES+=CFG_WITH_CFU"
      shift
      ;;
    --with-ccache)
      with_ccache=1
      shift
      ;;
    --xcode)
      with_xcode=1
      shift
      ;;
    design)
      shift ; done=1
      ;;
    player)
      FLAGS="$FLAGS NO_SDK=1 NO_DOC=1 NO_HELP_VIEWER=1 NO_WELCOME=1"
      FLAGS="$FLAGS NO_FONTS=1 VLCAV_NO_VLC_INSTALL=1 TAO_PLAYER=1"
      FLAGS="$FLAGS NO_WEBUI=1"
      FLAGS="$FLAGS DEFINES+=CFG_NOSRCEDIT DEFINES+=CFG_NOGIT"
      FLAGS="$FLAGS DEFINES+=CFG_NONETWORK DEFINES+=CFG_NOEDIT"
      FLAGS="$FLAGS DEFINES+=CFG_NO_NEW_FROM_TEMPLATE"
      FLAGS="$FLAGS DEFINES+=CFG_NO_QTWEBKIT"
      FLAGS="$FLAGS templates=none"
      PACKAGE="Player"
      shift ; done=1
      ;;
    youactive)
      FLAGS="$FLAGS modules+=+DIP"
      PACKAGE="YouActive"
      shift ; done=1
      ;;
    internal)
      EDITION=Internal
      with_modlic=1
      FLAGS="$FLAGS modules=all"
      PACKAGE="Internal"
      shift ; done=1
      ;;
    *)
      done=1
      ;;
  esac
  [ "$done" ] && break
done

# Process what was given
FLAGS="$FLAGS PACKAGE_APPEND=$PACKAGE$VERSION"

[ "$with_modlic" ] && FLAGS="$FLAGS SIGN_MODULE_LICENSES=1 LICENSE_VALIDITY=120"

if [ "$EDITION" = "Internal" ] ; then
  :
else
  FLAGS="$FLAGS DEFINES+=CFG_NOGIT DEFINES+=CFG_UNLICENSED_MAX_PAGES=5"
fi

# Default QMake flags for each OS
osflags() {
  UNAME=`uname`
  case "$UNAME" in
    Darwin)
       if [ "$with_xcode" ]; then
           echo "-spec macx-xcode"
       else
           if ( uname -r | grep -q ^13 ); then
               echo "-spec macx-llvm QMAKE_CXXFLAGS+=-Qunused-arguments $EXTRA"
           else
               echo "-spec macx-g++ $EXTRA"
           fi
       fi
       ;;
    MINGW*)
      echo "-spec win32-g++ $EXTRA"
      ;;
    Linux*)
      echo "$EXTRA"
      ;;
  esac
}

QT_VERSION=$(qmake -query QT_VERSION)
case $QT_VERSION in
  5*)
    # Make sure we don't inherit old settings via qmake cache
    echo > .qmake.cache
    ;;
esac

echo "/* Generated by ./configure */" >config.h
echo "#define CONFIGURE_OPTIONS \"$CONFIGURE_OPTIONS\"" >>config.h

echo Running: qmake -r `osflags` $FLAGS "$CCACHE_FLAGS" "$CCACHE_CC" "$CCACHE_CXX" "$@"
if [ "$with_ccache" ] ; then
  qmake -r `osflags` $FLAGS QMAKE_CXX='ccache g++' QMAKE_CC='ccache gcc' "$@"
else
  qmake -r `osflags` $FLAGS "$@"
fi
