// ****************************************************************************
//  graphics.tbl                                                    Tao project
// ****************************************************************************
//
//   File Description:
//
//     List of basic entry points used to create Tao documents
//
//
//
//
//
//
//
//
// ****************************************************************************
// This document is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html and Matthew 25:22 for details
//  (C) 1992-2010 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2010 Lionel Schaffhauser <lionel@taodyne.com>
//  (C) 2010 Catherine Burvelle <catherine@todyne.com>
//  (C) 2010 Taodyne SAS
// ****************************************************************************

// ============================================================================
//
// Getting attributes
//
// ============================================================================

PREFIX(Page, text, "page", PARM(n, text) PARM(b, code),
       RTAO(page(context,n,b)), 
       "/*| docname \"page\", \"page\", do { \
                dsyntax <<page name, content>>;\
                synopsis \"Create a new page.\" ; \
                description <<Create a new page in the document with the specified name and content.>> ;\
                parameters;\
                parameter \"text\", \"name\", <<The name of the page. [TODO ddd: What's happen if the name is not unique in the document ?]>>;\
                parameter \"tree\", \"content\", <<The content of the page.>>;\
                return_value \"text\", <<The name of the previously named page>>;\
                }\
          |*/")
PREFIX(PageLink, text, "page_link", PARM(k, text) PARM(n, text),
       RTAO(pageLink(self, k, n)),
       "/*| docname \"page_link\", \"page\", do { \
                dsyntax <<page_link key, name>>;\
                synopsis \"Indicate the chaining of pages.\" ; \
                description <<Links the key with the named page.>> ;\
                parameters;\
                parameter \"text\", \"key\", <<The key name.>>;\
                parameter \"text\", \"name\", <<The name of the page to link>>;\
                return_value \"text\", <<The name of the page previously linked to this key.>>;\
                }\
          |*/")
PREFIX(GotoPage, text, "goto_page", PARM(p, text), RTAO(gotoPage(self, p)),
       "/*| docname \"goto_page\", \"page\", do { \
                dsyntax <<goto_page name>>;\
                synopsis \"Directly go to the given page.\" ; \
                description <<Directly go to the given page.>> ;\
                parameters;\
                parameter \"text\", \"The name of the page to reach.\", <<>>;\
                return_value \"text\", <<The name of the previously shown page.>>;\
                }\
          |*/")

PREFIX(PageLabel,   text,     "page_label", ,   RTAO(pageLabel(self)),
       "/*| docname \"page_label\", \"page\", do { \
                dsyntax <<page_label>>;\
                synopsis \"The current page name.\" ; \
                description <<Return the current page name>> ;\
                return_value \"text\", <<Return the label of the current page>>;\
                }\
          |*/")
PREFIX(PageId,      integer,  "page_number", ,  RTAO(pageNumber(self)),
       "/*| docname \"page_number\", \"page\", do { \
                dsyntax <<page_number>>;\
                synopsis \"The current page number\" ; \
                description <<Return the number of the current page>> ;\
                return_value \"integer\", <<Return the number of the current page>>;\
                }\
          |*/")
PREFIX(PageCount,   integer,  "page_count", ,   RTAO(pageCount(self)),
       "/*| docname \"page_count\", \"page\", do { \
                dsyntax <<page_count>>;\
                synopsis \"The number of page.\" ; \
                description <<Return the number of pages in the current document>> ;\
                return_value \"integer\", <<Return the number of pages in the current document>>;\
                }\
          |*/")
PREFIX(PageWidth,   real,     "page_width", ,   RTAO(pageWidth(self)),
       "/*| docname \"page_width\", \"page\", do { \
                dsyntax <<page_width>>;\
                synopsis \"Return the width of pages\" ; \
                description <<Return the width of pages>> ;\
                return_value \"real\", <<Return the width of pages>>;\
                }\
          |*/")
PREFIX(PageHeight,  real,     "page_height", ,  RTAO(pageHeight(self)),
       "/*| docname \"page_height\", \"page\", do { \
                dsyntax <<page_height>>;\
                synopsis \"Return the height of pages\" ; \
                description <<Return the height of pages>> ;\
                return_value \"real\", <<Return the height of pages>>;\
                }\
          |*/")

PREFIX(PagePrintTime, real, "page_print_time", PARM(t, real),
       RTAO(pageSetPrintTime(self, t)),
       "/*| docname \"page_print_time\", \"page\", do { \
                dsyntax <<page_print_time seconds>>;\
                synopsis \"Set the freeze time used when printing.\" ; \
                description <<Set the time used when printing pages>> ;\
                return_value \"real\", <<Previous time used for printing>>;\
                }\
          |*/")

PREFIX(FrameWidth,  real,     "frame_width", ,  RTAO(frameWidth(self)),
       "/*| docname \"frame_width\", \"frame\", do { \
                dsyntax <<frame_width>>;\
                synopsis \"Return the width of the current layout frame\" ; \
                description <<Return the width of the current layout frame>> ;\
                return_value \"real\", <<Return the width of the current layout frame>>;\
                }\
          |*/")
PREFIX(FrameHeight, real,     "frame_height", , RTAO(frameHeight(self)),
       "/*| docname \"frame_height\", \"frame\", do { \
                dsyntax <<frame_height>>;\
                synopsis \"Return the height of the current layout frame\" ; \
                description <<Return the height of the current layout frame>> ;\
                return_value \"real\", <<Return the height of the current layout frame>>;\
                }\
          |*/")
PREFIX(FrameDepth,  real,     "frame_depth", ,  RTAO(frameDepth(self)),
       "/*| docname \"frame_depth\", \"frame\", do { \
                dsyntax <<frame_depth>>;\
                synopsis \"Return the depth of the current layout frame\" ; \
                description <<Return the depth of the current layout frame>> ;\
                return_value \"real\", <<Return the depth of the current layout frame>>;\
                }\
          |*/")
PREFIX(WindowWidth, real,     "window_width", , RTAO(windowWidth(self)),
       "/*| docname \"window_width\", \"window\", do { \
                dsyntax <<window_width>>;\
                synopsis \"Return the width of the window in which we display\" ; \
                description <<Return the width of the window in which we display>> ;\
                return_value \"real\", <<Return the width of the window in which we display>>;\
                }\
          |*/")
PREFIX(WindowHeight,real,     "window_height", ,RTAO(windowHeight(self)),
       "/*| docname \"window_height\", \"window\", do { \
                dsyntax <<window_height>>;\
                synopsis \"Return the height of window in which we display\" ; \
                description <<Return the height of window in which we display>> ;\
                return_value \"real\", <<Return the height of window in which we display>>;\
                }\
          |*/")
PREFIX(DaySeconds,  real,     "time", ,         RTAO(time(self)),
       "/*| docname \"time\", \"time\", do { \
                dsyntax <<time>>;\
                synopsis \"Return a fractional time, including milliseconds\" ; \
                description <<Returns the current document's time or the time at wich the document was frozen.>> ;\
               return_value \"real\", <<Return a fractional time, including milliseconds>>;\
                }\
          |*/")
PREFIX(PageSeconds, real,     "page_time", ,    RTAO(pageTime(self)),
       "/*| docname \"page_time\", \"time\", do { \
                dsyntax <<page_time>>;\
                synopsis \"Returns the page time\" ; \
                description <<Returns the time of the current page relatively to the current document's time, or relatively to the frozen time.>> ;\
                return_value \"real\", <<Return a fractional time, including milliseconds>>;\
                }\
          |*/")
PREFIX(After,       real,     "after", PARM(d, real) PARM(c, code),
       RTAO(after(context, d, c)), 
       "/*| docname \"after\", \"time\", do { \
                dsyntax <<after delay, code>>;\
                synopsis \"Wait for time to execute code\" ; \
                description <<Execute the given code only after the specified amount of time.>> ;\
                parameters;\
                parameter \"real\", \"delay\", <<The delay in second. Sensitive upto millisecond.>>;\
                parameter \"tree\", \"code\", <<The code to execute.>>;\
                return_value \"real\", <<The real elapsed time.>>;\
                }\
          |*/")
PREFIX(Every,       real,     "every",
       PARM(i, real) PARM(d, real) PARM(c, code),
       RTAO(every(context, i, d, c)), "")
PREFIX(Every50Pct,  real,     "every",
       PARM(i, real) PARM(c, code),
       RTAO(every(context, i, 0.5, c)),
       "/*| docname \"every\", \"time\", do { \
                dsyntax <<every interval, duty, code>>;\
                dsyntax <<every interval, code>>;\
                synopsis \"Code executed every interval.\" ; \
                description <<[TODO ddd: Explication...]>> ;\
                parameters;\
                parameter \"real\", \"interval\", <<[TODO ddd: Explication...]>>;\
                parameter \"real\", \"duty\", <<[TODO ddd: Explication...]. If not given the default value is 0.5>>;\
                parameter \"tree\", \"code\", <<The code to be executed>>;\
                return_value \"real\", <<The real elapsed time.>>;\
                }\
          |*/")
PREFIX(Seconds, integer, "seconds" ,, RTAO(seconds(self)), "")
PREFIX(Minutes, integer, "minutes" ,, RTAO(minutes(self)), "")
PREFIX(Hours,   integer, "hours"   ,, RTAO(hours(self)),   "")
PREFIX(Day,     integer, "day"     ,, RTAO(day(self)),     "")
PREFIX(WeekDay, integer, "week_day",, RTAO(weekDay(self)), "")
PREFIX(YearDay, integer, "year_day",, RTAO(yearDay(self)), "")
PREFIX(Month,   integer, "month"   ,, RTAO(month(self)),   "")
PREFIX(Year,    integer, "year"    ,, RTAO(year(self)),    "")

PREFIX(MouseX, real, "mouse_x", ,RTAO(mouseX(self)),
       "/*| docname \"mouse_x\", \"mouse\", do { \
                dsyntax <<mouse_x>>;\
                synopsis \"Mouse x-coordinate\" ; \
                description <<Mouse x-coordinate>> ;\
                return_value \"real\", <<Return the position of the mouse>>;\
                }\
          |*/")
PREFIX(MouseY, real, "mouse_y", ,RTAO(mouseY(self)),
       "/*| docname \"mouse_y\", \"mouse\", do { \
                dsyntax <<mouse_y>>;\
                synopsis \"Mouse y-coordinate\" ; \
                description <<Mouse y-coordinate>> ;\
                return_value \"real\", <<Return the position of the mouse>>;\
                }\
          |*/")
PREFIX(MouseButtons, integer, "mouse_buttons", , RTAO(mouseButtons(self)),
       "/*| docname \"mouse_buttons\", \"mouse\", do { \
                dsyntax <<mouse_buttons>>;\
                synopsis \"Return the buttons of the last mouse event\" ; \
                description <<Return the buttons of the last mouse event. It is an OR combination of following values:\n\
Qt::NoButton	0x00000000	The button state does not refer to any button (see QMouseEvent::button()).\n\
Qt::LeftButton	0x00000001	The left button is pressed, or an event refers to the left button. (The left button may be the right button on left-handed mice.)\n\
Qt::RightButton	0x00000002	The right button.\n\
Qt::MidButton	0x00000004	The middle button.\n\
Qt::XButton1	0x00000008	The first X button.\n\
Qt::XButton2	0x00000010	The second X button.\n\
>> ;\
                return_value \"integer\", <<Return the buttons of the last mouse event>>;\
                }\
          |*/")
PREFIX(ShapeAction, tree, "on",PARM(n,text) PARM(t,code),
       RTAO(shapeAction(self,n,t)), 
       "/*| docname \"on\", \"mouse\", do { \
                dsyntax <<on action, code>>;\
                synopsis \"Associate the specified code to the named action.\" ; \
                description <<Associate the specified code to the named action. This code is then executed when the action occurs on the current shape.\">> ;\
                parameters;\
                parameter \"text\", \"action\", <<The action name>>;\
                parameter \"tree\", \"code\", <<The code to execute>>;\
                }\
          |*/")
PREFIX(ShapeClickAction, tree, "on_click",PARM(t,code),
       RTAO(shapeAction(self,"click",t)), 
       "/*| docname \"on_click\", \"mouse\", do { \
                dsyntax <<on_click code>>;\
                synopsis \"Associate code with click.\" ; \
                description <<Associate the specified code to the click>> ;\
                parameters;\
                parameter \"tree\", \"code\", <<The code to execute>>;\
                see \"on\";\
                }\
          |*/")
PREFIX(ShapeMouseoverAction, tree, "on_mouseover",PARM(t,code),
       RTAO(shapeAction(self,"mouseover",t)), 
       "/*| docname \"on_mouseover\", \"mouse\", do { \
                dsyntax <<on_mouseover code>>;\
                synopsis \"Associate code with mouse over\" ; \
                description <<Associate the specified code to the mouse over>> ;\
                parameters;\
                parameter \"tree\", \"code\", <<The code to execute>>;\
                see \"on\";\
                }\
          |*/")



// ============================================================================
//
// Preserving attributes
//
// ============================================================================

PREFIX(Locally, tree, "locally", PARM(t, code),
       RTAO(locally(context, self, t)), 
       "/*| docname \"locally\", \"code\", do { \
                dsyntax <<locally code>>;\
                synopsis \"Make a local context\" ; \
                description <<Evaluate the child tree while preserving the current state>> ;\
                parameters;\
                parameter \"tree\", \"code\", <<The code to execute in a local context>>;\
                return_value \"tree\", <<The result of the child execution.>>;\
                }\
          |*/")
PREFIX(Shape,   tree, "shape",   PARM(t, code),
       RTAO(shape(context, self, t)), 
       "/*| docname \"shape\", \"code:graph\", do { \
                dsyntax <<shape code>>;\
                synopsis \"Make the shape selectable\" ; \
                description <<Evaluate the child and mark the current shape. Make the shape sensible to mosue events like selection, motion, rotation...>> ;\
                parameters;\
                parameter \"tree\", \"code\", <<The code of the shape.>>;\
                return_value \"\", <<The result of the child execution.>>;\
                }\
          |*/")
PREFIX(Widget,  tree, "active_widget", PARM(t,code),
       RTAO(activeWidget(context, self, t)), 
       "/*| docname \"active_widget\", \"code:graph:widget\", do { \
                dsyntax <<active_widget code>>;\
                synopsis \"Make the widget clickable\" ; \
                description <<Create a context for active widgets, e.g. buttons>> ;\
                parameters;\
                parameter \"tree\", \"code\", <<The code that represent the widget.>>;\
                return_value \"tree\", <<The result of the child execution.>>;\
                }\
          |*/")
PREFIX(Anchor,  tree, "anchor",   PARM(t, code),
       RTAO(anchor(context, self, t)), 
       "/*| docname \"anchor\", \"graph\", do { \
                dsyntax <<anchor code>>;\
                synopsis \"\" ; \
                description <<Anchor a set of shapes to the current position>> ;\
                parameters;\
                parameter \"tree\", \"code\", <<The code that represent the shapes to be anchored.>>;\
                return_value \"tree\", <<The result of the child execution.>>;\
                }\
          |*/")



// ============================================================================
//
//   Transforms
//
// ============================================================================

PREFIX(ResetTransform, tree, "reset_transform", , RTAO(resetTransform(self)),
       "/*| docname \"reset_transform\", \"graph:transform\", do { \
                dsyntax <<reset_transform>>;\
                synopsis \"Reset transform\" ; \
                description <<Reset transform to original projection state.>> ;\
                }\
          |*/")

PREFIX(RotateX, tree, "rotatex", PARM(rx, real), RTAO(rotatex(self, rx)),
       "/*| docname \"rotatex\", \"graph:transform\", do { \
                dsyntax <<rotatex rx>>;\
                synopsis \"Rotate around X\" ; \
                description <<Rotate around X axis.>> ;\
                parameters;\
                parameter \"real\", \"rx\", <<The angle of rotation in degree.[TODO : check the unit]>>;\
                }\
          |*/")
PREFIX(RotateY, tree, "rotatey", PARM(ry, real), RTAO(rotatey(self, ry)),
       "/*| docname \"rotatey\", \"graph:transform\", do { \
                dsyntax <<rotatey ry>>;\
                synopsis \"Rotate around Y\" ; \
                description <<Rotate around Y axis.>> ;\
                parameters;\
                parameter \"real\", \"ry\", <<The angle of rotation in degree.[TODO : check the unit]>>;\
                }\
          |*/")
PREFIX(RotateZ, tree, "rotatez", PARM(rz, real), RTAO(rotatez(self, rz)),
       "/*| docname \"rotatez\", \"graph:transform\", do { \
                dsyntax <<rotatez rz>>;\
                synopsis \"Rotate around Z\" ; \
                description <<Rotate around Z axis.>> ;\
                parameters;\
                parameter \"real\", \"rz\", <<The angle of rotation in degree.[TODO : check the unit]>>;\
                }\
          |*/")
PREFIX(Rotate, tree, "rotate",
       PARM(ra, real) PARM(rx, real) PARM(ry, real) PARM(rz, real),
       RTAO(rotate(self, ra, rx, ry, rz)),
       "/*| docname \"rotate\", \"graph:transform\", do { \
                dsyntax <<rotate rx, ry, rz>>;\
                synopsis \"Rotation\" ; \
                description <<Rotation along an arbitrary axis>> ;\
                parameters;\
                parameter \"real\", \"ra\", <<[TODO : A-t-on une rotation autour de l'axe du temps ???]>>;\
                parameter \"real\", \"rx\", <<angle around X-axis>>;\
                parameter \"real\", \"ry\", <<angle around Y-axis>>;\
                parameter \"real\", \"rz\", <<angle around Z-axis>>;\
                }\
          |*/")

PREFIX(TransX, tree, "translatex", PARM(x, real), RTAO(translatex(self, x)),
       "/*| docname \"translatex\", \"graph:transform\", do { \
                dsyntax <<translatex x>>;\
                synopsis \"Translate along X\" ; \
                description <<Translate along X-axis>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x translation.>>;\
                }\
          |*/")
PREFIX(TransY, tree, "translatey", PARM(y, real), RTAO(translatey(self, y)),
       "/*| docname \"translatey\", \"graph:transform\", do { \
                dsyntax <<translatey>>;\
                synopsis \"Translate along Y\" ; \
                description <<Translate along Y-axis>> ;\
                parameters;\
                parameter \"real\", \"y\", <<y translation.>>;\
                }\
          |*/")
PREFIX(TransZ, tree, "translatez", PARM(z, real), RTAO(translatez(self, z)),
       "/*| docname \"translatez\", \"graph:transform\", do { \
                dsyntax <<translatez>>;\
                synopsis \"Translate along Z\" ; \
                description <<Translate along Z-axis>> ;\
                parameters;\
                parameter \"real\", \"z\", <<z translation.>>;\
                }\
          |*/")
PREFIX(Translate, tree, "translate",
       PARM(x, real) PARM(y, real) PARM(z, real),
       RTAO(translate(self, x, y, z)),
       "/*| docname \"translate\", \"graph:transform\", do { \
                dsyntax <<translate x, y, z>>;\
                synopsis \"Translation along three axes\" ; \
                description <<Translation along three axes>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x translation.>>;\
                parameter \"real\", \"y\", <<y translation.>>;\
                parameter \"real\", \"z\", <<z translation.>>;\
                }\
          |*/")

PREFIX(ScaleX, tree, "scalex", PARM(x, real), RTAO(rescalex(self, x)),
       "/*| docname \"scalex\", \"graph:transform\", do { \
                dsyntax <<scalex x>>;\
                synopsis \"Rescale along X\" ; \
                description <<Rescale along X-axis>> ;\
                parameters;\
                parameter \"real\", \"x\", <<scale factor.>>;\
                }\
          |*/")
PREFIX(ScaleY, tree, "scaley", PARM(y, real), RTAO(rescaley(self, y)),
       "/*| docname \"scaley\", \"graph:transform\", do { \
                dsyntax <<scaley y>>;\
                synopsis \"Rescale along Y\" ; \
                description <<Rescale along Y-axis>> ;\
                parameters;\
                parameter \"real\", \"y\", <<scale factor.>>;\
                }\
          |*/")
PREFIX(ScaleZ, tree, "scalez", PARM(z, real), RTAO(rescalez(self, z)),
       "/*| docname \"scalez\", \"graph:transform\", do { \
                dsyntax <<scalez z>>;\
                synopsis \"Rescale along Z\" ; \
                description <<Rescale along Z-axis>> ;\
                parameters;\
                parameter \"real\", \"z\", <<scale factor.>>;\
                }\
          |*/")
PREFIX(Scale, tree, "scale",
       PARM(x, real) PARM(y, real) PARM(z, real),
       RTAO(rescale(self, x, y, z)),
       "/*| docname \"scale\", \"graph:transform\", do { \
                dsyntax <<scale x, y, z>>;\
                synopsis \"Scaling along three axes\" ; \
                description <<Scaling along three axes>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-scale factor.>>;\
                parameter \"real\", \"y\", <<y-scale factor.>>;\
                parameter \"real\", \"z\", <<z-scale factor.>>;\
                }\
          |*/")



// ============================================================================
//
//    Setting attributes
//
// ============================================================================

PREFIX(EnableDepthTest, boolean, "enable_depth_test",,
       RTAO(depthTest(self, true)),
       "/*| docname \"enable_depth_test\", \"code:graph\", do { \
                dsyntax <<enable_depth_test>>;\
                synopsis \"\" ; \
                description << [TODO : Je ne vois pas vraiment...] >> ;\
                }\
          |*/")
PREFIX(DisableDepthTest, boolean, "disable_depth_test",,
       RTAO(depthTest(self, false)),
       "/*| docname \"disable_depth_test\", \"code:graph\", do { \
                dsyntax <<disable_depth_test>>;\
                synopsis \"\" ; \
                description <<[TODO : Je ne vois pas vraiment...]>> ;\
                }\
          |*/")
PREFIX(Refresh, tree, "refresh", PARM(d, real), RTAO(refresh(self, d)),
       "/*| docname \"refresh\", \"code:graph:time\", do { \
                dsyntax <<refresh d>>;\
                synopsis \"Refresh current layout every d second\" ; \
                description <<Periodically refresh the current layout (locally/shape block) every d seconds>> ;\
                parameters;\
                parameter \"real\", \"d\", <<The refresh delay in seconds.>>;\
                return_value \"boolean\", <<>>;\
                }\
          |*/")
PREFIX(RefreshOn, tree, "refresh_on", PARM(t, integer), RTAO(refreshOn(self, t)),
       "/*| docname \"refresh_on\", \"code:graph:time\", do { \
                dsyntax <<refresh_on t>>;\
                synopsis \"Refresh layout on event\" ; \
                description <<Refresh the current layout when specified event is received>> ;\
                parameters;\
                parameter \"int\", \"t\", <<The Qt event type, such as QEvent_MouseMove.>>;\
                return_value \"boolean\", <<>>;\
                }\
          |*/")
PREFIX(DefaultRefresh, tree, "default_refresh", PARM(d, real), RTAO(defaultRefresh(self, d)),
       "/*| docname \"default_refresh\", \"code:graph:time\", do { \
                dsyntax <<default_refresh d>>;\
                synopsis \"Change default refresh interval for time primitives\" ; \
                description <<Set the documents refresh interval for code blocks that depend on time due to the use of the time or page_time primitive.>> ;\
                parameters;\
                parameter \"real\", \"d\", <<The refresh interval in seconds>>;\
                return_value \"real\", <<The previous value>>;\
                }\
          |*/")
PREFIX(ShowSource, boolean, "show_source", PARM(an, boolean),
       RTAO(showSource(self, an)),
       "/*| docname \"show_source\", \"gui\", do { \
                dsyntax <<show_source an>>;\
                synopsis \"Source pane view\" ; \
                description <<Show or hide the source pane.>> ;\
                parameters;\
                parameter \"boolean\", \"an\", <<Show the source pane if true.>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FullScreen, boolean, "full_screen", PARM(fs, boolean),
       RTAO(fullScreen(self, fs)),
       "/*| docname \"full_screen\", \"gui\", do { \
                dsyntax <<full_screen fs>>;\
                synopsis \"Switch to full screen\" ; \
                description <<Set the full screen mode>> ;\
                parameters;\
                parameter \"boolean\", \"fs\", <<on or off>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(ToggleFullScreen, boolean, "toggle_full_screen", ,
       RTAO(toggleFullScreen(self)),
       "/*| docname \"toggle_full_screen\", \"gui\", do { \
                dsyntax <<toggle_full_screen>>;\
                synopsis \"Toggle the full screen mode\" ; \
                description <<Toggle the full screen mode>> ;\
                }\
          |*/")
PREFIX(AutoHideCursor, boolean, "auto_hide_cursor", PARM(autoHide, boolean),
       RTAO(autoHideCursor(self, autoHide)),
       "/*| docname \"auto_hide_cursor\", \"gui\", do { \
                dsyntax <<auto_hide_cursor ah>>;\
                synopsis \"Enable or disable cursor auto-hide\" ; \
                description <<Enable ior disable cursor auto-hide>> ;\
                parameters;\
                parameter \"boolean\", \"ah\", <<on or off>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(ToggleAutoHideCursor, boolean, "toggle_auto_hide_cursor", ,
       RTAO(toggleAutoHideCursor(self)),
       "/*| docname \"toggle_auto_hide_cursor\", \"gui\", do { \
                dsyntax <<toggle_auto_hide_cursor>>;\
                synopsis \"Toggle the cursor auto-hide mode\" ; \
                description <<Toggle the cursor auto-hide mode>> ;\
                }\
          |*/")
PREFIX(SlideShow, boolean, "slide_show", PARM(ss, boolean),
       RTAO(slideShow(self, ss)),
       "/*| docname \"slide_show\", \"gui\", do { \
                dsyntax <<slide_show ss>>;\
                synopsis \"Switch to slide show mode\" ; \
                description <<Set the slide show mode>> ;\
                parameters;\
                parameter \"boolean\", \"fs\", <<on or off>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(ToggleSlideShow, boolean, "toggle_slide_show", ,
       RTAO(toggleSlideShow(self)),
       "/*| docname \"toggle_slide_show\", \"gui\", do { \
                dsyntax <<toggle_slide_show>>;\
                synopsis \"Toggle the slide show mode\" ; \
                description <<Toggle the slide show mode>> ;\
                }\
          |*/")
PREFIX(ResetView, boolean, "reset_view", ,
       RTAO(resetView(self)),
       "/*| docname \"reset_view\", \"gui\", do { \
                dsyntax <<reset_view>>;\
                synopsis \"Reset view to default parameters\" ; \
                description <<Restore default view parameters (zoom, position etc.)>> ;\
                }\
          |*/")
PREFIX(PanEye, boolean, "pan", PARM(dx, real) PARM(dy, real),
       RTAO(panView(self,dx,dy)),
       "/*| docname \"pan\", \"gui\", do { \
                dsyntax <<pan dx, dy>>;\
                synopsis \"Pan the current view by the current amount\" ; \
                description <<Pan the current view by the current amount in x and y axis>> ;\
                parameters;\
                parameter \"real\", \"dx\", <<value for x-axis>>;\
                parameter \"real\", \"dy\", <<value for y-axis>>;\
                }\
          |*/")
PREFIX(GetZoom, real, "zoom", , RTAO(currentZoom(self)), "")
PREFIX(SetZoom, boolean, "zoom", PARM(z, real), RTAO(setZoom(self, z)),
       "/*| docname \"zoom\", \"gui\", do { \
                synopsis \"zoom manipulation\" ; \
                dsyntax <<zoom>>;\
                description <<Get the zoom level>> ;\
                return_value \"real\", <<the current zoom factor>>;\
                dsyntax <<zoom z>>;\
                description <<Set the zoom level>> ;\
                parameters;\
                parameter \"real\", \"z\", <<the zoom factor>>;\
                }\
          |*/")
PREFIX(GetEye, infix, "eye_position", , RTAO(currentEyePosition(self)), "")
PREFIX(SetEye, boolean, "eye_position",
       PARM(x, real) PARM(y, real) PARM(z, real),
       RTAO(setEyePosition(self, x, y, z)),
       "/*| docname \"eye_position\", \"gui\", do { \
                synopsis \"eye position manipulation\" ; \
                dsyntax <<eye_position>>;\
                return_value \"infix\", <<(x,y) :the current eye position.>>;\
                description <<Get the eye position value.>> ;\
                dsyntax <<eye_position x, y>>;\
                description <<Set the eye position value.>> ;\
                parameters;\
                parameter \"real\", \"x\", <<eye position on x-axis>>;\
                parameter \"real\", \"y\", <<eye position on y-axis>>;\
                }\
          |*/")
PREFIX(GetCenter, infix, "center_position", , RTAO(currentCenterPosition(self)),  "")
PREFIX(SetCenter, boolean, "center_position",
       PARM(x, real) PARM(y, real) PARM(z, real),
       RTAO(setCenterPosition(self, x, y, z)),
       "/*| docname \"center_position\", \"gui\", do { \
                synopsis \"Center position management\" ; \
                dsyntax <<center_position>>;\
                description <<Return the current center position>> ;\
                return_value \"infix\", <<(x,y) : the current center position>>;\
                dsyntax <<center_position x, y>>;\
                description <<Set the current center position>> ;\
                parameters;\
                parameter \"real\", \"x\", <<eye position on x-axis>>;\
                parameter \"real\", \"y\", <<eye position on y-axis>>;\
                }\
          |*/")
PREFIX(ToggleHandCursor, boolean, "toggle_hand_cursor", ,
       RTAO(toggleHandCursor(self)),
       "/*| docname \"toggle_hand_cursor\", \"gui\", do { \
                dsyntax <<toggle_hand_cursor>>;\
                synopsis \"Switch between hand and arrow cursor\" ; \
                description <<Switch between hand and arrow cursor>> ;\
                return_value \"boolean\", <<>>;\
                }\
          |*/")
PREFIX(KeyboardModifiers, integer, "keyboard_modifiers", ,
       RTAO(lastModifiers(self)),
       "/*| docname \"keyboard_modifiers\", \"code\", do { \
                dsyntax <<keyboard_modifiers>>;\
                synopsis \"Get the current modifiers\" ; \
                description <<Get the current keyboard modifiers. The value is an OR combination of the following :\n\
Qt::NoModifier	0x00000000	No modifier key is pressed.\n\
Qt::ShiftModifier	0x02000000	A Shift key on the keyboard is pressed.\n\
Qt::ControlModifier	0x04000000	A Ctrl key on the keyboard is pressed.\n\
Qt::AltModifier	0x08000000	An Alt key on the keyboard is pressed.\n\
Qt::MetaModifier	0x10000000	A Meta key on the keyboard is pressed.\n\
Qt::KeypadModifier	0x20000000	A keypad button is pressed.\n\
Qt::GroupSwitchModifier	0x40000000	X11 only. A Mode_switch key on the keyboard is pressed.\n\
Note: On Mac OS X, the ControlModifier value corresponds to the Command keys on the Macintosh keyboard, and the MetaModifier value corresponds to the Control keys. The KeypadModifier value will also be set when an arrow key is pressed as the arrow keys are considered part of the keypad.\n\
Note: On Windows Keyboards, Qt::MetaModifier and Qt::Key_Meta are mapped to the Windows key.>> ;\
                return_value \"integer\", <<Return the current modifiers>>;\
                }\
          |*/")
PREFIX(EnableAnimations, boolean, "enable_animations", PARM(an, boolean),
       RTAO(enableAnimations(self, an)),
       "/*| docname \"enable_animations\", \"gui\", do { \
                dsyntax <<enable_animations an>>;\
                synopsis \"Enable or disable animations\" ; \
                description <<Enable or disable animations>> ;\
                parameters;\
                parameter \"boolean\", \"an\", <<on or off>>;\
                return_value \"boolean\", <<True if previous state was on.>>;\
                }\
          |*/")
PREFIX(EnableStereoscopy, boolean, "enable_stereoscopy", PARM(mode, symbol),
       RTAO(enableStereoscopy(self, mode)),
       "/*| docname \"enable_stereoscopy\", \"gui\", do { \
                dsyntax <<enable_stereoscopy s>>;\
                synopsis \"Enable or disable stereoscopie mode\" ; \
                description <<Enable or disable stereoscopie mode>> ;\
                parameters;\
                parameter \"boolean\", \"s\", <<on or off>>;\
                return_value \"\", <<True if previous state was on.>>;\
                }\
          |*/")
PREFIX(StereoPlanes, boolean, "stereoscopy_planes", PARM(cnt, integer),
       RTAO(setStereoPlanes(self, cnt)),
       "/*| docname \"enable_stereoscopy\", \"gui\", do { \
                dsyntax <<enable_stereoscopy s>>;\
                synopsis \"Enable or disable stereoscopie mode\" ; \
                description <<Enable or disable stereoscopie mode>> ;\
                parameters;\
                parameter \"boolean\", \"s\", <<on or off>>;\
                return_value \"\", <<True if previous state was on.>>;\
                }\
          |*/")
PREFIX(EyeDistance, boolean, "eye_distance", PARM(e, real),
       RTAO(setEyeDistance(self, e)),
       "")
PREFIX(GetEyeDistance, real, "eye_distance",,
       RTAO(getEyeDistance(self)),
       "")
PREFIX(ZNear, boolean, "z_near", PARM(zn, real),
       RTAO(setZNear(self, zn)),
       "")
PREFIX(GetZNear, real, "z_near",,
       RTAO(getZNear(self)),
       "")
PREFIX(ZFar, boolean, "z_far", PARM(zf, real),
       RTAO(setZFar(self, zf)),
       "")
PREFIX(GetZFar, real, "z_far",,
       RTAO(getZFar(self)),
       "")
PREFIX(PolygonOffset, integer, "polygon_offset",
       PARM(f0, real) PARM(f1, real) PARM(u0, real) PARM(u1, real),
       RTAO(polygonOffset(self, f0, f1, u0, u1)),
       "/*| docname \"polygon_offset\", \"graph\", do { \
                dsyntax <<polygon_offset f0, f1, u0, u1>>;\
                synopsis \"Set the polygon offset factors\" ; \
                description <<Set the polygon offset factors>> ;\
                parameters;\
                parameter \"real\", \"f0\", <<factor base>>;\
                parameter \"real\", \"f1\", <<factor increment>>;\
                parameter \"real\", \"u0\", <<unit base>>;\
                parameter \"real\", \"u1\", <<unit increment>>;\
                return_value \"integer\", <<the current polygon offset>>;\
                }\
          |*/")



// ============================================================================
//
//    Graphic attributes
//
// ============================================================================

PREFIX(LineColorName, tree, "line_color",
       PARM(n, text) PARM(a, real),
       RTAO(lineColorName(self, n, a)),
       "/*| docname \"color\", \"graph:attribute\", do { \
                dsyntax <<line_color name, a>>;\
                dsyntax <<line_color r, g, b, a>>;\
                dsyntax <<line_color_hsl h, s, l, a>>;\
                dsyntax <<line_color_hsv h, s, v, a>>;\
                dsyntax <<line_color_cmyk c, m, y, k, a>>;\
                synopsis \"Set the line color\" ; \
                description <<Set the color for lines.>> ;\
                parameters;\
                parameter \"text\", \"name\", <<The name of the color, which can be one of the SVG color keywork names, or in one of these formats: #RGB or #RRGGBB  (each of R, G, and B being a single hex digit).>>;\
                parameter \"real\", \"r\", <<The red component of an color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"g\", <<The blue component of an RGB color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"b\", <<The green component of an RGB color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"h\", <<The hue of an HSL or HSV color if the color is chromatic (not gray), or meaningless if it is gray. It represents degrees on the color wheel familiar to most people. Red is 0, green is 120, and blue is 240.>>;\
                parameter \"real\", \"s\", <<The saturation of an HSL or HSV color, is in the range 0.0 to 1.0, and the bigger it is, the stronger the color is. Grayish colors have saturation near 0; very strong colors have saturation near 1.>>;\
                parameter \"real\", \"l\", <<The lightness an HSL color, is in the range 0.0 to 1.0. 0 is black; 1 is as far from black as possible. In the HSL model, lightness is defined as the average of the largest and smallest color components.>>;\
                parameter \"real\", \"v\", <<The value or brightness of an HSV color, is in the range 0.0 to 1.0. 0 is black; 1 is as far from black as possible. In the HSV model, value is defined as the largest component of a color.>>;\
                parameter \"real\", \"c\", <<The cyan component of the a color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"m\", <<The magenta component of a CMYK color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"y\", <<The Yellow component of a CMYK color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"k\", <<The black component of a CMYK color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"a\", <<The alpha channel, transparency of the color, is in the range 0.0 to 1.0. >>;\
                }\
          |*/")
PREFIX(LineColorRGB, tree, "line_color",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(lineColorRgb(self, r, g, b, a)),
       "")
PREFIX(LineColorHSL, tree, "line_color_hsl",
       PARM(h, real) PARM(s, real) PARM(l, real) PARM(a, real),
       RTAO(lineColorHsl(self, h, s, l, a)),
       "")
PREFIX(LineColorHSV, tree, "line_color_hsv",
       PARM(h, real) PARM(s, real) PARM(v, real) PARM(a, real),
       RTAO(lineColorHsv(self, h, s, v, a)),
       "")
PREFIX(LineColorCMYK, tree, "line_color_cmyk",
       PARM(c, real) PARM(m, real) PARM(y, real) PARM(k, real) PARM(a, real),
       RTAO(lineColorCmyk(self, c, m, y, k, a)),
       "")
PREFIX(LineWidth, tree, "line_width", PARM(lw, real), RTAO(lineWidth(self, lw)),
       "/*| docname \"line_width\", \"graph:attribute\", do { \
                dsyntax <<line_width lw>>;\
                synopsis \"Select the line width for OpenGL\" ; \
                description <<Set the line width for OpenGL>> ;\
                parameters;\
                parameter \"real\", \"lw\", <<The line width to set.>>;\
                }\
          |*/")
PREFIX(LineStipple, tree, "line_stipple",
       PARM(p, integer) PARM(s, integer),
       RTAO(lineStipple(self, p, s)),
       "/*| docname \"line_stipple\", \"graph:attribute\", do { \
                dsyntax <<line_stipple p, s>>;\
                synopsis \"line stipple pattern\" ; \
                description <<Select the line stipple pattern for OpenGL>> ;\
                parameters;\
                parameter \"integer\", \"p\", <<pattern [TODO: which value to which pattern ?]>>;\
                parameter \"integer\", \"s\", <<scale>>;\
                }\
          |*/")
PREFIX(FillColorName, tree, "color",
       PARM(n, text) PARM(a, real),
       RTAO(fillColorName(self, n, a)),
       "/*| docname \"color\", \"graph:attribute\", do { \
                dsyntax <<color name, a>>;\
                dsyntax <<color r, g, b, a>>;\
                dsyntax <<color_hsl h, s, l, a>>;\
                dsyntax <<color_hsv h, s, v, a>>;\
                dsyntax <<color_cmyk c, m, y, k, a>>;\
                synopsis \"Set the fill color\" ; \
                description <<Set the color for fill.>> ;\
                parameters;\
                parameter \"text\", \"name\", <<The name of the color, which can be one of the SVG color keywork names, or in one of these formats: #RGB or #RRGGBB  (each of R, G, and B being a single hex digit).>>;\
                parameter \"real\", \"r\", <<The red component of an color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"g\", <<The blue component of an RGB color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"b\", <<The green component of an RGB color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"h\", <<The hue of an HSL or HSV color if the color is chromatic (not gray), or meaningless if it is gray. It represents degrees on the color wheel familiar to most people. Red is 0, green is 120, and blue is 240.>>;\
                parameter \"real\", \"s\", <<The saturation of an HSL or HSV color, is in the range 0.0 to 1.0, and the bigger it is, the stronger the color is. Grayish colors have saturation near 0; very strong colors have saturation near 1.>>;\
                parameter \"real\", \"l\", <<The lightness an HSL color, is in the range 0.0 to 1.0. 0 is black; 1 is as far from black as possible. In the HSL model, lightness is defined as the average of the largest and smallest color components.>>;\
                parameter \"real\", \"v\", <<The value or brightness of an HSV color, is in the range 0.0 to 1.0. 0 is black; 1 is as far from black as possible. In the HSV model, value is defined as the largest component of a color.>>;\
                parameter \"real\", \"c\", <<The cyan component of the a color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"m\", <<The magenta component of a CMYK color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"y\", <<The Yellow component of a CMYK color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"k\", <<The black component of a CMYK color, is in the range 0.0 to 1.0.>>;\
                parameter \"real\", \"a\", <<The alpha channel, transparency of the color, is in the range 0.0 to 1.0. >>;\
                }\
          |*/")
PREFIX(FillColorRGB, tree, "color",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(fillColorRgb(self, r, g, b, a)),
       "")
PREFIX(FillColorHSL, tree, "color_hsl",
       PARM(h, real) PARM(s, real) PARM(l, real) PARM(a, real),
       RTAO(fillColorHsl(self, h, s, l, a)),
       "")
PREFIX(FillColorHSV, tree, "color_hsv",
       PARM(h, real) PARM(s, real) PARM(v, real) PARM(a, real),
       RTAO(fillColorHsv(self, h, s, v, a)),
       "")
PREFIX(FillColorCMYK, tree, "color_cmyk",
       PARM(c, real) PARM(m, real) PARM(y, real) PARM(k, real) PARM(a, real),
       RTAO(fillColorCmyk(self, c, m, y, k, a)),
       "")
PREFIX(FillTexture, tree, "texture", PARM(n, text),
       RTAO(fillTexture(self, n)),
       "/*| docname \"texture\", \"graph:attribute\", do { \
                dsyntax <<texture img>>;\
                synopsis \"Create a GL texture\" ; \
                description <<Build a GL texture out of an image file. Supported format are:\n\
BMP	Windows Bitmap\n\
GIF	Graphic Interchange Format (optional)\n\
JPG	Joint Photographic Experts Group\n\
JPEG	Joint Photographic Experts Group\n\
PNG	Portable Network Graphics\n\
PBM	Portable Bitmap\n\
PGM	Portable Graymap\n\
PPM	Portable Pixmap\n\
TIFF	Tagged Image File Format\n\
XBM	X11 Bitmap\n\
XPM	X11 Pixmap>> ;\
                parameters;\
                parameter \"text\", \"img\", <<The image filename.>>;\
                }\
          |*/")
PREFIX(FillTextureSVG, tree,"svg", PARM(img, text),
       RTAO(fillTextureFromSVG(self, img)),
       "/*| docname \"svg\", \"graph\", do { \
                dsyntax <<svg img>>;\
                synopsis \"Create a texture from an SVG\" ; \
                description <<Draw an image from an SVG format>> ;\
                parameters;\
                parameter \"text\", \"img\", <<The image filename.>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FillAnimatedTexture, tree, "animated_texture", PARM(n, text),
       RTAO(fillAnimatedTexture(self, n)),
       "/*| docname \"animated_texture\", \"graph:attribute\", do { \
                dsyntax <<animated_texture img>>;\
                synopsis \"Create a GL animated texture\" ; \
                description <<Build a GL texture images from an animated image file. Supported format are:\n\
GIF	Animated Graphic Interchange Format\n\
MNG	Animated portable Network Graphics\n\
                parameters;\
                parameter \"text\", \"mov\", <<The animation filename.>>;\
                }\
          |*/")
PREFIX(ImageA, tree,"image",
       PARM(x, real) PARM(y, real) PARM(w, real) PARM(h, real) PARM(img, text),
       RTAO(image(self, x, y, w, h, img)), "")
PREFIX(ImageB, tree,"image",
       PARM(x, real) PARM(y, real) PARM(img, text),
       RTAO(image(self, x, y, img)),
       "/*| docname \"image\", \"graph\", do { \
                synopsis \"Make an image\" ; \
                dsyntax <<image x, y, w, h, img >>;\
                dsyntax <<image x, y, img >>;\
                description <<Make an image. image x,y,img rewrites the source with image x,y,w,h,img where w and h are the original size of the image.>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate of the image>>;\
                parameter \"real\", \"y\", <<y-coordinate of the image>>;\
                parameter \"real\", \"w\", <<width of the image>>;\
                parameter \"real\", \"h\", <<height of the image>>;\
                parameter \"text\", \"img\", <<image file name>>;\
                }\
          |*/")
PREFIX(TextureWrap, tree, "texture_wrap", PARM(s, boolean) PARM(t, boolean),
       RTAO(textureWrap(self, s, t)),
       "/*| docname \"texture_wrap\", \"graph\", do { \
                dsyntax <<texture_wrap s, t>>;\
                synopsis \"wrap textures or clamp them\" ; \
                description <<Record if we want to wrap textures or clamp them>> ;\
                parameters;\
                parameter \"boolean\", \"s\", <<[TODO]>>;\
                parameter \"boolean\", \"t\", <<[TODO]>>;\
                }\
          |*/")
PREFIX(TextureTransform, tree, "texture_transform", PARM(t, code),
       RTAO(textureTransform(context, self, t)), 
       "/*| docname \"texture_transform\", \"graph\", do { \
                dsyntax <<texture_transform t>>;\
                synopsis \"Apply a texture transformation\" ; \
                description <<Apply a texture transformation.[TODO: de quel genre ?]>> ;\
                parameters;\
                parameter \"tree\", \"t\", <<[TODO]>>;\
                return_value \"tree\", <<The result of the child evaluation.>>;\
                }\
          |*/")



// ============================================================================
//
//   Generating a path
//
// ============================================================================

PREFIX(Path,   tree, "path", PARM(t, code), RTAO(newPath(context, self, t)), 
       "/*| docname \"path\", \"graph:path\", do { \
                dsyntax <<path t>>;\
                synopsis \"Start a path\" ; \
                description <<Evaluate the child tree within a polygon>> ;\
                parameters;\
                parameter \"tree\", \"t\", <<The definition of the path.>>;\
                return_value \"tree\", <<The result of the child evaluation.>>;\
                }\
          |*/")
PREFIX(MoveTo, tree, "move_to", PARM(x, real) PARM(y, real) PARM(z, real),
       RTAO(moveTo(self, x, y, z)),
       "/*| docname \"move_to\", \"graph:path\", do { \
                dsyntax <<move_to x, y, z>>;\
                synopsis \"move to point\" ; \
                description <<Add a 'moveTo' to the current path>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate of the point to move to.>>;\
                parameter \"real\", \"y\", <<y-coordinate of the point to move to.>>;\
                parameter \"real\", \"z\", <<z-coordinate of the point to move to.>>;\
                }\
          |*/")
PREFIX(LineTo, tree, "line_to", PARM(x, real) PARM(y, real) PARM(z, real),
       RTAO(lineTo(self, x, y, z)),
       "/*| docname \"line_to\", \"graph:path\", do { \
                dsyntax <<line_to x, y, z>>;\
                synopsis \"line to point\" ; \
                description <<Add a 'lineTo' to the current path>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate of the point to line to.>>;\
                parameter \"real\", \"y\", <<y-coordinate of the point to line to.>>;\
                parameter \"real\", \"z\", <<z-coordinate of the point to line to.>>;\
                }\
          |*/")
PREFIX(QuadTo, tree, "quad_to",
       PARM(cx, real) PARM(cy, real) PARM(cz, real)
       PARM(x, real) PARM(y, real) PARM(z, real),
       RTAO(curveTo(self, cx, cy, cz, x, y, z)),
       "/*| docname \"quad_to\", \"graph:path\", do { \
                dsyntax <<quad_to cx, cy, cz, x, y, z>>;\
                synopsis \" quadric curveTo\" ; \
                description <<Add a quadric curveTo to the current path.>> ;\
                parameters;\
                parameter \"real\", \"cx\", <<x-coordinate of the control point.>>;\
                parameter \"real\", \"cy\", <<y-coordinate of the control point.>>;\
                parameter \"real\", \"cz\", <<z-coordinate of the control point.>>;\
                parameter \"real\", \"x\", <<x-coordinate of the point to finish to.>>;\
                parameter \"real\", \"y\", <<y-coordinate of the point to finish to.>>;\
                parameter \"real\", \"z\", <<z-coordinate of the point to finish to.>>;\
                }\
          |*/")
PREFIX(CubicTo, tree, "cubic_to",
       PARM(c1x, real) PARM(c1y, real) PARM(c1z, real)
       PARM(c2x, real) PARM(c2y, real) PARM(c2z, real)
       PARM(x, real) PARM(y, real) PARM(z, real),
       RTAO(curveTo(self, c1x, c1y, c1z, c2x, c2y, c2z, x, y, z)),
       "/*| docname \"cubic_to\", \"graph:path\", do { \
                dsyntax <<cubic_to c1x, c1y, c1z, c2x, c2y, c2z, x, y, z>>;\
                synopsis \"cubic curveTo\" ; \
                description <<Add a cubic curveTo to the current path>> ;\
                parameters;\
                parameter \"real\", \"cx1\", <<x-coordinate of the first control point.>>;\
                parameter \"real\", \"cy1\", <<y-coordinate of the first control point.>>;\
                parameter \"real\", \"cz1\", <<z-coordinate of the first control point.>>;\
                parameter \"real\", \"cx2\", <<x-coordinate of the second control point.>>;\
                parameter \"real\", \"cy2\", <<y-coordinate of the second control point.>>;\
                parameter \"real\", \"cz2\", <<z-coordinate of the second control point.>>;\
                parameter \"real\", \"x\", <<x-coordinate of the point to finish to.>>;\
                parameter \"real\", \"y\", <<y-coordinate of the point to finish to.>>;\
                parameter \"real\", \"z\", <<z-coordinate of the point to finish to.>>;\
                }\
          |*/")
PREFIX(MoveRel, tree, "move_relative", PARM(x,real) PARM(y,real) PARM(z,real),
       RTAO(moveToRel(self, x, y, z)),
       "/*| docname \"move_relative\", \"graph:path\", do { \
                dsyntax <<move_relative dx, dy, dz>>;\
                synopsis \"relative moveTo\" ; \
                description <<Add a relative moveTo>> ;\
                parameters;\
                parameter \"real\", \"dx\", <<delta to move to on x-axis.>>;\
                parameter \"real\", \"dy\", <<delta to move to on y-axis.>>;\
                parameter \"real\", \"dz\", <<delta to move to on z-axis.>>;\
                }\
          |*/")
PREFIX(LineRel, tree, "line_relative", PARM(x,real) PARM(y,real) PARM(z,real),
       RTAO(lineToRel(self, x, y, z)),
       "/*| docname \"line_relative\", \"graph:path\", do { \
                dsyntax <<line_relative dx, dy, dz>>;\
                synopsis \"relative line to\" ; \
                description <<Add a relative 'lineTo' to the current path>> ;\
                parameters;\
                parameter \"real\", \"dx\", <<delta to line to on x-axis.>>;\
                parameter \"real\", \"dy\", <<delta to line to on y-axis.>>;\
                parameter \"real\", \"dz\", <<delta to line to on z-axis.>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(PathTexCoord, tree, "path_texture", PARM(x,real)PARM(y,real)PARM(z,real),
       RTAO(pathTextureCoord(self, x, y, z)),
       "/*| docname \"path_texture\", \"graph:path\", do { \
                dsyntax <<path_texture x, y, z>>;\
                synopsis \"Not supported yet\" ; \
                description << NOT SUPPORTED YET. Add a texture coordinate to the path. NOT SUPPORTED YET>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"z\", <<z-coordinate>>;\
                }\
          |*/")
PREFIX(PathColor, tree, "path_color",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(pathColor(self, r,g,b, a)),
       "/*| docname \"path_color\", \"graph:path\", do { \
                dsyntax <<path_color>>;\
                synopsis \"Not supported yet\" ; \
                description <<NOT SUPPORTED YET. Add a color element to the path. NOT SUPPORTED YET. >> ;\
                parameters;\
                parameter \"real\", \"r\", <<The red componant of the color>>;\
                parameter \"real\", \"g\", <<The blue componant of the color>>;\
                parameter \"real\", \"b\", <<The green componant of the color>>;\
                parameter \"real\", \"a\", <<Alpha channel: the transparency of the color. >>;\
                }\
          |*/")
PREFIX(ClosePath, tree, "close_path",, RTAO(closePath(self)),
       "/*| docname \"close_path\", \"graph:path\", do { \
                dsyntax <<close_path>>;\
                synopsis \"close the path\" ; \
                description <<Close the path back to its origin>> ;\
                }\
          |*/")
PREFIX(EndpointsStyle, tree, "endpoints_style",
       PARM(s, symbol) PARM(e, symbol),
       RTAO(endpointsStyle(self, s, e)),
       "/*| docname \"endpoints_style\", \"graph:path\", do { \
                dsyntax <<endpoints_style s, e>>;\
                synopsis \"style of the path endpoints\" ; \
                description <<Specify the style of the path endpoints. Supported values are : ARROWHEAD, ARROWHEAD, POINTER, DIAMOND, CIRCLE, SQUARE, BAR, CUP, FLETCHING, HOLLOW_CIRCLE, HOLLOW_SQUARE.>> ;\
                parameters;\
                parameter \"symbol\", \"s\", <<start endpoint style>>;\
                parameter \"symbol\", \"e\", <<end endpoint style>>;\
                return_value \"\", <<>>;\
                }\
          |*/")



// ============================================================================
//
//   2D primitives (either standalone, or added to the current path)
//
// ============================================================================

PREFIX(Point, tree, "point",
       PARM(x,real) PARM(y,real) PARM(z,real) PARM(s,real),
       RTAO(fixedSizePoint(self, x, y, z, s)),
       "/*| docname \"point\", \"graph:path\", do { \
                dsyntax <<point x, y, z, s>>;\
                synopsis \"Draw a point\" ; \
                description <<Draw a point with the given size>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"z\", <<z-coordinate>>;\
                parameter \"real\", \"s\", <<THe size of the point>>;\
                }\
          |*/")
PREFIX(Rectangle, tree, "rectangle",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real),
       RTAO(rectangle(self, x, y, w, h)),
       "/*| docname \"rectangle\", \"graph:path:shape\", do { \
                dsyntax <<rectangle x, y, w, h>>;\
                synopsis \"Draw a rectangle\" ; \
                description <<Draw a rectangle>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the rectangle>>;\
                parameter \"real\", \"h\", <<height of the rectangle>>;\
                }\
          |*/")
PREFIX(Triangle, tree, "triangle",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real),
       RTAO(isoscelesTriangle(self, x, y, w, h)),
       "/*| docname \"triangle\", \"graph:path:shape\", do { \
                dsyntax <<triangle x, y, b, h>>;\
                synopsis \"Isocele triangle\" ; \
                description <<Draw an isocele triangle>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"b\", <<base of the triangle>>;\
                parameter \"real\", \"h\", <<height of the triangle>>;\
                }\
          |*/")
PREFIX(RightTriangle, tree, "right_triangle",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real),
       RTAO(rightTriangle(self, x, y, w, h)),
       "/*| docname \"right_triangle\", \"graph:path:shape\", do { \
                dsyntax <<right_triangle x, y, b, h>>;\
                synopsis \"Right triangle\" ; \
                description <<Draw a right triangle>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"b\", <<base of the triangle>>;\
                parameter \"real\", \"h\", <<height of the triangle>>;\
                }\
          |*/")
PREFIX(Ellipse, tree, "ellipse",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real),
       RTAO(ellipse(self, x, y, w, h)),
       "/*| docname \"ellipse\", \"graph:path:shape\", do { \
                dsyntax <<ellipse cx, cy, w, h>>;\
                synopsis \"Ellipse\" ; \
                description <<Draw an ellipse centered around (cx,cy), size w * h>> ;\
                parameters;\
                parameter \"real\", \"cx\", <<x-coordinate>>;\
                parameter \"real\", \"cy\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the ellipse>>;\
                parameter \"real\", \"h\", <<height of the ellipse>>;\
                }\
          |*/")
PREFIX(EllipseArc, tree, "ellipse_arc",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(start, real) PARM(sweep, real),
       RTAO(ellipseArc(self, x, y, w, h, start, sweep)),
       "/*| docname \"ellipse_arc\", \"graph:path:shape\", do { \
                dsyntax <<ellipse_arc x, y, w, h, start, sweep>>;\
                synopsis \"Elliptic sector\" ; \
                description <<Elliptic sector centered around (cx,cy) that occupies the given rectangle, beginning at the specified startAngle and extending sweepLength degrees counter-clockwise. Angles are specified in degrees. Clockwise arcs can be specified using negative angles.>> ;\
                parameters;\
                parameter \"real\", \"cx\", <<x-coordinate>>;\
                parameter \"real\", \"cy\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the ellipse>>;\
                parameter \"real\", \"h\", <<height of the ellipse>>;\
                parameter \"real\", \"start\", <<start angle>>;\
                parameter \"real\", \"sweep\", <<sweep angle>>;\
                }\
          |*/")
PREFIX(RoundedRectangle, tree, "rounded_rectangle",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(r, real),
       RTAO(roundedRectangle(self, x, y, w, h, r)),
       "/*| docname \"rounded_rectangle\", \"graph:path:shape\", do { \
                dsyntax <<rounded_rectangle x, y, w, h, r>>;\
                synopsis \"Rounded rectangle\" ; \
                description <<Rounded rectangle with radius r for the rounded corners>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the rectangle>>;\
                parameter \"real\", \"h\", <<height of the rectangle>>;\
                parameter \"real\", \"r\", <<corner radius>>;\
                }\
          |*/")
PREFIX(EllipticalRectangle, tree, "elliptical_rectangle",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(r, real),
       RTAO(ellipticalRectangle(self, x, y, w, h, r)),
       "/*| docname \"elliptical_rectangle\", \"graph:path:shape\", do { \
                dsyntax <<elliptical_rectangle>>;\
                synopsis \"Elliptical rectangle\" ; \
                description <<Elliptical rectangle with ratio r for the elliptic sides>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the rectangle>>;\
                parameter \"real\", \"h\", <<height of the rectangle>>;\
                parameter \"real\", \"r\", <<ration of the ellpitic sides>>;\
                }\
          |*/")
PREFIX(Arrow, tree, "arrow",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(ax, real) PARM(ay, real),
       RTAO(arrow(self, x, y, w, h, ax, ay)),
       "/*| docname \"arrow\", \"graph:path:shape\", do { \
                dsyntax <<arrow x, y, w, h, ax, ay>>;\
                synopsis \"Draw an arraw\" ; \
                description <<Draw an arraw>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of  [TODO: what ?]>>;\
                parameter \"real\", \"h\", <<height of [TODO: what ?]>>;\
                parameter \"real\", \"ax\", <<[TODO]>>;\
                parameter \"real\", \"ay\", <<[TODO]>>;\
                }\
          |*/")
PREFIX(DoubleArrow, tree, "double_arrow",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(ax, real) PARM(ay, real),
       RTAO(doubleArrow(self, x, y, w, h, ax, ay)),
       "/*| docname \"double_arrow\", \"graph:path:shape\", do { \
                dsyntax <<double_arrow x, y, w, h, ax, ay>>;\
                synopsis \"Double arraw\" ; \
                description <<Draw a symetric double arraw>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of  [TODO: what ?]>>;\
                parameter \"real\", \"h\", <<height of [TODO: what ?]>>;\
                parameter \"real\", \"ax\", <<[TODO]>>;\
                parameter \"real\", \"ay\", <<[TODO]>>;\
                }\
          |*/")
PREFIX(StarPolygon, tree, "star_polygon",
       PARM(x, real) PARM(y, real) PARM(w, real) PARM(h, real)
       PARM(p, integer) PARM(q, integer),
       RTAO(starPolygon(self, x, y, w, h, p, q)),
       "/*| docname \"star_polygon\", \"graph:path:shape\", do { \
                dsyntax <<star_polygon cx, cy, w, h, p, q>>;\
                synopsis \"Draw a star\" ; \
                description <<GL regular p-side star polygon {p/q} centered around (cx,cy)>> ;\
                parameters;\
                parameter \"real\", \"cx\", <<center x-coordinate>>;\
                parameter \"real\", \"cy\", <<center y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the star>>;\
                parameter \"real\", \"h\", <<height of the star>>;\
                parameter \"real\", \"p\", <<Number of branch[TODO: is OK?]>>;\
                parameter \"real\", \"q\", <<[TODO]>>;\
                }\
          |*/")
PREFIX(Star, tree, "star",
       PARM(x, real) PARM(y, real) PARM(w, real) PARM(h, real)
       PARM(p, integer) PARM(r, real),
       RTAO(star(self, x, y, w, h, p, r)),
       "/*| docname \"star\", \"graph:path:shape\", do { \
                dsyntax <<star x, y, w, h, p, r>>;\
                synopsis \"Draw a star\" ; \
                description <<GL regular p-side star centered around (cx,cy), inner radius ratio r>> ;\
                parameters;\
                parameter \"real\", \"cx\", <<center x-coordinate>>;\
                parameter \"real\", \"cy\", <<center y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the star>>;\
                parameter \"real\", \"h\", <<height of the star>>;\
                parameter \"real\", \"p\", <<Number of branch[TODO: is OK?]>>;\
                parameter \"real\", \"r\", <<inner radius ratio>>;\
                }\
          |*/")
PREFIX(SpeechBalloon, tree, "speech_balloon",
       PARM(x, real) PARM(y, real) PARM(w, real) PARM(h, real)
       PARM(r, real) PARM(ax, real) PARM(ay, real),
       RTAO(speechBalloon(self, x, y, w, h, r, ax, ay)),
       "/*| docname \"speech_balloon\", \"graph:path:shape\", do { \
                dsyntax <<speech_balloon x, y, w, h, r, ax, ay>>;\
                synopsis \"Speech balloon\" ; \
                description <<Speech balloon with radius r for rounded corners, and point a for the tail>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the balloon>>;\
                parameter \"real\", \"h\", <<height of the balloon>>;\
                parameter \"real\", \"r\", <<radius>>;\
                parameter \"real\", \"ax\", <<[TODO]>>;\
                parameter \"real\", \"ay\", <<[TODO]>>;\
                }\
          |*/")
PREFIX(Callout, tree, "callout",
       PARM(x, real) PARM(y, real) PARM(w, real) PARM(h, real)
       PARM(r, real) PARM(ax, real) PARM(ay, real) PARM(d, real),
       RTAO(callout(self, x, y, w, h, r, ax, ay, d)),
       "/*| docname \"callout\", \"graph:path:shape\", do { \
                dsyntax <<callout>>;\
                synopsis \"callout\" ; \
                description <<Callout with radius r for corners, and point a, width b [TODO: is d or b] for the tail>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width of the callout>>;\
                parameter \"real\", \"h\", <<height of the callout>>;\
                parameter \"real\", \"r\", <<radius>>;\
                parameter \"real\", \"ax\", <<x-coordinate of point a>>;\
                parameter \"real\", \"ay\", <<y-coordinate of point a>>;\
                parameter \"real\", \"d\", <<[TODO]>>;\
                }\
          |*/")

PREFIX(PicturePacker, tree, "picture_packer",
       PARM(tw, integer) PARM(th, integer)
       PARM(iw, integer) PARM(ih, integer)
       PARM(pw, integer) PARM(ph, integer)
       PARM(t, tree),
       RTAO(picturePacker(self, tw, th, iw, ih, pw, ph, t)),
       "/*| docname \"binpacker\", \"graph:debug\", do { \
                dsyntax <<binpacker w, h, t>>;\
                synopsis \"Debug the bin packer\" ; \
                description <<Debug the bin packer>> ;\
                parameters;\
                parameter \"integer\", \"w\", <<width>>;\
                parameter \"integer\", \"h\", <<height>>;\
                parameter \"real\", \"t\", <<[TODO]>>;\
                }\
          |*/")



// ============================================================================
//
//   3D primitives
//
// ============================================================================

PREFIX(Sphere, tree, "sphere",
       PARM(x, real) PARM(y, real) PARM(z, real)
       PARM(w, real) PARM(h, real) PARM(d, real)
       PARM(slices, integer) PARM(stacks, integer),
       RTAO(sphere(self, x, y, z, w, h, d, slices, stacks)),
       "/*| docname \"sphere\", \"graph\", do { \
                dsyntax <<sphere x, y, z, w, h, d, slices, stacks>>;\
                synopsis \"sphere like\" ; \
                description <<GL sphere [TODO or ovoid ? Add the incidence of slices and stacks on the sphere rendering time.]>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"z\", <<z-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"real\", \"d\", <<depth>>;\
                parameter \"integer\", \"slices\", <<number of slices>>;\
                parameter \"integer\", \"stacks\", <<[TODO]>>;\
               return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(Cube, tree, "cube",
       PARM(x, real) PARM(y, real) PARM(z, real)
       PARM(w, real) PARM(h, real) PARM(d, real),
       RTAO(cube(self, x, y, z, w, h, d)),
       "/*| docname \"cube\", \"graph\", do { \
                dsyntax <<cube x, y, z, w, h, d>>;\
                synopsis \"cube like\" ; \
                description <<parallelepiped rectangle>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"z\", <<z-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"real\", \"d\", <<depth>>;\
                }\
          |*/")
PREFIX(Cone, tree, "cone",
       PARM(x, real) PARM(y, real) PARM(z, real)
       PARM(w, real) PARM(h, real) PARM(d, real),
       RTAO(cone(self, x, y, z, w, h, d, 0.0)),
       "/*| docname \"cone\", \"graph\", do { \
                dsyntax <<cone x, y, z, w, h, d>>;\
                synopsis \"cone\" ; \
                description <<cone[TODO]>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"z\", <<z-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"real\", \"d\", <<depth>>;\
                }\
          |*/")
PREFIX(Cylinder, tree, "cylinder",
       PARM(x, real) PARM(y, real) PARM(z, real)
       PARM(w, real) PARM(h, real) PARM(d, real),
       RTAO(cone(self, x, y, z, w, h, d, 1.0)),
       "/*| docname \"cone\", \"graph\", do { \
                dsyntax <<cone x, y, z, w, h, d>>;\
                synopsis \"cone\" ; \
                description <<cone[TODO]>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"z\", <<z-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"real\", \"d\", <<depth>>;\
                }\
          |*/")
PREFIX(TruncatedCone, tree, "truncated_cone",
       PARM(x, real) PARM(y, real) PARM(z, real)
       PARM(w, real) PARM(h, real) PARM(d, real)
       PARM(r, real),
       RTAO(cone(self, x, y, z, w, h, d, r)),
       "/*| docname \"truncated_cone\", \"graph\", do { \
                dsyntax <<cone x, y, z, w, h, d>>;\
                synopsis \"cone\" ; \
                description <<cone[TODO]>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"z\", <<z-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"real\", \"d\", <<depth>>;\
                }\
          |*/")
PREFIX(Object3D, tree, "object",
       PARM(x, real) PARM(y, real) PARM(z, real)
       PARM(w, real) PARM(h, real) PARM(d, real)
       PARM(f, text),
       RTAO(object(self, x, y, z, w, h, d, f)),
       "/*| docname \"object\", \"graph\", do { \
                dsyntax <<object x, y, z, w, h, d, f>>;\
                synopsis \"Load a 3D object\" ; \
                description <<Load a 3D object [TODO: which format of file can be loaded ?>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"z\", <<z-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"real\", \"d\", <<depth>>;\
                parameter \"text\", \"f\", <<filename>>;\
                }\
          |*/")



// ============================================================================
//
//   Text and font
//
// ============================================================================

PREFIX(TextBox, tree, "text_box",
       PARM(x, real) PARM(y, real) PARM(w, real) PARM(h, real) PARM(t, code),
       RTAO(textBox(context, self, x, y, w, h, t)), 
       "/*| docname \"text_box\", \"text:graph\", do { \
                dsyntax <<text_box x, y, w, h, t>>;\
                synopsis \"Create a new page layout\" ; \
                description <<Create a new page layout and render text in it.>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"tree\", \"t\", <<text description>>;\
                return_value \"tree\", <<t evaluation result>>;\
                }\
          |*/")
PREFIX(TextOverflow, tree, "text_overflow",
       PARM(x, real) PARM(y, real) PARM(w, real) PARM(h, real),
       RTAO(textOverflow(self, x, y, w, h)),
       "/*| docname \"text_overflow\", \"text:graph\", do { \
                dsyntax <<text_overflow x, y, w, h>>;\
                synopsis \"Overflow text box\" ; \
                description <<Overflow text box for the rest of the current text flow>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                }\
          |*/")
PREFIX(TextFlow, tree, "text_flow", PARM(n, text), RTAO(textFlow(self, n)),
       "/*| docname \"text_flow\", \"text\", do { \
                dsyntax <<text_flow name>>;\
                synopsis \"Names the flow\" ; \
                description <<Set the name of the current text flow>> ;\
                parameters;\
                parameter \"text\", \"name\", <<The name of the current flow>>;\
                return_value \"text\", <<The previous name. [TODO: The name of the previous flow or the previous name of the current flow ?]>>;\
                }\
          |*/")

PREFIX(TextSpan, tree,"text", PARM(t, text), RTAO(textSpan(self, t)),
       "/*| docname \"text\", \"text\", do { \
                dsyntax <<text t>>;\
                synopsis \"Insert a block of text\" ; \
                description <<Insert a block of text with the current definition of font, color, ...>> ;\
                parameters;\
                parameter \"text\", \"t\", <<The text to insert>>;\
                }\
          |*/")
PREFIX(TextFormula, tree,"formula", PARM(t, code), RTAO(textFormula(self, t)), 
       "/*| docname \"formula\", \"text\", do { \
                dsyntax <<formula t>>;\
                synopsis \"Insert a block of text corresponding to the given formula\" ; \
                description <<Insert a block of text corresponding to the given formula>> ;\
                parameters;\
                parameter \"tree\", \"t\", <<The formula>>;\
                return_value \"tree\", <<The tree t given in parameter.>>;\
                }\
          |*/")
PREFIX(TextValue, tree,"text_value", PARM(t, tree),
       RTAO(textValue(context, self, t)),
       "/*| docname \"text_value\", \"text\", do { \
                dsyntax <<text)vakye t>>;\
                synopsis \"Insert a block of text corresponding to the given vaue\" ; \
                description <<Insert a block of text corresponding to the given formula>> ;\
                parameters;\
                parameter \"tree\", \"t\", <<The formula>>;\
                return_value \"tree\", <<The tree t given in parameter.>>;\
                }\
          |*/")
PREFIX(Font, tree, "font", PARM(f, tree), RTAO(font(context, self, f)), 
       "/*| docname \"font\", \"text:font\", do { \
                dsyntax <<font f>>;\
                synopsis \"Select a font family\" ; \
                description <<Select a font family>> ;\
                parameters;\
                parameter \"tree\", \"f\", <<The font description>>;\
                }\
          |*/")
PREFIX(FontSize, tree, "font_size", PARM(s, real), RTAO(fontSize(self, s)),
       "/*| docname \"font_size\", \"text:font\", do { \
                dsyntax <<font_size s>>;\
                synopsis \"Select a font size\" ; \
                description <<Select a font size>> ;\
                parameters;\
                parameter \"real\", \"s\", <<The font size.>>;\
                }\
          |*/")
PREFIX(FontScaling, tree, "font_scaling", PARM(s,real) PARM(ms,real),
       RTAO(fontScaling(self,s,ms)),
       "/*| docname \"font_scaling\", \"text:font\", do { \
                dsyntax <<font_scaling>>;\
                synopsis \"Change the font scaling factor\" ; \
                description <<Change the font scaling factor>> ;\
                parameters;\
                parameter \"real\", \"s\", <<Scaling factor>>;\
                parameter \"real\", \"ms\", <<Minimum AA size>>;\
                return_value \"\", <<>>;\
                }\
          |*/")
PREFIX(FontPlain, tree, "plain",, RTAO(fontPlain(self)),
       "/*| docname \"plain\", \"text:font\", do { \
                dsyntax <<plain>>;\
                synopsis \"Set plain text\" ; \
                description <<Reset the font style, the font weight and the font stretch to normal; reset the font to no underline, nor strikeout, nor overline.>> ;\
                }\
          |*/")
PREFIX(FontSlant, tree, "slant", PARM(a, real), RTAO(fontItalic(self, a/100)),
       "/*| docname \"slant\", \"text:font\", do { \
                dsyntax <<slant a>>;\
                synopsis \"Set slant percentage.\" ; \
                description <<Set slant percentage.[TODO: J'aurais plutot vu une valeur de a/50 pour que slant 100 donne fontItalic 2, qui est le max] >> ;\
                parameters;\
                parameter \"real\", \"a\", <<slant percentage>>;\
                }\
          |*/")
PREFIX(FontRoman, tree, "roman",, RTAO(fontItalic(self, 0)),
       "/*| docname \"roman\", \"text:font\", do { \
                dsyntax <<roman>>;\
                synopsis \"No slant\" ; \
                description <<Set slant value to 0 (min value).>> ;\
                }\
          |*/")
PREFIX(FontItalic, tree, "italic",, RTAO(fontItalic(self, 1)),
       "/*| docname \"italic\", \"text:font\", do { \
                dsyntax <<italic>>;\
                synopsis \"set set italic\" ; \
                description <<Set slant value to 1 (medium value). Is equivalent to slant 100>> ;\
                see \"slant\"; \
                }\
          |*/")
PREFIX(FontOblique, tree, "oblique",, RTAO(fontItalic(self, 2)),
       "/*| docname \"oblique\", \"text:font\", do { \
                dsyntax <<oblique>>;\
                synopsis \"set to oblique\" ; \
                description <<Set slant value to 2 (higher value). Is equivalent to slant 200>> ;\
                see \"slant\"; \
                }\
          |*/")
PREFIX(FontWeight, tree, "weight", PARM(a, real), RTAO(fontBold(self, a)),
       "/*| docname \"weight\", \"text:font\", do { \
                dsyntax <<weight a>>;\
                synopsis \"set the bold value of the font\" ; \
                description <<Select whether the font is bold or not. Qt weight values range from 0 to 99 with 50 = regular>> ;\
                parameters;\
                parameter \"real\", \"a\", <<The bold value of the font>>;\
                 }\
          |*/")
PREFIX(FontRegular, tree, "regular",, RTAO(fontBold(self, 50)),
       "/*| docname \"regular\", \"text:font\", do { \
                dsyntax <<regular>>;\
                synopsis \"reset bold value to neutral.\" ; \
                description <<Reset bold value to neutral. Is equivalent to weight 50.>> ;  \
                see \"weight\"; \
                }\
          |*/")
PREFIX(FontLight, tree, "light",, RTAO(fontBold(self, 25)),
       "/*| docname \"light\", \"text:font\", do { \
                dsyntax <<light>>;\
                synopsis \"Make the font thin.\" ; \
                description <<Make the font thinner. Is equivalent to weight 25>> ;\
                see \"weight\"; \
                }\
          |*/")
PREFIX(FontBold, tree, "bold",, RTAO(fontBold(self, 75)),
       "/*| docname \"bold\", \"text:font\", do { \
                dsyntax <<bold>>;\
                synopsis \"Make the font bold.\" ; \
                description <<Make the font bold. Is equivalent to weight 75>> ;\
                see \"weight\"; \
                }\
          |*/")
PREFIX(FontUnderline, tree, "underline", PARM(a, real),
       RTAO(fontUnderline(self, a)),
       "/*| docname \"underline\", \"text:font\", do { \
                dsyntax <<underline a>>;\
                synopsis \"Underline attribute of the font\" ; \
                description <<Select whether we underline a font. Qt doesn't support setting the size of the underline, it's on or off.>> ;\
                parameters;\
                parameter \"real\", \"a\", <<Underline values: 0 is off, values > 0 are on.>>;\
                }\
          |*/")
PREFIX(FontOverline, tree, "overline", PARM(a, real),
       RTAO(fontOverline(self, a)),
       "/*| docname \"overline\", \"text:font\", do { \
                dsyntax <<overline a>>;\
                synopsis \"Overline attribute of the font\" ; \
                description <<Select whether we overline a font. Qt doesn't support setting the size of the underline, it's on or off.>> ;\
                parameters;\
                parameter \"real\", \"a\", <<Overline values: 0 is off, values > 0 are on.>>;\
                }\
          |*/")
PREFIX(FontStrikeout, tree, "strikeout", PARM(a, real),
       RTAO(fontStrikeout(self, a)),
       "/*| docname \"strikeout\", \"text:font\", do { \
                dsyntax <<strikeout>>;\
                synopsis \"Strikeout attribute of the font\" ; \
                description <<Select whether we strikeout a font. Qt doesn't support setting the size of the underline, it's on or off.>> ;\
                parameters;\
                parameter \"real\", \"a\", <<Strikeout values: 0 is off, values > 0 are on.>>;\
                }\
          |*/")
PREFIX(FontStretch, tree, "stretch", PARM(s,real),RTAO(fontStretch(self,s)),
       "/*| docname \"stretch\", \"text:font\", do { \
                dsyntax <<stretch s>>;\
                synopsis \"Set font stretching factor\" ; \
                description <<Set font stretching factor. Qt font stretch ranges from 0 to 4000, with 100 = 100%.>> ;\
                parameters;\
                parameter \"real\", \"s\", <<The font stretching factor. Value range is from 0 to 4000, with 100 = 100%>>;\
                }\
          |*/")
PREFIX(Align, tree, "align",
       PARM(center, real) PARM(justify, real) PARM(spread, real) PARM(full_justify, real),
       RTAO(align(self, center, justify, spread, full_justify, 0)),
       "/*| docname \"align\", \"text:spread\", do { \
                dsyntax <<align center, jsutify, spread, full_justify>>;\
                synopsis \"[TODO]\" ;\
                description <<[TODO]>> ;\
                parameters;\
                parameter \"real\", \"center\", <<Place the center along x-axis. An amount of 0% align the center of the text on the left of the box, an amount of 100% align the center of the text on the right of the box and an amount of 50% align the center of the text on the center of the box.>>;\
                parameter \"real\", \"justify\", <<Horizontaly justify the text. An amount of 0% doesn't justify (ragged edge), an amount of 100% justifies fully.>>;\
                parameter \"real\", \"spread\", <<[TODO: Quel est la difference entre spread et justify ? Est-ce l'ecart max autorise entre les lettres/mots ?]>>;\
                parameter \"real\", \"full_justify\", <<Horizontaly justify the text in lines that do not have enough characters, typically the last line of a paragraph.>>;\
                }\
          |*/")
PREFIX(VAlign, tree, "vertical_align",
       PARM(center, real) PARM(justify, real) PARM(spread, real) PARM(full_justify, real),
       RTAO(align(self, center, justify, spread, full_justify, 1)),
       "/*| docname \"vertical_align\", \"text:spread\", do { \
                dsyntax <<vertical_align center, jsutify, spread, full_justify>>;\
                synopsis \"[TODO]\" ;\
                description <<[TODO]>> ;\
                parameters;\
                parameter \"real\", \"center\", <<Place the center along y-axis. An amount of 0% aligns the center of the text on the top of the box, an amount of 100% aligns the center of the text on the bottom of the box and an amount of 50% centers the text in the box.>>;\
                parameter \"real\", \"justify\", <<Verticaly justify the text. An amount of 0% doesn't justify (pack lines), an amount of 100% fully justifies vertically.>>;\
                parameter \"real\", \"spread\", <<[TODO]>>;\
                parameter \"real\", \"full_justify\", <<Vertically justify the lines in text boxes or overflows that are not full.>>;\
                }\
          |*/")
PREFIX(Spacing, tree, "character_spacing",
       PARM(factor, real), RTAO(spacing(self, factor, 0)),
       "/*| docname \"character_spacing\", \"text:spread\", do { \
                dsyntax <<character_spacing factor>>;\
                synopsis \"[TODO]\" ; \
                description <<[TODO]>> ;\
                parameters;\
                parameter \"real\", \"factor\", <<[TODO]>>;\
                }\
          |*/")
PREFIX(VSpacing, tree, "line_spacing",
       PARM(factor, real), RTAO(spacing(self, factor, 1)),
       "/*| docname \"line_spacing\", \"text:spread\", do { \
                dsyntax <<line_spacing factor>>;\
                synopsis \"[TODO]\" ; \
                description <[TODO]<>> ;\
                parameters;\
                parameter \"real\", \"factor\", <<[TODO]>>;\
                 }\
          |*/")
PREFIX(MinimumParagraphSpace, tree, "paragraph_space",
       PARM(b, real) PARM(a, real), RTAO(minimumSpace(self, b, a, 1)),
       "/*| docname \"paragraph_space\", \"text:spread\", do { \
                dsyntax <<paragraph_space before, after>>;\
                synopsis \"Set the space around the paragraph\" ; \
                description <<Set the minimum space allowed around the paragraph. [TODO: Quelle valeur faut-il mettre si on ne veut modifier que la valeur avant (ou apres), est-ce -1, ou est-ce que des valeurs negatives sont autorisees et que dans ce cas des paragraphes peuvent se marcher dessus ?]>> ;\
                parameters;\
                parameter \"real\", \"before\", <<Space before the paragraph.>>;\
                parameter \"real\", \"after\", <<Space after the paragraph.>>;\
                }\
          |*/")
PREFIX(MinimumCharacterSpace, tree, "character_space",
       PARM(b, real) PARM(a, real), RTAO(minimumSpace(self, b, a, 0)),
       "/*| docname \"character_space\", \"text:spread\", do { \
                dsyntax <<character_space before, after>>;\
                synopsis \"[TODO: words or characters ?]\" ; \
                description <<[TODO: dans widget.cpp on parle d'espace entre mots et non entre charactere. Cette clarification rejoint celles demandees audessus sur le spacing/spread]>> ;\
                parameters;\
                parameter \"real\", \"before\", <<Space before the [TODO].>>;\
                parameter \"real\", \"after\", <<Space after the [TODO].>>;\
                }\
          |*/")
PREFIX(Margins, tree, "margins", PARM(l, real) PARM(r, real),
       RTAO(horizontalMargins(self, l, r)),
       "/*| docname \"margins\", \"text:spread\", do { \
                dsyntax <<margins l, r>>;\
                synopsis \"Set the horizontal margin for text\" ; \
                description <<Set the minimum space allowed around the page. [TODO: Quelle valeur faut-il mettre si on ne veut modifier que la valeur gauche (ou droite), est-ce -1, ou est-ce que des valeurs negatives sont autorisees et que dans ce cas on peut ecrire dans la marge ?]>> ;\
                parameters;\
                parameter \"real\", \"l\", <<left margin>>;\
                parameter \"real\", \"r\", <<right margin>>;\
                }\
          |*/")
PREFIX(VMargins, tree, "vertical_margins", PARM(t, real) PARM(b, real),
       RTAO(verticalMargins(self, t, b)),
       "/*| docname \"vertical_margins\", \"text:spread\", do { \
                dsyntax <<vertical_margins t, b>>;\
                synopsis \"Set the vertical margin for text\" ; \
                description <<Set the minimum space allowed around the page. [TODO: Quelle valeur faut-il mettre si on ne veut modifier que la valeur gauche (ou droite), est-ce -1, ou est-ce que des valeurs negatives sont autorisees et que dans ce cas on peut ecrire dans la marge ?]>> ;\
                parameters;\
                parameter \"real\", \"t\", <<top margin>>;\
                parameter \"real\", \"b\", <<bottom margin>>;\
                }\
          |*/")
PREFIX(LineBreak, tree, "line_break",,
       RTAO(drawingBreak(self, Tao::Drawing::LineBreak)),
       "/*| docname \"line_break\", \"text:spread\", do { \
                dsyntax <<line_break>>;\
                synopsis \"Insert a line break\" ; \
                description <<Insert a line break in the current text.>> ;\
               }\
          |*/")
PREFIX(SentenceBreak, tree, "sentence_break",,
       RTAO(drawingBreak(self, Tao::Drawing::SentenceBreak)),
       "/*| docname \"sentence_break\", \"text:spread\", do { \
                dsyntax <<sentence_break>>;\
                synopsis \"Insert a sentence break\" ; \
                description <<Insert a sentence break in the text.>> ;\
                }\
          |*/")
PREFIX(ParaBreak, tree, "paragraph_break",,
       RTAO(drawingBreak(self, Tao::Drawing::ParaBreak)),
       "/*| docname \"paragraph_break\", \"text:spread\", do { \
                dsyntax <<paragraph_break>>;\
                synopsis \"Insert a paragraph break\" ; \
                description <<Insert a paragraph break>> ;\
                }\
          |*/")
PREFIX(ColumnBreak, tree, "column_break",,
       RTAO(drawingBreak(self, Tao::Drawing::ColumnBreak)),
       "/*| docname \"column_break\", \"text:spread\", do { \
                dsyntax <<column_break>>;\
                synopsis \"Insert a column break\" ; \
                description <<Insert a column break[TODO]>> ;\
                }\
          |*/")
PREFIX(PageBreak, tree, "page_break",,
       RTAO(drawingBreak(self, Tao::Drawing::PageBreak)),
       "/*| docname \"page_break\", \"text:spread\", do { \
                dsyntax <<page_break>>;\
                synopsis \"Insert a page break\" ; \
                description <<Insert a page break. [TODO]>> ;\
                }\
          |*/")
PREFIX(TextEditKey, boolean, "text_edit_key", PARM(k, text),
       RTAO(textEditKey(self, k)),
       "/*| docname \"text_edit_key\", \"text\", do { \
                dsyntax <<text_edit_key k>>;\
                synopsis \"[TODO]\" ; \
                description <<Send a key to the text editing activities. [TODO: Concretement, ca fait quoi ???]>> ;\
                parameters;\
                parameter \"text\", \"k\", <<key name>>;\
                return_value \"boolean\", <<true/false [TODO]>>;\
                }\
          |*/")
PREFIX(LoadText, tree, "load_text",PARM(f,text),
       RTAO(loadText(self,f)),
       "/*| docname \"load_text\", \"text:file\", do { \
                dsyntax <<load_text f>>;\
                synopsis \"Load a text file from disk\" ; \
                description <<Load a text file from disk. It uses the 'doc' prefix to look into resources>> ;\
                parameters;\
                parameter \"text\", \"f\", <<file name>>;\
                return_value \"text\", <<The content of the file.>>;\
                }\
          |*/")
PREFIX(TaoVersion, tree, "tao_version",, RTAO(taoVersion(self)),
       "/*| docname \"tao_version\", \"version\", do { \
                dsyntax <<tao_version>>;\
                synopsis \"The Tao version\" ; \
                description <<Return the version of the Tao program>> ;\
                return_value \"text\", <<The version of the running Tao program>>;\
                }\
          |*/")
PREFIX(DocVersion, tree, "doc_version",, RTAO(docVersion(self)),
       "/*| docname \"doc_version\", \"version\", do { \
                dsyntax <<doc_version>>;\
                synopsis \"The document version\" ; \
                description <<Return the version of the current document (if known)>> ;\
                return_value \"text\", <<The current document version>>;\
                }\
          |*/")



// ============================================================================
//
//   Tables
//
// ============================================================================

PREFIX(NewTableAt, tree, "table",
       PARM(x,real) PARM(y, real) PARM(r,integer) PARM(c,integer) PARM(b,code),
       RTAO(newTable(context, self, x, y, r, c, b)), "");
PREFIX(NewTable, tree, "table", PARM(r,integer) PARM(c,integer) PARM(b,code),
       RTAO(newTable(context, self, r, c, b)), 
       "/*| docname \"table\", \"table\", do { \
                dsyntax <<table x, y, r, c, b>>;\
                dsyntax <<table r, c, b>>;\
                synopsis \"Create a table\" ; \
                description <<Create a new table. The body is executed in the environement of the table, that means short name can be used for table description>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate of the table. 0 if not specified.>>;\
                parameter \"real\", \"y\", <<y-coordinate of the table. 0 if not specified.>>;\
                parameter \"integer\", \"r\", <<The number of row>>;\
                parameter \"integer\", \"c\", <<The number of column>>;\
                parameter \"tree\", \"b\", <<The content of the table>>;\
                return_value \"tree\", <<The result of the body (b) evaluation.>>;\
                }\
          |*/");
PREFIX(TableSizedCell, tree, "table_cell",
       PARM(w, real) PARM(h, real) PARM(b, code),
       RTAO(tableCell(context, self, w, h, b)), "")
PREFIX(TableCell, tree, "table_cell", PARM(b, code),
       RTAO(tableCell(context, self, b)), 
       "/*| docname \"table_cell\", \"table\", do { \
                dsyntax <<table_cell w, h, b>>;\
                synopsis \"Define a sized cell in the table\" ; \
                dsyntax <<table_cell b>>;\
                synopsis \"Define a free-size cell in the table\" ; \
                dsyntax <<cell>>;\
                description <<Define a cell in the context of the table. Short name 'cell' can be used with both syntaxes.>> ;\
                parameters;\
                parameter \"real\", \"w\", <<width of the cell if specified, otherwise free size.>>;\
                parameter \"real\", \"h\", <<height of the cell if specified, otherwise free size.>>;\
                parameter \"tree\", \"b\", <<body of the cell>>;\
                return_value \"tree\", <<body evaluation result>>;\
                err \"Error raised when invoked outside of a table context.\" \
               }\
          |*/")
PREFIX(TableMargins2, tree, "table_cell_margins",
       PARM(w, real) PARM(h, real),
       RTAO(tableMargins(self, w, h)), "")
PREFIX(TableMargins, tree, "table_cell_margins",
       PARM(x, real) PARM(y, real) PARM(w, real) PARM(h, real),
       RTAO(tableMargins(self, x, y, w, h)),
       "/*| docname \"table_cell_margins\", \"table\", do { \
                dsyntax <<table_cell_margins x, y, w, h>>;\
                dsyntax <<table_cell_margins w, h>>;\
                dsyntax <<margins >>;                             \
                synopsis \"Set the margin rectangle for the table.\" ; \
                description <<Set the margin rectangle for the table. The short name of the function is margins. It can be used with both syntaxes.>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate of the table. 0 if not specified.>>;\
                parameter \"real\", \"y\", <<y-coordinate of the table. 0 if not specified.>>;\
                parameter \"real\", \"w\", <<width of the cell if specified, otherwise free size.>>;\
                parameter \"real\", \"h\", <<height of the cell if specified, otherwise free size.>>;\
                err \"Error raised when invoked outside of a table context.\" \
                }\
          |*/")
PREFIX(TableFill, tree, "table_cell_fill", PARM(b, code),
       RTAO(tableFill(self, b)), 
       "/*| docname \"table_cell_fill\", \"table\", do { \
                dsyntax <<table_cell_fill b>>;\
                dsyntax <<fill>>;                             \
                synopsis \"fill of the cell\" ; \
                description <<Define the fill code for cells>> ;\
                parameters;\
                parameter \"tree\", \"b\", <<fill code body.>>;\
                err \"Error raised when invoked outside of a table context.\" \
                }\
          |*/")
PREFIX(TableBorder, tree, "table_cell_border", PARM(b, code),
       RTAO(tableBorder(self, b)), 
       "/*| docname \"table_cell_border\", \"table\", do { \
                dsyntax <<table_cell_border>>;\
                dsyntax <<border>>;                             \
                synopsis \"Define the border code for cells\" ; \
                description <<Define the border code for cells. The short name is border.>> ;\
                parameters;\
                parameter \"tree\", \"b\", <<border code body.>>;\
                err \"Error raised when invoked outside of a table context.\" \
                }\
          |*/")
PREFIX(TableCellX, tree, "table_cell_x", , RTAO(tableCellX(self)),
       "/*| docname \"table_cell_x\", \"table\", do { \
                dsyntax <<table_cell_x>>;\
                dsyntax <<x >>;                             \
                synopsis \"x-ccordinate of the cell center\" ; \
                description <<Get the horizontal center of the current table cell>> ;\
                return_value \"real\", <<The coordinate of the center of the current cell on x-axis>>;\
                err \"Error raised when invoked outside of a table context.\" \
                }\
          |*/")
PREFIX(TableCellY, tree, "table_cell_y", , RTAO(tableCellY(self)),
       "/*| docname \"table_cell_y\", \"table\", do { \
                dsyntax <<table_cell_y>>;\
                dsyntax <<y>>;                             \
                synopsis \"y-ccordinate of the cell center\" ; \
                description <<Get the vertical center of the current table cell>> ;\
                return_value \"real\", <<The coordinate of the center of the current cell on y-axis>>;\
                }\
          |*/")
PREFIX(TableCellW, tree, "table_cell_w", , RTAO(tableCellW(self)),
       "/*| docname \"table_cell_w\", \"table\", do { \
                dsyntax <<table_cell_w>>;\
                dsyntax <<w>>;                             \
                synopsis \"Width of the cell\" ; \
                description <<Get the horizontal size of the current table cell>> ;\
                return_value \"real\", <<The size of the current cell along the x-axis>>;\
                }\
          |*/")
PREFIX(TableCellH, tree, "table_cell_h", , RTAO(tableCellH(self)),
       "/*| docname \"table_cell_h\", \"table\", do { \
                dsyntax <<table_cell_h>>;\
                dsyntax <<h>>;                             \
                synopsis \"Height of the cell.\" ; \
                description <<Get the vertical size of the current table cell>> ;\
                return_value \"real\", <<The size of the current cell along the y-axis>>;\
                err \"Error raised when invoked outside of a table context.\" \
                }\
          |*/")
PREFIX(TableRow, tree, "table_cell_row", , RTAO(tableRow(self)),
       "/*| docname \"table_cell_row\", \"table\", do { \
                dsyntax <<table_cell_row>>;\
                dsyntax <<row>>;                             \
                synopsis \"Return the current row\" ; \
                description <<Return the current row index>> ;\
                return_value \"integer\", <<the row index>>;\
                err \"Error raised when invoked outside of a table context.\" \
                }\
          |*/")
PREFIX(TableColumn, tree, "table_cell_column", , RTAO(tableColumn(self)),
       "/*| docname \"table_cell_column\", \"table\", do { \
                dsyntax <<table_cell_column>>;\
                dsyntax <<column>>;                             \
                synopsis \"Return the current column\" ; \
                description <<Return the current column index.>> ;\
                return_value \"interger\", <<The column index.>>;\
                err \"Error raised when invoked outside of a table context.\" \
                }\
          |*/")
PREFIX(TableRows, tree, "table_rows", , RTAO(tableRows(self)),
       "/*| docname \"table_rows\", \"table\", do { \
                dsyntax <<table_rows>>;\
                dsyntax <<rows>>;                             \
                synopsis \"number of rows in the current table\" ; \
                description <<Return the number of rows in the current table>> ;\
                return_value \"integer\", <<Number of rows in the table>>;\
                err \"Error raised when invoked outside of a table context.\" \
                }\
          |*/")
PREFIX(TableColumns, tree, "table_columns", , RTAO(tableColumns(self)),
       "/*| docname \"table_columns\", \"table\", do { \
                dsyntax <<table_columns>>;\
                dsyntax <<columns>>;                             \
                synopsis \"number of columns in the current table\" ; \
                description <<Return the number of columns in the current table>> ;\
                return_value \"interger\", <<number of columns in the table>>>;\
                err \"Error raised when invoked outside of a table context.\" \
                }\
          |*/")



// ============================================================================
//
//   Frames and widgets
//
// ============================================================================

PREFIX(Caption, tree, "status", PARM(t, text), RTAO(status(self, t)),
       "/*| docname \"status\", \"gui\", do { \
                dsyntax <<status t>>;\
                synopsis \"Set the status line of the window\" ; \
                description <<Set the content of the status line of the window>> ;\
                parameters;\
                parameter \"text\", \"t\", <<The text for the status line.>>;\
                }\
          |*/")
PREFIX(Frame, tree, "frame",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real) PARM(p, code),
       RTAO(framePaint(context, self, x, y, w, h, p)), 
       "/*| docname \"frame\", \"widget\", do { \
                dsyntax <<frame x, y, w, h, prog>>;\
                synopsis \"A frame with a content\" ; \
                description <<Draw a frame with the described content in 'prog'. This frame as no displayed border. It makes a texture of size (w,h) using 'frame_texture', and map it on a rectangle at (x,y) location.>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"tree\", \"prog\", <<The program that represent the content of the frame>>;\
                return_value \"tree\", <<The result of 'prog' evaluation>>;\
                see \"frame_texture\";\
                }\
          |*/")
PREFIX(FrameTexture, tree, "frame_texture",
       PARM(w,real) PARM(h,real) PARM(p, code),
       RTAO(frameTexture(context, self, w, h, p)), 
       "/*| docname \"frame_texture\", \"widget\", do { \
                dsyntax <<frame_texture w, h, prog>>;\
                synopsis \"A texture with content\" ; \
                description <<Make a texture out of the described content>> ;\
                parameters;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"tree\", \"prog\", <<The program that represent the content of the frame>>;\
                return_value \"tree\", <<The result of 'prog' evaluation>>;\
                see \"frame\";\
                }\
          |*/")
PREFIX(Url, tree, "url",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real) PARM(u, text),
       RTAO(urlPaint(self, x, y, w, h, u, NULL)), "")
PREFIX(UrlProgress, tree, "url",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(u, text) PARM(progress, integer),
       RTAO(urlPaint(self, x, y, w, h, u, progress)),
       "/*| docname \"url\", \"widget\", do { \
                dsyntax <<url x, y, w, h, url, progress>>;\
                dsyntax <<url x, y, w, h, url>>;\
                synopsis \"Draw a web container\" ; \
                description <<Load from the given URL a web page and draw it. It uses the QT webkit. >> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"text\", \"url\", <<The URL to display>>;\
                parameter \"[out] integer\", \"progress\", <<The progession of the load in output.>>;\
                see \"http://doc.qt.nokia.com/4.6/webintegration.html\" ;\
                }\
          |*/")
PREFIX(UrlTexture, tree, "url_texture",
       PARM(w,real) PARM(h,real) PARM(u, text),
       RTAO(urlTexture(self, w, h, u, NULL)), "")
PREFIX(UrlTextureProgress, tree, "url_texture",
       PARM(w,real) PARM(h,real) PARM(u, text) PARM(progress, integer),
       RTAO(urlTexture(self, w, h, u, progress)),
       "/*| docname \"url_texture\", \"widget\", do { \
                dsyntax <<url_texture w, h, url, progress>>;\
                dsyntax <<url_texture w, h, url>>;\
                synopsis \"Make a texture out of a given URL\" ; \
                description <<Load from the given URL a web page and draw it. It uses the QT webkit. >>\
                parameters;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"text\", \"url\", <<The URL to display>>;\
                parameter \"integer\", \"progress\", <<The progession of the load. 0 if not provided>>;\
                }\
          |*/")
PREFIX(LineEdit, tree, "line_edit",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real) PARM(u, text),
       RTAO(lineEdit(self, x, y, w, h, u)),
       "/*| docname \"line_edit\", \"widget\", do { \
                dsyntax <<line_edit x, y, w, h, line>>;\
                synopsis \"Draw a line editor in the current frame\" ; \
                description <<A line edit allows the user to enter and edit a single line of plain text with a useful collection of editing functions, including undo and redo, cut and paste, and drag and drop.>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"[in/out] text\", \"line\", <<The text in the line edit widget. It is an in/out parameter.>>;\
                }\
          |*/")
PREFIX(LineEditTexture, tree, "line_edit_texture",
       PARM(w,real) PARM(h,real) PARM(u, text),
       RTAO(lineEditTexture(self, w, h, u)),
       "/*| docname \"line_edit_texture\", \"widget\", do { \
                dsyntax <<line_edit_texture w, h, line>>;\
                synopsis \"Make a texture out of a given line editor\" ; \
                parameters;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"[in/out] text\", \"line\", <<The text to insert in the line edit widget.>>;\
                see \"line_edit\" ;\
                }\
          |*/")

PREFIX(PushButton, tree, "push_button",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(n, text) PARM(l, text) PARM(a, code),
       RTAO(pushButton(self, x, y, w, h, n, l, a)), 
       "/*| docname \"push_button\", \"widget\", do { \
                dsyntax <<push_button x, y, w, h, name, label, action>>;\
                synopsis \"A push button\" ; \
                description <<Draw a simple push button in the curent frame. The look and feel of the button is platform dependant. >> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"text\", \"name\", <<Name that uniquely identify this button>>;\
                parameter \"text\", \"label\", <<Label of the button>>;\
                parameter \"tree\", \"action\", <<The action to perform when the button is clicked.>>;\
                }\
          |*/")
PREFIX(PushButtonTexture, tree, "push_button_texture",
       PARM(w,real) PARM(h,real) PARM(n, text) PARM(l, text) PARM(a, code),
       RTAO(pushButtonTexture(self, w, h, n, l, a)), 
       "/*| docname \"push_button_texture\", \"widget\", do { \
                dsyntax <<push_button_texture w, h, name, label, action>>;\
                synopsis \"Make a texture out of a given push button\" ; \
                description <<Make a platform dependant texture out of a given push button>> ;\
                parameters;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"text\", \"name\", <<Name that uniquely identify this button>>;\
                parameter \"text\", \"label\", <<Label of the button>>;\
                parameter \"tree\", \"action\", <<The action to perform when the button is clicked.>>;\
                }\
          |*/")

PREFIX(RadioButton, tree, "radio_button",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(n, text) PARM(l, text) PARM(m, text) PARM(a, code),
       RTAO(radioButton(self, x, y, w, h, n, l, m, a)), 
       "/*| docname \"radio_button\", \"widget\", do { \
                dsyntax <<radio_button x, y, w, h, name, label, selected, action>>;\
                synopsis \"Draw a radio button\" ; \
                description <<Draw a radio button in the curent frame. Associate the action to perform when the button state change from non-selected to selected. Radio buttons are mutually exclusive, if you want to have multiple groups of radio button, uses the button_group.>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"text\", \"name\",  <<Name that uniquely identify this button>>;\
                parameter \"text\", \"label\", <<Label of the button>>;\
                parameter \"text\", \"selected\", <<True if the button is selected>>;\
                parameter \"tree\", \"action\", <<The action to perform when the button state change from non-selected to selected.>>;\
                see \"button_group\" \
                }\
          |*/")
PREFIX(RadioButtonTexture, tree, "radio_button_texture",
       PARM(w,real) PARM(h,real) PARM(n, text) PARM(l, text)
       PARM(m, text) PARM(a, code),
       RTAO(radioButtonTexture(self, w, h, n, l, m, a)), 
       "/*| docname \"radio_button_texture\", \"widget\", do { \
                dsyntax <<radio_button_texture w, h, name, label, selected, action>>;\
                synopsis \"Make a texture out of a given radio button\" ; \
                description <<Make a texture out of a given radio button>> ;\
                parameters;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"text\", \"name\", <<Name that uniquely identify this button>>;\
                parameter \"text\", \"label\", <<Label of the button>>;\
                parameter \"text\", \"selected\", <<True if the button is selected>>;\
                parameter \"tree\", \"action\", <<The action to perform when the button state change from non-selected to selected.>>;\
                }\
          |*/")

PREFIX(CheckBoxButton, tree, "check_box_button",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(n, text) PARM(l, text) PARM(m, text) PARM(a, code),
       RTAO(checkBoxButton(self, x, y, w, h, n, l, m, a)), 
       "/*| docname \"check_box_button\", \"widget\", do { \
                dsyntax <<check_box_button x, y, w, h, name, label, marked, action>>;\
                synopsis \"Draw a check button\" ; \
                description <<Draw a check button in the curent frame>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"text\", \"name\", <<Name that uniquely identify this button>>;\
                parameter \"text\", \"label\", <<Label of the button>>;\
                parameter \"text\", \"marked\", <<True if the button is marked>>;\
                parameter \"tree\", \"action\", <<The action to perform when the button state change from non-sed.>>; \
                }\
          |*/")
PREFIX(CheckBoxButtonTexture, tree, "check_box_button_texture",
       PARM(w,real) PARM(h,real) PARM(n, text) PARM(l, text)
       PARM(m, text) PARM(a, code),
       RTAO(checkBoxButtonTexture(self, w, h, n, l, m, a)), 
       "/*| docname \"check_box_button_texture\", \"widget\", do { \
                dsyntax <<check_box_button_texture w, h, name, label, marked, action>>;\
                synopsis \"Make a texture out of a given checkbox button\" ; \
                description <<Make a texture out of a given checkbox button>> ;\
                parameters;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"text\", \"name\", <<Name that uniquely identify this button>>;\
                parameter \"text\", \"label\", <<Label of the button>>;\
                parameter \"text\", \"marked\", <<True if the button is marked>>;\
                parameter \"tree\", \"action\", <<The action to perform when the button state change from non-s                }\
          |*/")

PREFIX(ColorChooser, tree, "color_chooser",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real) PARM(t,code),
       RTAO(colorChooser(self, x, y, w, h, t)), "")
PREFIX(ColorChooserNow, tree, "color_chooser", PARM(n, text) PARM(t,code),
       RTAO(colorChooser(self, n, t)), 
       "/*| docname \"color_chooser\", \"widget\", do { \
                dsyntax <<color_chooser x, y, w, h, tree>>;\
                dsyntax <<color_chooser name, tree>>;\
                synopsis \"Draw a color chooser\" ; \
                description <<Pop a window with the platform dependant color chooser inside.\
Once the color is chosen Names 'red', 'green', 'blue', and 'alpha' are replaced in the given tree by the corresponding value in the selected color. Then the resulting tree is evaluated.\
 'name' is used to register and uses a color attribute : 'line_color' and 'color' are defined.  >> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"text\", \"name\", <<name af attribute to associate with.>>;\
                parameter \"tree\", \"tree\", <<tree to update with new color>>;\
                }\
          |*/")

PREFIX(ColorChooserTexture, tree, "color_chooser_texture",
       PARM(w,real) PARM(h,real) PARM(t,code),
       RTAO(colorChooserTexture(self, w, h, t)), 
       "/*| docname \"color_chooser_texture\", \"widget\", do { \
                dsyntax <<color_chooser_texture w, h, tree>>;\
                synopsis \"Make a texture out of a given color chooser\" ; \
                description <<Make a texture out of a given color chooser>> ;\
                parameters;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"tree\", \"tree\", <<tree to update with new color>>;\
                see \"color_chooser\" \
                }\
          |*/")
PREFIX(FontChooserNow, tree, "font_chooser", PARM(t,code),
       RTAO(fontChooser(self, t)), "")
PREFIX(FontChooser, tree, "font_chooser",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real) PARM(t,code),
       RTAO(fontChooser(self, x, y, w, h, t)), 
       "/*| docname \"font_chooser\", \"widget\", do { \
                dsyntax <<font_chooser t>>;\
                dsyntax <<font_chooser x, y, w, h, tree>>;\
                synopsis \"font chooser\" ; \
                description <<Pop a window with the platform dependant font chooser inside. \
Once the font is chosen, Names 'font_family', 'font_size', 'font_weight', 'font_slant', 'font_stretch', 'font_is_italic', and 'font_is_bold' are replaced by their corresponding values in the selected font. The resulting tree is then evaluated.>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"tree\", \"tree\", <<tree to update with new font>>;\
                }\
          |*/")
PREFIX(FontChooserTexture, tree, "font_chooser_texture",
       PARM(w,real) PARM(h,real) PARM(t,code),
       RTAO(fontChooserTexture(self, w, h, t)), 
       "/*| docname \"font_chooser_texture\", \"widget\", do { \
                dsyntax <<font_chooser_texture w, h, tree>>;\
                synopsis \"Make a texture out of a given color chooser\" ; \
                description <<Make a texture out of a given color chooser>> ; \
                parameters;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"tree\", \"tree\", <<tree to update with new font>>;\
                see \"font_chooser\"; \
                }\
          |*/")
PREFIX(FileChooser, tree, "file_chooser",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real) PARM(t,code),
       RTAO(fileChooser(self, x, y, w, h, t)), "")
PREFIX(FileChooserNow, tree, "file_chooser", PARM(t, code),
       RTAO(fileChooser(self, t)), 
       "/*| docname \"file_chooser\", \"widget\", do { \
                dsyntax <<file_chooser x, y, w, h, tree>>;\
                dsyntax <<file_chooser tree>>;\
                synopsis \"Draw a file chooser\" ; \
                description <<Pop a window with the platform dependant file chooser inside. \
The file_chooser can be parameterized with 4 atributes which are 'action', 'directory', 'label' and 'filter'. Those attributes are defined in the function with file_chooser_ prefix.\
Once the file is selected, Names 'file_name', 'file_directory', 'file_path', and 'rel_file_path' are replaced by their corresponding values from the selected file.>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"tree\", \"t\", <<tree to update with new file>>;\
                see \"file_chooser_action\" ;\
                see \"file_chooser_directory\" ;\
                see \"file_chooser_filter\" ;\
                see \"file_chooser_label\" ;\
                }\
          |*/")
PREFIX(FileChooserTexture, tree, "file_chooser_texture",
       PARM(w,real) PARM(h,real) PARM(t, code),
       RTAO(fileChooserTexture(self, w, h, t)), 
       "/*| docname \"file_chooser_texture\", \"widget\", do { \
                dsyntax <<file_chooser_texture w, h, t>>;\
                synopsis \"Make a texture out of a given file chooser\" ; \
                description <<Make a texture out of a given file chooser>> ;\
                parameters;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"tree\", \"t\", <<tree to update with new file>>;\
                see \"file_chooser\"; \
                }\
          |*/")
PREFIX(SetFileDialogAction, tree, "file_chooser_action", PARM(t, code),
       RTAO(setFileDialogAction(self, t)), 
       "/*| docname \"file_chooser_action\", \"widget\", do { \
                dsyntax <<file_chooser_action t>>;\
                dsyntax <<action t>>;\
                synopsis \"File chooser action\" ; \
                description <<Set the action that will be execute when OK is pressed. Only available in a file chooser sub tree.>> ;\
                parameters;\
                parameter \"tree\", \"t\", <<The action to modify and execute when file is chosen.>>;\
                see \"file_chooser\";\
                }\
          |*/")
PREFIX(SetFileDialogDirectory, tree, "file_chooser_directory", PARM(d, text),
       RTAO(setFileDialogDirectory(self, d)),
       "/*| docname \"file_chooser_directory\", \"widget\", do { \
                dsyntax <<file_chooser_directory d>>;\
                dsyntax <<directory d>>;\
                synopsis \"File chooser directory\" ; \
                description <<Set the directory to open first. Only available in a file chooser sub tree.>> ;\
                parameters;\
                parameter \"text\", \"d\", <<directory name>>;\
                see \"file_chooser\";\
                }\
          |*/")
PREFIX(SetFileDialogFilter, tree, "file_chooser_filter", PARM(d, text),
       RTAO(setFileDialogFilter(self, d)),
       "/*| docname \"file_chooser_filter\", \"widget\", do { \
                dsyntax <<file_chooser_filter>>;\
                synopsis \"Set the file filters\" ; \
                description <<Set the file filters (file pattern, e.g. *.img). Only available in a file chooser sub tree.>> ;\
                parameters;\
                parameter \"text\", \"t\", <<filter for file>>;\
                see \"file_chooser\";\
                }\
          |*/")
PREFIX(SetFileDialogLabel, tree, "file_chooser_label",
       PARM(lbl, text) PARM(v, text),
       RTAO(setFileDialogLabel(self, lbl, v)),
       "/*| docname \"file_chooser_label\", \"widget\", do { \
                dsyntax <<file_chooser_label>>;\
                synopsis \"Set labels on a file dialog\" ; \
                description <<Set labels on a file dialog. Only available in a file chooser sub tree.>> ;\
                parameters;\
                parameter \"text\", \"t\", <<The label for the file chooser dialog box.>>;\
                see \"file_chooser\";\
                }\
          |*/")

PREFIX(ButtonGroup, tree, "button_group",
       PARM(ex, boolean) PARM(b, code),
       RTAO(buttonGroup(context, self, ex, b)), 
       "/*| docname \"button_group\", \"widget\", do { \
                dsyntax <<button_group ex, buttons>>;\
                synopsis \"Create a button group.\" ; \
                description <<Create a group. Buttons included in this group are mutually exclusive. It is useful to create multiple group of radio buttons>> ;\
                parameters;\
                parameter \"boolean\", \"ex\", <<If true, the group is exclusive.>>;\
                parameter \"tree\", \"buttons\", <<The code of buttons>>;\
                }\
          |*/")

PREFIX(Action, tree, "button_group_action", PARM(act, code),
       RTAO(setButtonGroupAction(self, act)), 
       "/*| docname \"button_group_action\", \"widget\", do { \
                dsyntax <<button_group_action action>>;\
                synopsis \"Action of the group\" ; \
                description <<Set the action to be executed by the current buttonGroup.When a button in the group is clicked, this action is triggered as well as the button's action.>> ;\
                parameters;\
                parameter \"tree\", \"action\", <<The action.>>;\
                see \"button_group\" \
                }\
          |*/")

PREFIX(GroupBox, tree, "group_box",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real)
       PARM(lbl, text) PARM(b, code),
       RTAO(groupBox(context, self, x, y, w, h, lbl, b)), 
       "/*| docname \"group_box\", \"widget\", do { \
                dsyntax <<group_box x, y, w, h, label, buttons>>;\
                synopsis \"group box\" ; \
                description <<Draw a group box in the current frame. The x and y coordinate of widgets placed in this box are the colomn and row number. Total number of rows and columns is dynamic.>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate of this box>>;\
                parameter \"real\", \"y\", <<y-coordinate of this box>>;\
                parameter \"real\", \"w\", <<width of this box>>;\
                parameter \"real\", \"h\", <<height of this box>>;\
                parameter \"text\", \"label\", <<The label of the box>>;\
                parameter \"tree\", \"buttons\", <<The tree describing the content of the box>>;\
                }\
          |*/")
PREFIX(GroupBoxTexture, tree, "group_box_texture",
       PARM(w,real) PARM(h,real) PARM(lbl, text),
       RTAO(groupBoxTexture(self, w, h, lbl)),
       "/*| docname \"group_box_texture\", \"widget\", do { \
                dsyntax <<group_box_texture w, h, lbl>>;\
                synopsis \"Texture group box.\" ; \
                description <<Make a texture out of a given group box.>> ;\
                parameters;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"text\", \"lbl\", <<The label of the box>>;\
                see \"group_box\" \
                }\
          |*/")


PREFIX(Movie, tree, "movie",
       PARM(x,real) PARM(y,real) PARM(w,real) PARM(h,real) PARM(u,text),
       RTAO(movie(self, x, y, w, h, u)),
       "/*| docname \"movie\", \"widget\", do { \
                dsyntax <<movie x, y, w, h, u>>;\
                synopsis \"Play a movie\" ; \
                description <<Display a movie in the rectangle specified by the given coordinates. Supported movie formats depend on the operating system.>> ;\
                parameters;\
                parameter \"real\", \"x\", <<x-coordinate>>;\
                parameter \"real\", \"y\", <<y-coordinate>>;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"text\", \"u\", <<The URL of the video to play.>>;\
                see \"http://doc.qt.nokia.com/4.6/phonon-module.html\" \
                }\
          |*/")
PREFIX(MovieTexture, tree, "movie_texture", PARM(u,text),
       RTAO(movieTexture(self, u)),
       "/*| docname \"movie_texture\", \"widget\", do { \
                dsyntax <<vmovie_texture w, h, u>>;\
                synopsis \"Create a texture from a video.\" ; \
                description <<Create a dynamic texture from the given movie.>> ;\
                parameters;\
                parameter \"real\", \"w\", <<width>>;\
                parameter \"real\", \"h\", <<height>>;\
                parameter \"text\", \"u\", <<The URL to play>>;\
                see \"movie\" \
                }\
          |*/")


// ============================================================================
// 
//   Lighting
// 
// ============================================================================

PREFIX(LightID, tree, "light", PARM(l, integer) PARM(b, boolean),
       RTAO(lightId(self, l, b)),
       "Select which light we are working with")
PREFIX(LightEnable, tree, "light", PARM(l, integer),
       RTAO(lightId(self, l, true)),
       "Select which light we are working with")

PREFIX(LightAmbient, tree, "light_ambient",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(light(self, GL_AMBIENT, r, g, b, a)),
       "Select the ambient light")
PREFIX(LightDiffuse, tree, "light_diffuse",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(light(self, GL_DIFFUSE, r, g, b, a)),
       "Select the diffuse light")
PREFIX(LightSpecular, tree, "light_specular",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(light(self, GL_SPECULAR, r, g, b, a)),
       "Select the specular light")
PREFIX(LightPosition3, tree, "light_position",
       PARM(x, real) PARM(y, real) PARM(z, real),
       RTAO(light(self, GL_POSITION, x, y, z, 0)),
       "Select the position of the light")
PREFIX(LightPosition, tree, "light_position",
       PARM(x, real) PARM(y, real) PARM(z, real) PARM(w, real),
       RTAO(light(self, GL_POSITION, x, y, z, w)),
       "Select the position of the light")
PREFIX(LightSpotDirection, tree, "light_spot_direction",
       PARM(x, real) PARM(y, real) PARM(z, real),
       RTAO(light(self, GL_SPOT_DIRECTION, x, y, z)),
       "Select the direction of spot lights")
PREFIX(LightSpotExponent, tree, "light_spot_exponent", PARM(x, real),
       RTAO(light(self, GL_SPOT_EXPONENT, x)),
       "Select the cutoff exponent for spot lights")
PREFIX(LightSpotCutoff, tree, "light_spot_cutoff", PARM(x, real),
       RTAO(light(self, GL_SPOT_CUTOFF, x)),
       "Select the cutoff angle for spot lights")
PREFIX(LightAttenuation, tree, "light_attenuation",
       PARM(x, real) PARM(y, real) PARM(z, real),
       TAO(light(self, GL_CONSTANT_ATTENUATION, x));
       TAO(light(self, GL_LINEAR_ATTENUATION, y));
       TAO(light(self, GL_QUADRATIC_ATTENUATION, z));
       return XL::xl_true,
       "Select the light attenuation factor")

PREFIX(MaterialAmbient, tree, "material_ambient",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(material(self, GL_FRONT_AND_BACK, GL_AMBIENT, r, g, b, a)),
       "Select the ambient material")
PREFIX(MaterialDiffuse, tree, "material_diffuse",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(material(self, GL_FRONT_AND_BACK, GL_DIFFUSE, r, g, b, a)),
       "Select the diffuse material")
PREFIX(MaterialSpecular, tree, "material_specular",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(material(self, GL_FRONT_AND_BACK, GL_SPECULAR, r, g, b, a)),
       "Select the specular material")
PREFIX(MaterialEmission, tree, "material_emission",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(material(self, GL_FRONT_AND_BACK, GL_EMISSION, r, g, b, a)),
       "Select the emission of the material")
PREFIX(MaterialShininess, tree, "material_shininess", PARM(x, real),
       RTAO(material(self, GL_FRONT_AND_BACK, GL_SHININESS, x)),
       "Select the shininess of the material")

PREFIX(MaterialFrontAmbient, tree, "material_front_ambient",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(material(self, GL_FRONT, GL_AMBIENT, r, g, b, a)),
       "Select the ambient material")
PREFIX(MaterialFrontDiffuse, tree, "material_front_diffuse",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(material(self, GL_FRONT, GL_DIFFUSE, r, g, b, a)),
       "Select the diffuse material")
PREFIX(MaterialFrontSpecular, tree, "material_front_specular",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(material(self, GL_FRONT, GL_SPECULAR, r, g, b, a)),
       "Select the specular material")
PREFIX(MaterialFrontEmission, tree, "material_front_emission",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(material(self, GL_FRONT, GL_EMISSION, r, g, b, a)),
       "Select the emission of the material")
PREFIX(MaterialFrontShininess, tree, "material_front_shininess", PARM(x, real),
       RTAO(material(self, GL_FRONT, GL_SHININESS, x)),
       "Select the shininess of the material")

PREFIX(MaterialBackAmbient, tree, "material_back_ambient",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(material(self, GL_BACK, GL_AMBIENT, r, g, b, a)),
       "Select the ambient material")
PREFIX(MaterialBackDiffuse, tree, "material_back_diffuse",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(material(self, GL_BACK, GL_DIFFUSE, r, g, b, a)),
       "Select the diffuse material")
PREFIX(MaterialBackSpecular, tree, "material_back_specular",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(material(self, GL_BACK, GL_SPECULAR, r, g, b, a)),
       "Select the specular material")
PREFIX(MaterialBackEmission, tree, "material_back_emission",
       PARM(r, real) PARM(g, real) PARM(b, real) PARM(a, real),
       RTAO(material(self, GL_BACK, GL_EMISSION, r, g, b, a)),
       "Select the emission of the material")
PREFIX(MaterialBackShininess, tree, "material_back_shininess", PARM(x, real),
       RTAO(material(self, GL_BACK, GL_SHININESS, x)),
       "Select the shininess of the material")

PREFIX(ShaderProgram, tree, "shader_program", PARM(code, tree),
       RTAO(shaderProgram(context, self, code)),
       "Define a shader program")
PREFIX(VertexShaderFromSource, tree, "vertex_shader", PARM(src, text),
       RTAO(shaderFromSource(self, Tao::Widget::VERTEX, src)),
       "Define a vertex shader")
PREFIX(VertexShaderFromFile, tree, "vertex_shader_file", PARM(file, text),
       RTAO(shaderFromFile(self, Tao::Widget::VERTEX, file)),
       "Define a vertex shader")
PREFIX(FragmentShaderFromSource, tree, "fragment_shader", PARM(src, text),
       RTAO(shaderFromSource(self, Tao::Widget::FRAGMENT, src)),
       "Define a vertex shader")
PREFIX(FragmentShaderFromFile, tree, "fragment_shader_file", PARM(file, text),
       RTAO(shaderFromFile(self, Tao::Widget::FRAGMENT, file)),
       "Define a vertex shader")
PREFIX(ShaderLog, text, "shader_log", , RTAO(shaderLog(self)),
       "Return shader log")
PREFIX(ShaderSet, tree, "shader_set", PARM(t, tree),
       RTAO(shaderSet(context, self, t)),
       " Set a shader uniform or attribute value");



// ============================================================================
//
//   Chooser
//
// ============================================================================

PREFIX(Chooser, tree, "chooser", PARM(n, text),
       RTAO(chooser(context, self, n)), 
       "/*| docname \"chooser\", \"code:chooser\", do { \
                dsyntax <<chooser c>>;\
                synopsis \"\" ; \
                description <<Create a chooser with the given caption. A chooser shows a selection among the possible commands>> ;\
                parameters;\
                parameter \"text\", \"c\", <<The caption of the chooser.>>;\
                }\
          |*/")
PREFIX(ChooserChoice, tree, "chooser_choice", PARM(n, text) PARM(t, code),
       RTAO(chooserChoice(self, n, t)), 
       "/*| docname \"chooser_choice\", \"code:chooser\", do { \
                dsyntax <<chooser_choice l, t>>;\
                synopsis \"Add a command in the chooser list.\" ; \
                description <<Create a chooser item and associate a command>> ;\
                parameters;\
                parameter \"text\", \"l\", <<label of the command>>;\
                parameter \"tree\", \"t\", <<the command>>;\
                }\
          |*/")
PREFIX(ChooserCommands, tree, "chooser_commands", PARM(p, text) PARM(t,text),
       RTAO(chooserCommands(self, p, t)),
       "/*| docname \"chooser_commands\", \"code:chooser\", do { \
                dsyntax <<chooser_commands, p, t>>;\
                synopsis \"Add all commands from the symbols list.\" ; \
                description << Add all commands in the current symbol table that have the given prefix>> ;\
                parameters;\
                parameter \"text\", \"p\", <<The prefix>>;\
                parameter \"text\", \"t \", <<The label>>;\
                }\
          |*/")
PREFIX(ChooserPages, tree, "chooser_pages", PARM(p, symbol) PARM(l, text),
       RTAO(chooserPages(self, p, l)),
       "/*| docname \"chooser_pages\", \"code:chooser\", do { \
                dsyntax <<chooser_pages p, l>>;\
                synopsis \"pages added to the chooser\" ; \
                description <<Add the list of pages to the chooser>> ;\
                parameters;\
                parameter \"synbol\", \"p\", <<The prefix that will be added to the page name>>;\
                parameter \"text\", \"l\", <<The text that will be added as label prefix to the name of pages.>>;\
                }\
          |*/")
PREFIX(ChooserBranches, tree, "chooser_branches", PARM(p, symbol) PARM(l, text),
       RTAO(chooserBranches(self, p, l)),
       "/*| docname \"chooser_branches\", \"code:chooser\", do { \
                dsyntax <<chooser_branches p, l>>;\
                synopsis \"branches added to the chooser\" ; \
                description <<Add the list of project branches to the chooser>> ;\
                parameters;\
                parameter \"symbol\", \"p\", <<The action to execute when branch is selected (will be passed branch name as text)>>;\
                parameter \"text\", \"l\", <<The text that will be added as label prefix to the name of branches.>>;\
                }\
          |*/")
PREFIX(ChooserCommits, tree, "chooser_commits", PARM(b, text) PARM(p, symbol) PARM(l, text),
       RTAO(chooserCommits(self, b, p, l)),
       "/*| docname \"chooser_commits\", \"code:chooser\", do { \
                dsyntax <<chooser_commits b, p, l>>;\
                synopsis \"commits added to the chooser\" ; \
                description <<Add the branch history (commits) to the chooser>> ;\
                parameters;\
                parameter \"text\", \"p\", <<The branch name>>;\
                parameter \"symbol\", \"p\", <<The action to execute when commit is selected (will be passed commit ID as text)>>;\
                parameter \"text\", \"l\", <<The text that will be added as label prefix to the commit log.>>;\
                }\
          |*/")
PREFIX(Checkout, tree, "checkout", PARM(t, text), RTAO(checkout(self, t)),
       "/*| docname \"checkout\", \"code:checkout\", do { \
                dsyntax <<checkout t>>;\
                synopsis \"\" ; \
                description <<Checkout a branch or a commit>> ;\
                parameters;\
                parameter \"text\", \"t\", <<The name of the branch, or the commit ID, to checkout.>>;\
                }\
          |*/")



// ============================================================================
//
//    Menus
//
// ============================================================================

PREFIX(Menu, tree, "menu", PARM(n, text) PARM(lbl, text) PARM(icon, text),
       RTAO(menu(self, n, lbl, icon, false)),
       "/*| docname \"menu\", \"widget:menu\", do { \
                dsyntax <<menu \"unique_name\", \"label\", \"icon\">>;\
                synopsis \"Create/Select a menu\" ; \
                description <<Add the menu to the current menu bar or create the contextual menu. If the menu already exist, it is updated and set as the current menu>> ;\
                parameters;\
                parameter \"text\", \"unique_name\", <<Name that uniquely identify this menu>>;\
                parameter \"text\", \"label\", <<The label of the menu>>;\
                parameter \"text\", \"icon\", <<The name of the icon (filename).>>;\
                }\
          |*/")

PREFIX(SubMenu, tree, "submenu",
       PARM(name, text) PARM(lbl, text) PARM(icon, text),
       RTAO(menu(self, name, lbl, icon, true)),
       "/*| docname \"submenu\", \"widget:menu\", do { \
                dsyntax <<submenu \"unique_name\", \"label\", \"icon\">>;\
                synopsis \"Create/Select a submenu\" ; \
                description <<Add the submenu to the current menu. If the submenu already exist, it is updated and set as the current menu>> ;\
                parameters;\
                parameter \"text\", \"unique_name\", <<Name that uniquely identify this menu>>;\
                parameter \"text\", \"label\", <<The label of the menu>>;\
                parameter \"text\", \"icon\", <<The name of the icon (filename).>>;\
                }\
          |*/")

PREFIX(MenuItem, tree, "menu_item",
       PARM(n, text) PARM(lbl, text) PARM(icon, text) PARM(cable, boolean)
       PARM(isc, text)  PARM(t, code),
       RTAO(menuItem(self, n, lbl, icon, cable, isc, t)),
       "/*| docname \"menu_item\", \"widget:menu\", do { \
                dsyntax <<menu_item \"unique_name\", \"label\", \"icon\", checkable, isChecked, tree>>;\
                synopsis \"add an entry in a menu\" ; \
                description <<Add an entry in the current menu with the label, icon, checkmark and command.>> ;\
                parameters;\
                parameter \"text\", \"unique_name\", <<Name that uniquely identify this entry>>;\
                parameter \"text\", \"label\", <<The label of the entry>>;\
                parameter \"text\", \"icon\", <<The name of the icon (filename).>>;\
                parameter \"boolean\", \"checkable\", <<Should this entry carry a check box ?>>;\
                parameter \"text\", \"isChecked\", <<If this entry carries a check box, is it cheked or not.>>;\
                parameter \"tree\", \"t\", <<The command to execute on item selection.>>;\
                }\
          |*/")

PREFIX(ToolBar, tree, "toolbar",
       PARM(name, text) PARM(lbl, text) PARM(loc, text),
       RTAO(toolBar(self, name, lbl, true, loc)),
       "/*| docname \"toolbar\", \"widget:menu\", do { \
                dsyntax <<toolbar  \"unique_name\", \"label\", \"loc\">>;\
                synopsis \"Add the toolBar\" ; \
                description <<Add the toolBar to the current widget at the specify location.>> ;\
                parameters;\
                parameter \"text\", \"unique_name\", <<Name that uniquely identify this toolbar>>;\
                parameter \"text\", \"label\", <<The label of the toolbar>>;\
                parameter \"text\", \"loc\", <<The location of the toolbar in the widget. Supported values are [n|N]*, [e|E]*, [s|S]*, [w|W|o|O]*>>;\
                }\
          |*/")

PREFIX(MenuBar, tree, "menubar", , RTAO(menuBar(self)),
       "/*| docname \"menubar\", \"widget:menu\", do { \
                dsyntax <<menubar>>;\
                synopsis \"Set the current menubar\" ; \
                description <<Set the current menubar to the default menuBar>> ;\
                }\
          |*/")

PREFIX(Separator, tree, "separator", ,
       RTAO(separator(self)),
       "/*| docname \"separator\", \"widget:menu\", do { \
                dsyntax <<separator>>;\
                synopsis \"Add a separator\" ; \
                description <<Add a separator to the current menu or menu bar or tool bar. >> ;\
                }\
          |*/")


// ============================================================================
//
//   Error management
//
// ============================================================================

PREFIX(ErrorMessage, tree, "error", PARM(m, text) PARM(s, code),
       return Tao::Widget::runtimeError(self, m, s), "")
PREFIX(ErrorMessage0, tree, "error", PARM(m, text),
       return Tao::Widget::runtimeError(self, m, NULL),
       "/*| docname \"error\", \"\", do { \
                dsyntax <<error m, s>>;\
                dsyntax <<error m>>;\
                synopsis \"Display an error message from the input\" ; \
                description <<Display an error message from the input>> ;\
                parameters;\
                parameter \"text\", \"m\", <<The message to display>>;\
                parameter \"tree\", \"s\", <<[TODO]>>;\
                return_value \"tree\", <<[TODO]>>;\
                }\
          |*/")



// ============================================================================
//
//   Tree management
//
// ============================================================================
PREFIX(Insert0, boolean, "insert", PARM(m, text) PARM(t, source),
       RTAO(insert(self, t, m)), "")
PREFIX(Insert, boolean, "insert", PARM(t, source), RTAO(insert(self, t)), 
       "/*| docname \"insert\", \"tree\", do { \
                dsyntax <<insert m, t>>;\
                dsyntax <<insert t>>;\
                synopsis \"Insert code\" ; \
                description <<Insert at the end of page or program>> ;\
                parameters;\
                parameter \"text\", \"m\", <<message used to mark the change in the version management tool (git). >>;\
                parameter \"tree\", \"t\", <<The tree to insert in the code.>>;\
                }\
          |*/")
PREFIX(Delete, boolean, "delete_selection", PARM(k, text),
       RTAO(deleteSelection(self, k)),
       "/*| docname \"delete_selection\", \"tree\", do { \
                dsyntax <<delete_selection>>;\
                synopsis \"Delete the selection\" ; \
                description <<Delete the selection (with text support)>> ;\
                parameters;\
                parameter \"text\", \"k\", <<key [TODO]>>;\
                }\
          |*/")
PREFIX(SetAttribute, boolean, "set_attribute",
       PARM(n, text) PARM(t, source),
       RTAO(setAttribute(self, n, t, "group,shape")), 
       "/*| docname \"set_attribute\", \"tree\", do { \
                dsyntax <<set_attribute n, t>>;\
                synopsis \"set attribute is selection\" ; \
                description <<Insert the tree in all shapes in the selection>> ;\
                parameters;\
                parameter \"text\", \"n\", <<Attribute name>>;\
                parameter \"tree\", \"t\", <<Attribute value >>;\
                }\
          |*/")


// ============================================================================
//
//   z order management
//
// ============================================================================

PREFIX(BringToFront, boolean, "bring_to_front",, RTAO(bringToFront(self)),
       "/*| docname \"bring_to_front\", \"code:zorder\", do { \
                dsyntax <<bring_to_front>>;\
                synopsis \"Bring the selected shape to front\" ; \
                description <<Bring the selected shape to front. This moves the source code of the selection to the end of the page or program>> ;\
                }\
          |*/")
PREFIX(BringForward, boolean, "bring_forward",, RTAO(bringForward(self)),
       "/*| docname \"bring_forward\", \"code:zorder\", do { \
                dsyntax <<bring_forward>>;\
                synopsis \"Bring the selection one forward\" ; \
                description <<Swap the selected shape and the one in front of it. This is done by swaping code in the source.> ;\
                }\
          |*/")
PREFIX(SendToBack, boolean, "send_to_back",, RTAO(sendToBack(self)),
       "/*| docname \"send_to_back\", \"code:zorder\", do { \
                dsyntax <<send_to_back>>;\
                synopsis \"Send the selected shape to back\" ; \
                description <<Send the selected shape to back. This moves the source code of the selection to the begining of the page or program>> ;\
                }\
          |*/")
PREFIX(SendBackward, boolean, "send_backward",, RTAO(sendBackward(self)),
       "/*| docname \"send_backward\", \"code:zorder\", do { \
                dsyntax <<send_backward>>;\
                synopsis \"Send the selection one backward\" ; \
                description <<Swap the selected shape and the one just behind it. This is done by swaping code in the source.>> ;\
                }\
          |*/")

// ============================================================================
//
//   group management
//
// ============================================================================

PREFIX(Group, tree, "group",   PARM(t, code),
       RTAO(group(context, self, t)), 
       "/*| docname \"group\", \"code:group\", do { \
                dsyntax <<group t>>;\
                synopsis \"Create a logical group\" ; \
                description <<Group objects together, make them selectable as a whole.>> ;\
                parameters;\
                parameter \"tree\", \"t\", <<The code to group>>;\
                }\
          |*/")
PREFIX(GroupSelection, boolean, "group_selection",, RTAO(groupSelection(self)),
       "/*| docname \"group_selection\", \"code:group\", do { \
                dsyntax <<group_selection>>;\
                synopsis \"Create the group from the selected objects\" ; \
                description <<Modify the source code to group the selection.>> ;\
                see \"group\";\
                }\
          |*/")
PREFIX(UngroupSelection, boolean, "ungroup_selection",, RTAO(ungroupSelection(self)),
       "/*| docname \"ungroup_selection\", \"code:group\", do { \
                dsyntax <<ungroup_selection>>;\
                synopsis \"ungroup the selected group\" ; \
                description <<Modify the source code to ungroup the selection>> ;\
                see \"group\";\
                }\
          |*/")

// ============================================================================
//
//   Unit conversions
//
// ============================================================================

POSTFIX(FromCm,   real, PARM(x, real), "cm", RTAO(fromCm(self, x)),
"/*| docname \"cm\", \"code:unit\", do { \
         dsyntax \"x cm\" ;\
         synopsis \"Convert from cm to pixels\"; \
         description \"Convert from cm to pixels\"; \
         parameters; \
         parameter \"real\", \"x\", \"The value in cm\";\
         return_value \"real\", \"The value in pixel. \";\
         }\
|*/")
POSTFIX(FromMm,   real, PARM(x, real), "mm", RTAO(fromMm(self, x)),
       "/*| docname \"mm\", \"code:unit\", do { \
                dsyntax <<x mm>>;\
                synopsis \"Convert from mm to pixels\" ; \
                description <<Convert from mm to pixels>> ;\
                parameters;\
                parameter \"real\", \"x\", \"The value in mm\";              \
                return_value \"real\", \"The value in pixel. \";\
                }\
          |*/")
POSTFIX(FromInch, real, PARM(x, real), "inch", RTAO(fromIn(self, x)),
       "/*| docname \"inch\", \"code:unit\", do { \
                dsyntax <<x inch>>;\
                synopsis \"Convert from inch to pixels\" ; \
                description <<Convert from inch to pixels>> ;\
                parameters;\
                parameter \"real\", \"x\", \"The value in inch\";              \
                return_value \"real\", \"The value in pixel. \";\
                }\
          |*/")
POSTFIX(FromPt,   real, PARM(x, real), "pt", RTAO(fromPt(self, x)),
       "/*| docname \"pt\", \"code:unit\", do { \
                dsyntax <<x pt>>;\
                synopsis \"Convert from pt to pixels\" ; \
                description <<Convert from pt to pixels>> ;\
                parameters;\
                parameter \"real\", \"x\", \"The value in point\";              \
                return_value \"real\", \"The value in pixel. \";\
                }\
          |*/")
POSTFIX(FromPx,   real, PARM(x, real), "px", RTAO(fromPx(self, x)),
       "/*| docname \"px\", \"code:unit\", do { \
                dsyntax <<x px>>;\
                synopsis \"Convert from pixel\" ; \
                description <<Convert from pixel (currently 1-1 mapping, could be based on scaling?)>> ;\
                parameters;\
                parameter \"real\", \"x\", \"The value in pixel\";              \
                return_value \"real\", \"The value in pixel. \";\
                }\
          |*/")



// ============================================================================
//
//   Misc...
//
// ============================================================================

PREFIX(Constant, tree, "constant", PARM(t, code), RTAO(constant(self, t)), 
       "/*| docname \"constant\", \"code\", do { \
                dsyntax <<constant t>>;\
                synopsis \"a constant tree\" ; \
                description <<A tree that cannot be modify.>> ;\
                parameters;\
                parameter \"tree\", \"t\", <<the tree that is constant>>;\
                return_value \"tree\", <<the tree>>;\
                }\
          |*/")
PREFIX(GenDoc, tree, "generate_doc", PARM(t, source),RTAO(generateDoc(self, t)),
"/*| docname \"generate_doc\", \"documentation\", do { \
         dsyntax \"generate_doc t\" ;\
         synopsis \"generate the doc for the specified tree \"; \
         description \"Extract the documentation from the specified tree. \"; \
         parameters; \
         parameter \"tree\", \"t\", \"The tree from wich extracting the documentation\";\
         return_value \"Text\", \"The Text contains the documentation, ready to be parsed. \";\
         }\
|*/")

PREFIX(GenAllDoc, tree, "generate_all_doc", PARM(filename, text),
       RTAO(generateAllDoc(self, filename)),
"/*| docname \"generate_all_doc\", \"documentation\", do { \
         dsyntax \"generate_all_doc filename\" ;\
         synopsis \"generate all the documentation. \"; \
         description \"Extract the documentation from the context, the primitive and the current document. It writes the documentation into the specified files if any. \"; \
         parameters; \
         parameter \"text\", \"filename\", \"The location where to write the documentation. If empty, no file written. \";\
         return_value \"Text\", \"The Text contains the documentation, ready to be parsed. \";\
         }\
|*/")


// ============================================================================
//
//   Module management
//
// ============================================================================

// May hide primitive: import "filename" (from xlr/basics.tbl)
// Not a problem because implementation takes care of the above syntax
PREFIX(ImportModule, tree, "import", PARM(m, tree),
       return Tao::ModuleManager::import(context, self, m),
       "")
