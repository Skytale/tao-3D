// ****************************************************************************
//  formulas.tbl                                                    Tao project
// ****************************************************************************
//
//   File Description:
//
//     Functions and transforms allowed in formulas
//
//
//
//
//
//
//
//
// ****************************************************************************
// This document is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html and Matthew 25:22 for details
//  (C) 1992-2010 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2010 Jérôme Forissier <jerome@taodyne.com>
//  (C) 2010 Catherine Burvelle <cathy@taodyne.com>
//  (C) 2010 Lionel Schaffhauser <lionel@taodyne.com>
//  (C) 2010 Taodyne SAS
// ****************************************************************************

// Integer arithmetic and comparisons
INFIX(AddInt,integer, integer,"+",integer, XL_RINT(XL_INT(l) + XL_INT(r)), "")
INFIX(SubInt,integer, integer,"-",integer, XL_RINT(XL_INT(l) - XL_INT(r)), "")
INFIX(MulInt,integer, integer,"*",integer, XL_RINT(XL_INT(l) * XL_INT(r)), "")
INFIX(DivInt,integer, integer,"/",integer, XL_RINT(XL_INT(l) / XL_INT(r)), "")
INFIX(RemInt,integer, integer,"rem",integer, XL_RINT(XL_INT(l) % XL_INT(r)), "")
INFIX(ModInt,integer, integer,"mod",integer, XL_RINT(xl_mod(l, r)), "")
INFIX(PowerInt, integer, integer, "^", integer, XL_RINT(xl_pow(l,r)), "")

INFIX(LShift, integer, integer,"<<",integer, XL_RINT(XL_INT(l) << XL_INT(r)), "")
INFIX(RShift, integer, integer,">>",integer, XL_RINT(XL_INT(l) >> XL_INT(r)), "")

INFIX(And, integer, integer, "and", integer, XL_RINT(XL_INT(l) & XL_INT(r)), "")
INFIX(Or, integer, integer, "or", integer, XL_RINT(XL_INT(l) | XL_INT(r)), "")
INFIX(Xor, integer, integer, "xor", integer, XL_RINT(XL_INT(l) ^ XL_INT(r)), "")

INFIX(LTInt, boolean, integer, "<", integer, XL_RBOOL(XL_INT(l) < XL_INT(r)), "")
INFIX(GTInt, boolean, integer, ">", integer, XL_RBOOL(XL_INT(l) > XL_INT(r)), "")
INFIX(LEInt, boolean, integer, "<=", integer, XL_RBOOL(XL_INT(l) <= XL_INT(r)), "")
INFIX(GEInt, boolean, integer, ">=", integer, XL_RBOOL(XL_INT(l) >= XL_INT(r)), "")
INFIX(NEInt, boolean, integer, "<>", integer, XL_RBOOL(XL_INT(l) != XL_INT(r)), "")
INFIX(EQInt, boolean, integer, "=", integer, XL_RBOOL(XL_INT(l) == XL_INT(r)), "")

PREFIX(NegateInt, integer, "-", PARM(x, integer), XL_RINT(-x), "")
PREFIX(BitwiseNotInt, integer, "not", PARM(x, integer), XL_RINT(~x), "")

// Percents
POSTFIX(PercentInt, real, PARM(x, integer), "%", XL_RREAL(x / 100.0), "")
POSTFIX(PercentReal, real, PARM(x, real), "%", XL_RREAL(x / 100.0), "")

// Real arithmetic and comparisons
INFIX(AddReal, real, real, "+", real, XL_RREAL(XL_REAL(l) + XL_REAL(r)), "")
INFIX(SubReal, real, real, "-", real, XL_RREAL(XL_REAL(l) - XL_REAL(r)), "")
INFIX(MulReal, real, real, "*", real, XL_RREAL(XL_REAL(l) * XL_REAL(r)), "")
INFIX(DivReal, real, real, "/", real, XL_RREAL(XL_REAL(l) / XL_REAL(r)), "")
INFIX(RemReal, real, real, "rem", real, XL_RREAL(fmod(XL_REAL(l), XL_REAL(r))), "")
INFIX(ModReal, real, real, "mod", real, XL_RREAL(xl_modf(l,r)), "")
INFIX(PowRealInt, real, real, "^", integer, XL_RREAL(xl_powf(l,r)), "")
INFIX(PowReal, real, real, "^", real, XL_RREAL(pow(XL_REAL(l), XL_REAL(r))), "")

INFIX(LTReal, boolean, real, "<", real, XL_RBOOL(XL_REAL(l) < XL_REAL(r)), "")
INFIX(GTReal, boolean, real, ">", real, XL_RBOOL(XL_REAL(l) > XL_REAL(r)), "")
INFIX(LEReal, boolean, real, "<=", real, XL_RBOOL(XL_REAL(l) <= XL_REAL(r)), "")
INFIX(GEReal, boolean, real, ">=", real, XL_RBOOL(XL_REAL(l) >= XL_REAL(r)), "")
INFIX(NEReal, boolean, real, "<>", real, XL_RBOOL(XL_REAL(l) != XL_REAL(r)), "")
INFIX(EQReal, boolean, real, "=", real, XL_RBOOL(XL_REAL(l) == XL_REAL(r)), "")

PREFIX(Negate, real, "-", PARM(r, real), XL_RREAL(-r), "")
PREFIX(Sin, real, "sin", PARM(x, real), XL_RREAL(sin(x)), "")
PREFIX(Cos, real, "cos", PARM(x, real), XL_RREAL(cos(x)), "")
PREFIX(Tan, real, "tan", PARM(x, real), XL_RREAL(tan(x)), "")
PREFIX(ArcSin, real, "asin", PARM(x, real), XL_RREAL(asin(x)), "")
PREFIX(ArcCos, real, "acos", PARM(x, real), XL_RREAL(acos(x)), "")
PREFIX(ArcTan, real, "atan", PARM(x, real), XL_RREAL(atan(x)), "")
PREFIX(ArcTan2, real, "atan", PARM(y, real) PARM(x, real), XL_RREAL(atan2(y,x)), "")
PREFIX(Exp, real, "exp", PARM(x, real), XL_RREAL(exp(x)), "")
PREFIX(ExpMinus1, real, "expm1", PARM(x, real), XL_RREAL(expm1(x)), "")
PREFIX(Log, real, "log", PARM(x, real), XL_RREAL(log(x)), "")
PREFIX(Log2, real, "log2", PARM(x, real), XL_RREAL(log2(x)), "")
PREFIX(Log10, real, "log10", PARM(x, real), XL_RREAL(log10(x)), "")
PREFIX(LogPlus1, real, "log1p", PARM(x, real), XL_RREAL(log1p(x)), "")
PREFIX(PiConstant, real, "pi", , XL_RREAL(M_PI), "")

// Boolean operations
INFIX(AndBool, boolean, boolean, "and", boolean, XL_RBOOL(XL_BOOL(l) & XL_BOOL(r)), "")
INFIX(OrBool, boolean, boolean, "or", boolean, XL_RBOOL(XL_BOOL(l) | XL_BOOL(r)), "")
INFIX(XorBool, boolean, boolean, "xor", boolean, XL_RBOOL(XL_BOOL(l) ^ XL_BOOL(r)), "")
PREFIX(NotBool, boolean, "not", PARM(x, boolean), XL_RBOOL(!x), "")

INFIX(NEBool, boolean, boolean, "<>", boolean, XL_RBOOL(XL_BOOL(l) != XL_BOOL(r)), "")
INFIX(EQBool, boolean, boolean, "=", boolean, XL_RBOOL(XL_BOOL(l) == XL_BOOL(r)), "")

// Text operations
INFIX(TextConcatenate, text, text, "&", text, XL_RTEXT(XL_TEXT(l) + XL_TEXT(r)), "")
INFIX(LTText, boolean, text, "<", text, XL_RBOOL(XL_TEXT(l) < XL_TEXT(r)), "")
INFIX(GTText, boolean, text, ">", text, XL_RBOOL(XL_TEXT(l) > XL_TEXT(r)), "")
INFIX(LEText, boolean, text, "<=", text, XL_RBOOL(XL_TEXT(l) <= XL_TEXT(r)), "")
INFIX(GEText, boolean, text, ">=", text, XL_RBOOL(XL_TEXT(l) >= XL_TEXT(r)), "")
INFIX(NEText, boolean, text, "<>", text, XL_RBOOL(XL_TEXT(l) != XL_TEXT(r)), "")
INFIX(EQText, boolean, text, "=", text, XL_RBOOL(XL_TEXT(l) == XL_TEXT(r)), "")


// Conversions
PREFIX(IntToReal,  real, "real", PARM(x, integer), XL_RREAL((real_t) x), "")
PREFIX(TextToReal, real, "real", PARM(x, text), XL_RREAL(xl_text2real(x)), "")
PREFIX(RealToInt, integer, "integer", PARM(x, real), XL_RINT((integer_t) x), "")
PREFIX(TextToInt, integer, "integer", PARM(x, text), XL_RINT(xl_text2int(x)), "")
PREFIX(IntToText, text, "text", PARM(x, integer), XL_RTEXT((text) x), "")
PREFIX(RealToText, text, "text", PARM(x, real), XL_RTEXT((text) x), "")

// Time computations
PREFIX(TimeHours, integer, "hours", PARM(t, integer), XL_RTIME(tm.tm_hour), "")
PREFIX(TimeMinutes, integer, "minutes", PARM(t, integer), XL_RTIME(tm.tm_min), "")
PREFIX(TimeSeconds, integer, "seconds", PARM(t, integer), XL_RTIME(tm.tm_sec), "")
PREFIX(TimeYear, integer, "year", PARM(t, integer), XL_RTIME(tm.tm_year + 1900), "")
PREFIX(TimeMonth, integer, "month", PARM(t, integer), XL_RTIME(tm.tm_mon), "")
PREFIX(TimeMonthDay, integer, "day", PARM(t, integer), XL_RTIME(tm.tm_mday), "")
PREFIX(TimeWeekDay, integer, "week_day", PARM(t, integer), XL_RTIME(tm.tm_wday), "")
PREFIX(TimeYearDay, integer, "year_day", PARM(t, integer), XL_RTIME(tm.tm_yday), "")

// Return hour, minutes, seconds for the current time
PREFIX(SystemTime, integer, "system_time",, XL_RINT(xl_time(1)), "")
PREFIX(SystemHours, integer, "hours",, XL_RCTIME(tm.tm_hour, 10), "")
PREFIX(SystemMinutes, integer, "minutes",, XL_RCTIME(tm.tm_min, 2), "")
PREFIX(SystemSeconds, integer, "seconds",, XL_RCTIME(tm.tm_sec, 0.5), "")
PREFIX(SystemYear, integer, "year",, XL_RCTIME(tm.tm_year + 1900, 10), "")
PREFIX(SystemMonth, integer, "month",, XL_RCTIME(tm.tm_mon, 10), "")
PREFIX(SystemMonthDay, integer, "day",, XL_RCTIME(tm.tm_mday, 10), "")
PREFIX(SystemWeekDay, integer, "week_day",, XL_RCTIME(tm.tm_wday, 10), "")
PREFIX(SystemYearDay, integer, "year_day",, XL_RCTIME(tm.tm_yday, 10), "")

// Random number generator
PREFIX(RandomNumber, real, "random", , XL_RREAL(xl_random(0.0, 1.0)), "")
PREFIX(RandomNumber2, real, "random", PARM(low, real) PARM(high, real),
       XL_RREAL(xl_random(XL_REAL(low), XL_REAL(high))), "")
PREFIX(RandomNumber2i, integer, "random", PARM(low,integer) PARM(high,integer),
       XL_RINT(xl_random(XL_INT(low), XL_INT(high))), "")

NAME(true);
NAME(false);

TYPE(boolean);
TYPE(integer);
TYPE(real);
TYPE(text);
TYPE(character);


// ============================================================================
//
//    From graphics.tbl
//
// ============================================================================

PREFIX(PageLabel,   text,     "page_label", ,   RTAO(pageLabel(self)), "")
PREFIX(PageId,      integer,  "page_number", ,  RTAO(pageNumber(self)), "")
PREFIX(PageCount,   integer,  "page_count", ,   RTAO(pageCount(self)), "")
PREFIX(PageWidth,   real,     "page_width", ,   RTAO(pageWidth(self)), "")
PREFIX(PageHeight,  real,     "page_height", ,  RTAO(pageHeight(self)), "")
PREFIX(FrameWidth,  real,     "frame_width", ,  RTAO(frameWidth(self)), "")
PREFIX(FrameHeight, real,     "frame_height", , RTAO(frameHeight(self)), "")
PREFIX(FrameDepth,  real,     "frame_depth", ,  RTAO(frameDepth(self)), "")
PREFIX(WindowWidth, real,     "window_width", , RTAO(windowWidth(self)), "")
PREFIX(WindowHeight,real,     "window_height", ,RTAO(windowHeight(self)), "")
PREFIX(DaySeconds,  real,     "time", ,         RTAO(time(self)), "")
PREFIX(PageSeconds, real,     "page_time", ,    RTAO(pageTime(self)), "")


// ============================================================================
//
//   Error management
//
// ============================================================================

PREFIX(ErrorMessage, tree, "error", PARM(m, text) PARM(s, tree),
       return Tao::Widget::formulaRuntimeError(self, m, &s), "")
PREFIX(ErrorMessage0, tree, "error", PARM(m, text),
       return Tao::Widget::formulaRuntimeError(self, m, NULL), "")

PREFIX(ErrorMessageM, tree, "error_message_box", PARM(m, text) PARM(s, tree),
       RTAO(runtimeError(self, m, &s)), "")
PREFIX(ErrorMessageM0, tree, "error_message_box", PARM(m, text),
       RTAO(runtimeError(self, m, NULL)), "")



// ============================================================================
//
//   Unit conversions
//
// ============================================================================

POSTFIX(FromCm,   real, PARM(x, real), "cm", RTAO(fromCm(self, x)), "")
POSTFIX(FromMm,   real, PARM(x, real), "mm", RTAO(fromMm(self, x)), "")
POSTFIX(FromInch, real, PARM(x, real), "inch", RTAO(fromIn(self, x)), "")
POSTFIX(FromPt,   real, PARM(x, real), "pt", RTAO(fromPt(self, x)), "")
POSTFIX(FromPx,   real, PARM(x, real), "px", RTAO(fromPx(self, x)), "")

