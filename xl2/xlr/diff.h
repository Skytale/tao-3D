#ifndef DIFF_H
#define DIFF_H
// ****************************************************************************
//  diff.h                                                          XLR project
// ****************************************************************************
//
//   File Description:
//
//     Definitions for tree comparison and transformation algorithms.
//
//
//
//
//
//
//
//
// ****************************************************************************
// This document is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html and Matthew 25:22 for details
//  (C) 1992-2010 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2010 Jerome Forissier <jerome@taodyne.com>
//  (C) 2010 Taodyne SAS
// ****************************************************************************

#include "base.h"
#include "tree.h"
#include <list>
#include <iostream>


XL_BEGIN

// ============================================================================
//
//    The types being defined or used to manipulate tree diffs
//
// ============================================================================

struct TreeDiff;                  // The main class to do diff operations
struct NodeTable;                 // A table of tree nodes indexed by ID
struct Matching;                  // To associate nodes between T1 and T2
struct EditScript;                // A list of edit operations (the diff result)

// ============================================================================
//
//    The TreeDiff class
//
// ============================================================================

struct TreeDiff
// ----------------------------------------------------------------------------
//   All you need to compare and patch parse trees
// ----------------------------------------------------------------------------
{
    TreeDiff (Tree *t1, Tree *t2);
    virtual ~TreeDiff();

    bool Diff();
    bool Diff(std::ostream& os);

protected:

    void     FastMatch();
    void     AlignChildren(node_id w, node_id x);
    unsigned FindPos(node_id x);
    void     DoEditScript();

    Tree_p       t1;
    Tree_p       t2;
    NodeTable &  nodes1;
    NodeTable &  nodes2;
    Matching &   matching;
    EditScript * escript;
};

std::ostream&
operator <<(std::ostream &out, XL::NodeTable &m);

std::ostream&
operator <<(std::ostream &out, XL::Matching &m);


// ============================================================================
//
//    The EditOperation and EditScript classes
//
// ============================================================================

struct EditOperation
// ----------------------------------------------------------------------------
//   An operation on a tree. Edit scripts generated by TreeDiff are made of EO.
// ----------------------------------------------------------------------------
{
    EditOperation() {}
    virtual ~EditOperation() {}

    struct Base;
    struct Insert;
    struct Delete;
    struct Update;
    struct Move;
};


struct EditOperation::Base
// ----------------------------------------------------------------------------
//   Unspecified edit operation.
// ----------------------------------------------------------------------------
{
    Base() {}
    virtual ~Base() {}

    virtual void Apply(NodeTable &table) = 0;
};


struct EditOperation::Insert : EditOperation::Base
// ----------------------------------------------------------------------------
//   The operation of inserting a new leaf node into a tree.
// ----------------------------------------------------------------------------
{
    Insert(Tree *leaf, node_id parent, unsigned pos):
        leaf(leaf), parent(parent), pos(pos) { assert(leaf); }
    virtual ~Insert() {}

    virtual void Apply(NodeTable &table);

    Tree_p   leaf;
    node_id  parent;
    unsigned pos;
};


struct EditOperation::Delete : EditOperation::Base
// ----------------------------------------------------------------------------
//   The operation of deleting a leaf node of a tree.
// ----------------------------------------------------------------------------
{
    Delete(node_id leaf): leaf(leaf) {}
    virtual ~Delete() {}

    virtual void Apply(NodeTable &table);

    node_id leaf;
};


struct EditOperation::Update : EditOperation::Base
// ----------------------------------------------------------------------------
//   The operation of inserting a new leaf node into a tree.
// ----------------------------------------------------------------------------
{
    Update(node_id leaf, Tree *value): leaf(leaf), value(value)
        { assert(value); }
    virtual ~Update() {}

    virtual void Apply(NodeTable &table);

    node_id leaf;
    Tree_p  value;
};


struct EditOperation::Move : EditOperation::Base
// ----------------------------------------------------------------------------
//   The operation of moving a subtree from one parent to another.
// ----------------------------------------------------------------------------
{
    Move(node_id subtree, node_id parent, unsigned pos):
        subtree(subtree), parent(parent), pos(pos) {}
    virtual ~Move() {}

    virtual void Apply(NodeTable &table);

    node_id  subtree;
    node_id  parent;
    unsigned pos;
};


typedef std::list<EditOperation::Base *> EditScriptBase;


struct EditScript : EditScriptBase
// ----------------------------------------------------------------------------
//   An ordered list of edit operations.
// ----------------------------------------------------------------------------
{
    EditScript() {}
    virtual ~EditScript() {}

    Tree *  Apply(Tree *tree);
};


std::ostream&
operator <<(std::ostream &out, XL::EditOperation::Insert &op);

std::ostream&
operator <<(std::ostream &out, XL::EditOperation::Delete &op);

std::ostream&
operator <<(std::ostream &out, XL::EditOperation::Update &op);

std::ostream&
operator <<(std::ostream &out, XL::EditOperation::Move &op);

std::ostream&
operator <<(std::ostream &out, XL::EditScript &s);

XL_END

#endif // DIFF_H
