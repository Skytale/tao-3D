// ****************************************************************************
//  options.tbl                                                     XLR project
// ****************************************************************************
// 
//   File Description:
// 
//     This table defines the options known to the compiler.
// 
// 
// 
// 
// 
// 
// 
// 
// ****************************************************************************
// This document is released under the GNU General Public License.
// See http://www.gnu.org/copyleft/gpl.html and Matthew 25:22 for details
//  (C) 1992-2010 Christophe de Dinechin <christophe@taodyne.com>
//  (C) 2010 Jerome Forissier <jerome@taodyne.com>
//  (C) 2010 Taodyne SAS
// ****************************************************************************
// Keywords:
// OPTVAR defines an option-controlling variable
// OPTION defines an option and associated code
// TRACE defines a trace
//
// Only the beginning of the option is checked for a match. The largest
// matching option is considered good, so short options should be first


// ============================================================================
// 
//    XLR options
// 
// ============================================================================

// Getting help on options
OPTION(help, "List usage information", Usage(argv))

// Rendering control
OPTVAR(stylesheet, text, "xl")
OPTION(style, "Select the stylesheet",
       stylesheet = STRING;
       Renderer::renderer->SelectStyleSheet(stylesheet + ".stylesheet"))

// Parse only
OPTVAR(parseOnly, bool, false)
OPTION(parse, "Only parse file, do not compile nor run", parseOnly = true)
OPTVAR(showGV, bool, false)
OPTION(showgv, "Generate Graphviz output", showGV = true)
OPTVAR(showSource, bool, false)
OPTION(show, "Show source file", showSource = true)
OPTVAR(fileLoad, bool, false)
OPTION(fileload, "Show paths as files are loaded", fileLoad = true)

// Do not load builtins.xl
OPTVAR(builtins, bool, true)
OPTION(nobuiltins, "Do not load builtins", builtins = false)
OPTION(nb, "Short form for -nobuiltins", builtins = false)

// Read or write from serialized format
OPTVAR(readSerialized, bool, false)
OPTION(read, "Read file from serialized input", readSerialized = true)
OPTVAR(writeSerialized, bool, false)
OPTION(write, "Write file to serialized output", writeSerialized = true)

// Compile only
OPTVAR(compileOnly, bool, false)
OPTION(compile, "Only compile file, do not run", compileOnly = true)

// Debug controlling options
OPTVAR(debug, bool, false)
OPTION(g, "Compile with debugging information", debug=true)

// Warning-level option
OPTVAR(warning_level, uint, 0)
OPTION(w, "Set the warning level, from 0 to 5",
       warning_level = INTEGER(0, 5))
OPTION(pedantic, "Set the maximum warning level",
       warning_level = 5)

// Optimize level options - -O0 means interpreted, no pre-compilation
OPTVAR(optimize_level, uint, 1)
OPTION(O, "Set the optimization level, from 0 to 3",
       optimize_level = INTEGER(0, 3))
OPTVAR(verbose,bool,false)
OPTION(verbose, "Select more verbose error messages.", verbose = true)
OPTION(v, "Short form for -verbose.", verbose = true)

// Output file
OPTVAR(output_file, std::string, "")
OPTION(o, "Select output file", output_file = STRING)

// Debug controlling options
OPTVAR(doDiff, bool, false)
OPTION(diff, "Compute difference of two parse trees (you must give exactly two input files)", doDiff=true)


#ifdef TAO
// ============================================================================
// 
//   Tao options
// 
// ============================================================================

OPTVAR(prefer_opengl, bool, false)
OPTION(gl, "Prefer OpenGL for rendering", prefer_opengl = true)

TRACE(filesync)
TRACE(menus)
#endif // TAO

// Traces. The first ones must match the MzTrace definition in base.h
// We use lower-case names here to avoid duplicate definition and be able
// to reuse the IFTRACE macro as is.
TRACE(memory)
TRACE(rewrite)
TRACE(eval)
TRACE(code)
TRACE(typecheck)
TRACE(labels)
TRACE(builtins)
TRACE(closure)
TRACE(diff)

// Undefine for next use...
#undef OPTVAR
#undef OPTION
#undef TRACE
