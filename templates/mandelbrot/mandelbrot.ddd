// ****************************************************************************
//  mandelbrot.ddd                                                  Tao project
// ****************************************************************************
// 
//   File Description:
// 
//     Illustration of the Mandelbrot set with Tao Presentations
// 
// 
// 
// 
// 
// 
// 
// 
// ****************************************************************************
// Copyright Taodyne SAS, 2010
// Contributors:
//   Christophe de Dinechin <christophe@taodyne.com>
//   Jerome Forissier <jerome@taodyne.com>
//   Baptiste Soulisse <baptiste.soulisse@taodyne.com>
//
// <contact@taodyne.com>
//
// This software is a computer program whose purpose is to serve as a
// document template for the Tao Presentations application.
//
// This software is governed by the CeCILL license under French law and
// abiding by the rules of distribution of free software.  You can  use,
// modify and/ or redistribute the software under the terms of the CeCILL
// license as circulated by CEA, CNRS and INRIA at the following URL
// "http://www.cecill.info".
//
// As a counterpart to the access to the source code and  rights to copy,
// modify and redistribute granted by the license, users are provided only
// with a limited warranty  and the software's author,  the holder of the
// economic rights,  and the successive licensors  have only  limited
// liability.
//
// In this respect, the user's attention is drawn to the risks associated
// with loading,  using,  modifying and/or developing or reproducing the
// software by the user in light of its specific status of free software,
// that may mean  that it is complicated to manipulate,  and  that  also
// therefore means  that it is reserved for developers  and  experienced
// professionals having in-depth computer knowledge. Users are therefore
// encouraged to load and test the software's suitability as regards their
// requirements in conditions enabling the security of their systems and/or
// data to be ensured and,  more generally, to use and operate it in the
// same conditions as regards security.
//
// The fact that you are presently reading this means that you have had
// knowledge of the CeCILL license and that you accept its terms.
// ****************************************************************************


import Animate
import Slides
import KeyboardTheme


// ============================================================================
// 
//    General description of the slide
// 
// ============================================================================


// Pick the "Keyboard" theme
theme "Keyboard"

// Disable selection rectangle
enable_selection_rectangle false

// Do not draw any selection when we click on the Mandelbrot picture
draw_selection x, y, w, h -> false

picture_slide "Mandelbrot",
// ----------------------------------------------------------------------------
//    First slide is a picture slide showing the Mandelbrot set
// ----------------------------------------------------------------------------
    draw_mandelbrot
    draw_help
    draw_info


// ============================================================================
// 
//   Shader program
// 
// ============================================================================
//  The shader program is where we perform the actual computation of the
//  Mandelbrot set. The vertex shader records the position.
//  The fragment shader (aka pixel shader) is where we perform the
//  actual computation for each pixel.


mandelbrot_shader ->
// ----------------------------------------------------------------------------
//    Setup the OpenGL shader for the Mandelbrot set
// ----------------------------------------------------------------------------
    // Set a empty texture in order to define the texture coordinates
    texture ""

    shader_program

        vertex_shader <<
            varying vec3 position;
            void main()
            {
                gl_Position = ftransform();

                // Compute position according to texture coordinates
                position = vec3(gl_MultiTexCoord0 - 0.5) * 3.0;
            }
        >>

        fragment_shader <<

            // Parameters set by the outside program (shader_set statements)
            uniform float maxIter;
            uniform float scaling;
            uniform float centerX;
            uniform float centerY;

            varying vec3 position;

            void main()
            {
                // Position of the current coordiantes
                float c_real = position.x / scaling + centerX;
                float c_imag = position.y / scaling + centerY;
                vec2 c = vec2(c_real, c_imag);
                vec2 z = c;

                // Configuration of the colors
                vec4  insideColor  = vec4(0.0, 0.0, 0.0, 1.0);
                vec4  middleColor1 = vec4(1.0, 1.0, 0.0, 1.0);
                float threshold1   = 0.1;
                vec4  middleColor2 = vec4(1.0, 0.0, 0.0, 1.0);
                float threshold2   = 0.5;
                vec4  outerColor   = vec4(1.0, 1.0, 1.0, 1.0);

                // Pixel color is based on the speed at which
                // points outside of the set diverge
                gl_FragColor = insideColor;

                // Loop, checking for divergence
                for (int i = 0; i < int(maxIter); i++)
                {
                    z = vec2(z.x * z.x - z.y * z.y, 2.0 * z.x * z.y) + c;
                    if (dot(z, z) > 4.0)
                    {
                        float v = float(i)/maxIter;
                        float frac;

                        if (v < threshold1)
                        {
                            frac = v / threshold1;
                            gl_FragColor = mix(outerColor, middleColor2, frac);
                        }
                        else if (v < threshold2)
                        {
                            frac = (v - threshold1) / (threshold2 - threshold1);
                            gl_FragColor = mix(middleColor2,middleColor1,frac);
                        }
                        else
                        {
                            frac = (v - threshold2) / (1.0 - threshold2);
                            gl_FragColor = mix(middleColor1,insideColor,frac);
                        }
                            
                        break;
                    }
                }
            }
        >>

    // Maximum number of iterations for each point
    shader_set maxIter := 200


// ============================================================================
// 
//   Slide animation
// 
// ============================================================================


// Current values for center position and scaling factor
center_x -> 0.0
center_y -> 0.0
mandelbrot_scale -> 1.0

// Target values for center position and scaling factor
tgt_center_x -> 0.0
tgt_center_y -> 0.0
tgt_mandelbrot_scale -> 1.0

// Information on current mouse position
info_x -> 0.0
info_y -> 0.0

// Size based on the size of the slide (we display in a square)
sz -> slide_height
sf -> sz * 0.25 * mandelbrot_scale

draw_mandelbrot ->
// ----------------------------------------------------------------------------
//    How to draw the Mandelbrot set
// ----------------------------------------------------------------------------
    locally
        // Select the Mandelbrot shader program
        mandelbrot_shader

        // Set the current shader's uniform variables
        shader_set centerX := center_x
        shader_set centerY := center_y
        shader_set scaling := mandelbrot_scale

        // Draw the rounded rectangle displaying the set
        // We make it an "active_widget" so that it reacts to clicks
        translate -0.35 * sz, -0.05 * sz, 0
        active_widget
            rounded_rectangle 0, 0, 0.80 * sz, 0.80 * sz, 20

            on_click
                // When we click on the rectangle, adjust center position
                tgt_center_x := center_x + mouse_x / sf
                tgt_center_y := center_y + mouse_y / sf
                if alt_modifier then
                    tgt_mandelbrot_scale := tgt_mandelbrot_scale / 2
                else
                    tgt_mandelbrot_scale := tgt_mandelbrot_scale * 2
                refresh 0.0

            on_mouseover
                // Display current mouse coordinates
                info_x := center_x + mouse_x / sf
                info_y := center_y + mouse_y / sf

        // Animate coordinates smoothly
        interpolate 0.1, tgt_center_x, center_x
        interpolate 0.1, tgt_center_y, center_y
        interpolate 0.1, tgt_mandelbrot_scale, mandelbrot_scale


draw_help ->
// ----------------------------------------------------------------------------
//    Draw a text box displaying the localized help text
// ----------------------------------------------------------------------------
    text_box 0, 0, slide_width, slide_height,
        align_center
        vertical_align 0.98
        font "Droid Sans", 20
        color "darkblue"
        help_text tao_language

help_text "fr" -> text "Cliquez pour approcher, Alt-Click pour éloigner"
help_text Other -> text "Click to zoom in, Alt-Click to zoom out"

draw_info ->
// ----------------------------------------------------------------------------
//    Draw the text box on the right displaying info about Mandelbrot
// ----------------------------------------------------------------------------
    locally
        color "white", 60%
        rounded_rectangle 0.50 * sz, -0.05 * sz, 0.45 * sz, 0.75 * sz, 20
        text_box 0.50 * sz, -0.05 * sz, 0.40 * sz, 0.70 * sz,
            vertical_align 0.2
            align 0.5

            theme_style theme, slide_master, "story"
            info_text tao_language
            line_break
            italic
            text "z' = z² + C"

        text_box 0.50 * sz, -0.07 * sz, 0.40 * sz, 0.70 * sz,
            vertical_align 0.9
            font "Arial", 24, italic
            color "black", 40%
            line T:text -> text T; line_break
            line "Center X=" & text center_x
            line "Center Y=" & text center_y
            line "Mouse X=" & text info_x
            line "Mouse Y=" & text info_y
            line "zoom " & text mandelbrot_scale
            if mandelbrot_scale > 125000 then
                color "red", 80%
                line "Pixellization (float precision)"
            refresh 0.1

info_text "fr" -> text "Une fractale définie par l'équation itérative "
info_text Other -> text "A fractal defined by iterative equation "
