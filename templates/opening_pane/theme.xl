// ****************************************************************************
//  opening_pane.ddd                                                Tao project
// ****************************************************************************
//
//   File Description:
//
//     background for opening_pane template.
//
//
//
//
//
//
//
//
// ****************************************************************************
// Copyright Taodyne SAS, 2011
// Contributors:
//   Catherine Burvelle <cathy@taodyne.com>
//   Christophe de Dinechin <christophe@taodyne.com>
//   Baptiste Soulisse <baptiste.soulisse@taodyne.com>
//
// <contact@taodyne.com>
//
// This software is a computer program whose purpose is to serve as a
// document template for the Tao Presentations application.
//
// This software is governed by the CeCILL license under French law and
// abiding by the rules of distribution of free software.  You can  use,
// modify and/ or redistribute the software under the terms of the CeCILL
// license as circulated by CEA, CNRS and INRIA at the following URL
// "http://www.cecill.info".
//
// As a counterpart to the access to the source code and  rights to copy,
// modify and redistribute granted by the license, users are provided only
// with a limited warranty  and the software's author,  the holder of the
// economic rights,  and the successive licensors  have only  limited
// liability.
//
// In this respect, the user's attention is drawn to the risks associated
// with loading,  using,  modifying and/or developing or reproducing the
// software by the user in light of its specific status of free software,
// that may mean  that it is complicated to manipulate,  and  that  also
// therefore means  that it is reserved for developers  and  experienced
// professionals having in-depth computer knowledge. Users are therefore
// encouraged to load and test the software's suitability as regards their
// requirements in conditions enabling the security of their systems and/or
// data to be ensured and,  more generally, to use and operate it in the
// same conditions as regards security.
//
// The fact that you are presently reading this means that you have had
// knowledge of the CeCILL license and that you accept its terms.
// ****************************************************************************

import Animate 1.0


// ============================================================================
//
//                                 CONFIGURATION
//
// ============================================================================


font "op_text" -> font "Baskerville", 58
font "op_keyword" -> font "Arial Rounded MT Bold", 58
color "story" -> color "white"
line_color "story"-> line_color "white"

// Logical dimensions for the slide. You can put anything you want here,
// but the aspect ratio should match that of the background picture and be
// close to the aspect ratio of the screens you are going to use.
// This will be used to define the logical coordinates of anything that
// follows "scale_contents".
slide_width -> 1920.0
slide_height -> 1200.0

// ============================================================================
//
//                                  SLIDES
//
// ============================================================================

slide T:text, Body ->
    page T,
        compute_smooth_step
        background -1000
        scale_contents
        locally Body

// ============================================================================
//
//                                 FUNCTIONS
//
// ============================================================================


op_story Start:real,End:real,Hue:real,X:real,Y:real,W:real,H:real,Body ->
// ----------------------------------------------------------------------------
//   Draw a story box
// ----------------------------------------------------------------------------
// The box is shown from step "Start" to step "End",
// The background color has the given "Hue".
// The box is located in "X", "Y" with size "W"x"H"
// The box displays the "Body"
    if smooth_step >= Start-1 and smooth_step <= End+1 then
        locally
            SW->1.0
            SH->1.0

            if W > H then
                SW := fade_between(smooth_step, Start, End)
                SH := 1.0
            else
                SW := 1.0
                SH := fade_between(smooth_step, Start, End)

            if SW > 0.01 and SH > 0.01 then
                color_hsv Hue, 0.8, 0.4, 0.5
                rounded_rectangle X, Y, W*SW+20, H*SH+20, 20

                color "story"
                frame_texture 2*W*SW, 2*H*SH,
                    text_box 0, 0, 2*W, 2*H,
                        align 0
                        vertical_align 0.5
                        Body
                rectangle X, Y, W*SW, H*SH


op_bullet Step:real, T:text ->
// ----------------------------------------------------------------------------
//   Draw a given bullet
// ----------------------------------------------------------------------------
// The text "T" appears after the step Step
    paragraph_break
    show fade_at(smooth_step, Step)
    font "op_text"
    anchor
        translate -20, 12, 0
        rotatey 150 * page_time
        color "story", 0.6
        line_color "story"
        line_width 1.5
        circle 0, 0, 9
    text T


op_keyword T:text ->
// ----------------------------------------------------------------------------
//   Display the keywords for a given box
// ----------------------------------------------------------------------------
    font "op_keyword"
    text T


op_text T:text ->
// ----------------------------------------------------------------------------
//   Display text in a glass box
// ----------------------------------------------------------------------------
    font "op_text"
    text T

// ============================================================================
//
//                                 BACKGROUND
//
// ============================================================================
watermark -> "white"

spiral X, Y, Z ->
// ----------------------------------------------------------------------------
//   Draw a spiral
// ----------------------------------------------------------------------------
    locally
        color "transparent"
        line_color watermark
        translate X, Y, Z
        scale3 0.4
        rotatez 20 * time
        path
            cubic_to  20,  50, 0,      50,   0, 0,      25, -25, 0
            cubic_to   0, -50, 0,     -50, -10, 0,     -30,  30, 0
            cubic_to   0,  80, 0,      50,  50, 0,      60,  30, 0
            cubic_to  80,   0, 0,      70, -50, 0,      50, -60, 0

// ----------------------------------------------------------------------------
//   Draw 3 kinds of flowers
// ----------------------------------------------------------------------------
petal N ->
    locally
        rotatez N*72
        circle 15, 0, 7

flower X, Y, Z ->
    locally
        line_color "transparent"
        translate X, Y, Z
        rotatez 20 * time
        color watermark
        circle 0, 0, 4
        petal with 0..4

petal2 N ->
    locally
        rotatez N*72
        path
            cubic_to 50, 50, 0,     50, -50, 0,     0, 0, 0


flower2 X, Y, Z ->
    locally
        translate X, Y, Z
        color watermark
        line_color "transparent"
        petal2 with 0..4

petal3 N ->
    locally
        rotatez N*72
        translatex 10
        path
            cubic_to 50, 50, 0,     50, -50, 0,     0, 0, 0

flower3 X, Y, Z ->
    locally
        translate X, Y, Z
        line_color "transparent"
        color watermark
        circle 0, 0, 6
        color "transparent"
        line_color watermark
        petal3 with 0..4

arabesque X, Y, Z ->
// ----------------------------------------------------------------------------
//   Draw an arabesque
// ----------------------------------------------------------------------------
    locally
        translate X, Y, Z
        color watermark
        circle 5,-1,5
        path
            cubic_to   20,   50, 0,      50,    0, 0,      25,  -25, 0
            cubic_to    0,  -50, 0,     -50,  -10, 0,     -30,   30, 0
            cubic_to    0,   80, 0,      50,   50, 0,      60,   30, 0
            cubic_to   80,    0, 0,      65,  -50, 0,      45,  -60, 0
            cubic_to  -50, -120, 0,    -270,  -50, 0,    -300, -300, 0
            cubic_to -260,  -60, 0,     -40, -130, 0,      50,  -75, 0
            cubic_to   85,  -50, 0,      95,    0, 0,      80,   30, 0
            cubic_to   60,   80, 0,     -20,   80, 0,     -40,   30, 0
            cubic_to  -55,  -15, 0,       0,  -55, 0,      25,  -30, 0
            cubic_to   50,    0, 0,      20,   50, 0,       0,    0, 0

fall tt:real, T:tree ->
// ----------------------------------------------------------------------------
//   Fall movement
// ----------------------------------------------------------------------------
    locally
        if sin (tt/3) > 0 then
            translatey (window_height + 100) / 2 * cos (tt/3)
            translatex 20 * sin (tt*2)
            rotatez 25 * cos (tt/2)
            T


// ----------------------------------------------------------------------------
//   Draw 2 kinds of leaf
// ----------------------------------------------------------------------------
leaf1 X, Y, Z ->
    locally
        translate X, Y, Z
        scale3 0.2
        line_color "transparent"
        color watermark
        path
            cubic_to -140, 100,0,    -250, -50,0,    -300,-50,0
            cubic_to -250,-100,0,    -150,-150,0,       0,  0,0

leaf2 X, Y, Z ->
    locally
        translate X, Y, Z
        scale3 0.2
        line_color "transparent"
        color watermark
        path
            cubic_to -140, 100,0,    -240, -60, 0,    -300, -50, 0
            cubic_to -250,-100,0,    -150,-150, 0,      20, -20, 0
            quad_to  -100,   0, 0,   -180, -60, 0
            quad_to   -90,  50, 0,      0,   0, 0

background Z ->
// ----------------------------------------------------------------------------
//   Draw the background in Z depth
// ----------------------------------------------------------------------------
    locally
        scale_background
        ztrans_background -10000
        show 0.3
        locally
            line_color "transparent"
            translate 0, -slide_height / 2, 0
            locally
                rotatez -35
                scale3 10
                leaf2 -25, 0, 0
                rotatez -60
                leaf2 -25, 0, 0
                rotatez -60
                leaf2 -25, 0, 0
            locally
                translatey 100
                color watermark
                circle   0, 0, 30
                circle 100, 0, 20
                rotatez 36
                circle  90, 0, 20
                rotatez 36
                circle  80, 0, 20
                rotatez 36
                circle  80, 0, 20
                rotatez 36
                circle  90, 0, 20
                rotatez 36
                circle 100, 0, 20

            locally
                rotatez 25
                arabesque 500, 400, 0
            locally
                translate -300, 570, 0
                rotatey 180
                rotatez 20
                arabesque 0, 0, 0

        flower2 -500, -150, 0
        flower2  500,  150, 0
        flower3  600, -500, 0
        flower3 -650, -500, 0
        flower3  300,  300, 0
        flower  -200,  400, 0
        flower  -450,  100, 0
        flower   250,  500, 0
        flower   450, -150, 0
        flower  -350, -250, 0


        fall time,
            rotatez 90
            leaf1 0, 0, 0

        fall time+15,
            translatex 300
            rotatez 90
            leaf1 0, 0, 0

        fall time+25,
            translatex -400
            rotatez 90
            leaf1 0, 0, 0

        fall time+10,
            translatex -600
            rotatez 90
            leaf1 0, 0, 0

        fall time+20,
            translatex 500
            rotatez 90
            leaf1 0, 0, 0


// ============================================================================
//
//                                 GENERAL
//
// ============================================================================

// Two ways to scale contents when resizing the window :
// For background pictures, we'd rather not see some white around them,
// so we scale to crop the picture ("max").
// For contents, on the other hand, we want to keep everything visible, so
// we scale to fit the contents ("min").
scale3 S:real -> scale S, S, S
background_scale -> max(window_width/slide_width, window_height/slide_height)
contents_scale -> min(window_width/slide_width, window_height/slide_height)
scale_background -> scale3 background_scale
scale_contents -> scale3 contents_scale

// Z translation without change in dimensions
ztrans_contents Z:real ->
    Z0 -> 6000.0
    Z0 := camera_position at 3
    translatez Z/contents_scale
    scale3 (Z0-Z)/Z0

ztrans_background Z:real ->
    Z0 -> 6000.0
    Z0 := camera_position at 3
    translatez Z/background_scale
    scale3 (Z0-Z)/Z0


// ============================================================================
//
//                            LANGUAGE MANAGEMENT
//
// ============================================================================

lang -> ""
Fr:text en En:text -> trx lang, En, Fr
En:text fr Fr:text -> trx lang, En, Fr
trx "", En:text, Fr:text -> trx tao_language, En, Fr
trx "fr", En:text, Fr:text -> Fr
trx Other:text, En:text, Fr:text -> En
french Body -> if lang = "fr" then Body
english Body -> if lang = "en" then Body
language L:text -> lang := L; refresh 0.1
