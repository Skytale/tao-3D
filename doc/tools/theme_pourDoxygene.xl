// Theme for TAO documentation
family_list -> "toto"
fn_syntaxes -> "titi"

groupname familyName:text ->
    import  familyName & ".xl"
    setText family_list, familyName
    writeln "/**"
    writeln " * @file " & familyName & ".c"
    writeln " */"
    import "all_documentation.xl"

docname fname:text, family:text, t:tree ->
/*|docname "docname", "documentation", do
        dsyntax <<docname fname:text, family:text, t:tree>>
        synopsis "The first documentation function to call."
        description <<This function installs the text_box and may handle some filters on the family parameter. It is mandatory to use this function first.>>
        parameters
        parameter "text", "fname", "The name of the function."
        parameter "text", "family", "The family of this function."
        parameter "tree", "t", "The rest of the description."
|*/
  if family = family_list then
    setText fn_syntax, ""
    writeln "/** "
    do t
    writeln "*/"
    writeln fname & "();"
    writeln fn_syntaxes & ";"

dsyntax text_syntax -> 
/*|docname "dsyntax", "documentation", do
        dsyntax <<dsyntax text_syntax>>
        synopsis "Documents the syntax of the function."
        description <<It shows the full syntax, you may use it more than once if you want to document multiple variant of one functionality.>>
        parameters
        parameter "text", "text_syntax", "The syntax."
|*/
    writeln "* @fn " & text_syntax
    appendText fn_syntaxes, text_syntax

synopsis text_synopsis -> 
/*|docname "synopsis", "documentation", do
        dsyntax <<synopsis text_synopsis>>
        synopsis "A very short description."
        description <<It is a short documentation of the funtion that can be shown in popup in an editor for example.>>
        parameters
        parameter "text", "text_synopsis", "The synopsis."
|*/
    writeln "* @brief " & text_synopsis

description text_desc -> 
/*|docname "description", "documentation", do
        dsyntax <<description text_desc>>
        synopsis "The full description."
        description <<This is the full description of the function. It should explain the behavior regarding the parameters value, errors, etc...>>
        parameters
        parameter "text", "text_desc", "The description."
|*/
    writeln "* "
    writeln "* " & text_desc


parameters -> 
/*|docname "parameters", "documentation", do
        dsyntax <<parameters>>
        synopsis "Introduction to parameter list."
        description <<It just add the parameters header to the text. Be careful it is a plural>>
        see "parameter"
|*/
    writeln "* "

parameter ptype, pname, pdesc -> 
/*|docname "parameter", "documentation", do
        dsyntax <<parameter ptype, pname, pdesc>>
        synopsis "A parameter description."
        description <<This is the detailed description of a parameter. >>
        parameters
        parameter "text", "ptype", "The parameter's type."
        parameter "text", "pname", "The parameter's name."
        parameter "text", "pdesc", "The parameter's description."
|*/
    writeln "* @param " & pname & " [" & ptype & "] " & pdesc

return_value rtype, rdesc -> 
/*|docname "return_value", "documentation", do
        dsyntax <<return_value rtype, rdesc>>
        synopsis "The return value description."
        description <<This is the detailed description of the returned value. >>
        parameters
        parameter "text", "rtype", "The return type."
        parameter "text", "rdesc", "The description."
|*/
    writeln "* @return [" & rtype & "] " & rdesc

see text_ref -> 
/*|docname "see", "documentation", do
        dsyntax <<see text_ref>>
        synopsis "A cross reference."
        description <<Point out an other place for more information. >>
        parameters
        parameter "text", "text_ref", "the reference."
|*/
    writeln "* @see " & text_ref

err etype, evalue ->
/*|docname "err", "documentation", do
        dsyntax <<err etype, evalue>>
        synopsis "Error description."
        description <<This is the detailed description of a potential reported error. >>
        parameters
        parameter "text", "etype", "The error's type."
        parameter "text", "edesc", "The error's description."
|*/
    writeln "* @exception  [" & etype & "] " & evalue
