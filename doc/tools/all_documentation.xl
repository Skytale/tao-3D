docname "docname", "documentation", do
    dsyntax <<docname fname:text, family:text, t:tree>>
    synopsis "The first documentation function to call."
    description <<This function installs the text_box and may handle some filters on the family parameter. It is mandatory to use this function first.>>
    parameters
    parameter "text", "fname", "The name of the function."
    parameter "text", "families", "The set of families this function belongs to."
    parameter "tree", "t", "The rest of the description."

docname "dsyntax", "documentation", do
    dsyntax <<dsyntax text_syntax>>
    synopsis "Documents the syntax of the function."
    description <<It shows the full syntax, you may use it more than once if you want to document multiple variant of one functionality.>>
    parameters
    parameter "text", "text_syntax", "The syntax."

docname "synopsis", "documentation", do
    dsyntax <<synopsis text_synopsis>>
    synopsis "A very short description."
    description <<It is a short documentation of the funtion that can be shown in popup in an editor for example.>>
    parameters
    parameter "text", "text_synopsis", "The synopsis."

docname "description", "documentation", do
    dsyntax <<description text_desc>>
    synopsis "The full description."
    description <<This is the full description of the function. It should explain the behavior regarding the parameters value, errors, etc...>>
    parameters
    parameter "text", "text_desc", "The description."

docname "parameters", "documentation", do
    dsyntax <<parameters>>
    synopsis "Introduction to parameter list."
    description <<It just add the parameters header to the text. Be careful it is a plural>>
    see "parameter"

docname "parameter", "documentation", do
    dsyntax <<parameter ptype, pname, pdesc>>
    synopsis "A parameter description."
    description <<This is the detailed description of a parameter. >>
    parameters
    parameter "text", "ptype", "The parameter's type."
    parameter "text", "pname", "The parameter's name."
    parameter "text", "pdesc", "The parameter's description."

docname "return_value", "documentation", do
    dsyntax <<return_value rtype, rdesc>>
    synopsis "The return value description."
    description <<This is the detailed description of the returned value. >>
    parameters
    parameter "text", "rtype", "The return type."
    parameter "text", "rdesc", "The description."

docname "see", "documentation", do
    dsyntax <<see text_ref>>
    synopsis "A cross reference."
    description <<Point out an other place for more information. >>
    parameters
    parameter "text", "text_ref", "the reference."

docname "err", "documentation", do
    dsyntax <<err etype, evalue>>
    synopsis "Error description."
    description <<This is the detailed description of a potential reported error. >>
    parameters
    parameter "text", "etype", "The error's type."
    parameter "text", "edesc", "The error's description."

docname "draw_chooser_match", "chooser", do
    dsyntax "draw_chooser_match  m1, m2, m3, x, y"
    synopsis "draw the matching"
    parameter "typem1", "m1", "m1 description"
    parameter "typem2", "m2", "m2 description"
    parameter "typem3", "m3", "m3 description"
    parameter "real", "x",  "the x-coordinate"
    parameter "real", "y",  "the y-coordinate"
    description <<It does something
        and maybe more.>>
    return_value "typeret", <<returns something else.>>
    see "the tutorial"
    err "a", "error value a"
    err "b", "error value b"
  
docname "mm", "code:unit", do {                 dsyntax <<x mm>>;                synopsis "Convert from mm to pixels" ;                 description <<Convert from mm to pixels>> ;                parameters;                parameter "real", "x", "The value in mm";                              return_value "real", "The value in pixel. ";                }          
docname "on", "mouse", do {                 dsyntax <<on action, code>>;                synopsis "Associate the specified code to the named action." ;                 description <<Associate the specified code to the named action. This code is then executed when the action occurs on the current shape.">> ;                parameters;                parameter "text", "action", <<The action name>>;                parameter "tree", "code", <<The code to execute>>;                }          
docname "cm", "code:unit", do {          dsyntax "x cm" ;         synopsis "Convert from cm to pixels";          description "Convert from cm to pixels";          parameters;          parameter "real", "x", "The value in cm";         return_value "real", "The value in pixel. ";         }
docname "px", "code:unit", do {                 dsyntax <<x px>>;                synopsis "Convert from pixel" ;                 description <<Convert from pixel (currently 1-1 mapping, could be based on scaling?)>> ;                parameters;                parameter "real", "x", "The value in pixel";                              return_value "real", "The value in pixel. ";                }          
docname "pt", "code:unit", do {                 dsyntax <<x pt>>;                synopsis "Convert from pt to pixels" ;                 description <<Convert from pt to pixels>> ;                parameters;                parameter "real", "x", "The value in point";                              return_value "real", "The value in pixel. ";                }          
docname "pan", "gui", do {                 dsyntax <<pan dx, dy>>;                synopsis "Pan the current view by the current amount" ;                 description <<Pan the current view by the current amount in x and y axis>> ;                parameters;                parameter "real", "dx", <<value for x-axis>>;                parameter "real", "dy", <<value for y-axis>>;                }          
docname "svg", "graph", do {                 dsyntax <<svg img>>;                synopsis "Create a texture from an SVG" ;                 description <<Draw an image from an SVG format>> ;                parameters;                parameter "text", "img", <<The image filename.>>;                return_value "", <<>>;                }          
docname "enable_animations", "gui", do {                 dsyntax <<enable_animations an>>;                synopsis "Enable or disable animations" ;                 description <<Enable or disable animations>> ;                parameters;                parameter "boolean", "an", <<on or off>>;                return_value "boolean", <<True if previous state was on.>>;                }          
docname "button_group", "widget", do {                 dsyntax <<button_group ex, b>>;                synopsis "Create a button group." ;                 description <<Create a group. Buttons included in this group are mutually exclusive. It is useful to create multiple group of radio buttons>> ;                parameters;                parameter "boolean", "ex", <<If true, the group is exclusive.>>;                parameter "tree", "t", <<The code of buttons>>;                }          
docname "eye_position", "gui", do {                 synopsis "eye position manipulation" ;                 dsyntax <<eye_position>>;                return_value "infix", <<(x,y) :the current eye position.>>;                description <<Get the eye position value.>> ;                dsyntax <<eye_position x, y>>;                description <<Set the eye position value.>> ;                parameters;                parameter "real", "x", <<eye position on x-axis>>;                parameter "real", "y", <<eye position on y-axis>>;                }          
docname "strikeout", "text:font", do {                 dsyntax <<strikeout>>;                synopsis "Strikeout attribute of the font" ;                 description <<Select whether we strikeout a font. Qt doesn't support setting the size of the underline, it's on or off.>> ;                parameters;                parameter "real", "a", <<Strikeout values: 0 is off, values > 0 are on.>>;                }          
docname "object", "graph", do {                 dsyntax <<object x, y, z, w, h, d, f>>;                synopsis "Load a 3D object" ;                 description <<Load a 3D object [TODO: which format of file can be loaded ?>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "z", <<z-coordinate>>;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "real", "d", <<depth>>;                parameter "text", "f", <<filename>>;                }          
docname "anchor", "graph", do {                 dsyntax <<anchor code>>;                synopsis "" ;                 description <<Anchor a set of shapes to the current position>> ;                parameters;                parameter "tree", "code", <<The code that represent the shapes to be anchored.>>;                return_value "tree", <<The result of the child execution.>>;                }          
docname "center", "text:spread", do {                 dsyntax <<center a>>;                synopsis "Horizontal centering" ;                 description <<Set the horizontal center attibute. An amount of 0 align the center of the text on the left of the box, an amount of 100 align the center of the text on the right of the box and an amount of 50 align the center of the text on the center of the box.>> ;                parameters;                parameter "real", "a", <<Place the center along x-axis>>;                }          
docname "weight", "text:font", do {                 dsyntax <<weight a>>;                synopsis "set the bold value of the font" ;                 description <<Select whether the font is bold or not. Qt weight values range from 0 to 99 with 50 = regular>> ;                parameters;                parameter "real", "a", <<The bold value of the font>>;                 }          
docname "status", "widget", do {                 dsyntax <<status t>>;                synopsis "Set the status line of the window" ;                 description <<Set the content of the status line of the window>> ;                parameters;                parameter "text", "t", <<The text for the status line.>>;                }          
docname "sphere", "graph", do {                 dsyntax <<sphere x, y, z, w, h, d, slices, stacks>>;                synopsis "sphere like" ;                 description <<GL sphere [TODO or ovoid ? Add the incidence of slices and stacks on the sphere rendering time.]>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "z", <<z-coordinate>>;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "real", "d", <<depth>>;                parameter "integer", "slices", <<number of slices>>;                parameter "integer", "stacks", <<[TODO]>>;               return_value "", <<>>;                }          
docname "spread", "text:spread", do {                 dsyntax <<spread a>>;                synopsis "[TODO: Quel est la difference entre spread et justify ? Est-ce l'ecart max autorise entre les lettres/mots ?]" ;                 description <<>> ;                parameters;                parameter "", "", <<>>;                return_value "", <<>>;                }          
docname "scaley", "graph:transform", do {                 dsyntax <<scaley y>>;                synopsis "Rescale along Y" ;                 description <<Rescale along Y-axis>> ;                parameters;                parameter "real", "y", <<scale factor.>>;                }          
docname "scalex", "graph:transform", do {                 dsyntax <<scalex x>>;                synopsis "Rescale along X" ;                 description <<Rescale along X-axis>> ;                parameters;                parameter "real", "x", <<scale factor.>>;                }          
docname "scalez", "graph:transform", do {                 dsyntax <<scalez z>>;                synopsis "Rescale along Z" ;                 description <<Rescale along Z-axis>> ;                parameters;                parameter "real", "z", <<scale factor.>>;                }          
docname "rotate", "graph:transform", do {                 dsyntax <<rotate rx, ry, rz>>;                synopsis "Rotation" ;                 description <<Rotation along an arbitrary axis>> ;                parameters;                parameter "real", "ra", <<[TODO : A-t-on une rotation autour de l'axe du temps ???]>>;                parameter "real", "rx", <<angle around X-axis>>;                parameter "real", "ry", <<angle around Y-axis>>;                parameter "real", "rz", <<angle around Z-axis>>;                }          
docname "paragraph_space", "text:spread", do {                 dsyntax <<paragraph_space before, after>>;                synopsis "Set the space around the paragraph" ;                 description <<Set the minimum space allowed around the paragraph. [TODO: Quelle valeur faut-il mettre si on ne veut modifier que la valeur avant (ou apres), est-ce -1, ou est-ce que des valeurs negatives sont autorisees et que dans ce cas des paragraphes peuvent se marcher dessus ?]>> ;                parameters;                parameter "real", "before", <<Space before the paragraph.>>;                parameter "real", "after", <<Space after the paragraph.>>;                }          
docname "ellipse_arc", "graph:path:shape", do {                 dsyntax <<ellipse_arc x, y, w, h, start, sweep>>;                synopsis "Elliptic sector" ;                 description <<Elliptic sector centered around (cx,cy) that occupies the given rectangle, beginning at the specified startAngle and extending sweepLength degrees counter-clockwise. Angles are specified in degrees. Clockwise arcs can be specified using negative angles.>> ;                parameters;                parameter "real", "cx", <<x-coordinate>>;                parameter "real", "cy", <<y-coordinate>>;                parameter "real", "w", <<width of the ellipse>>;                parameter "real", "h", <<height of the ellipse>>;                parameter "real", "start", <<start angle>>;                parameter "real", "sweep", <<sweep angle>>;                }          
docname "group", "code:group", do {                 dsyntax <<group t>>;                synopsis "Create a logical group" ;                 description <<Group objects together, make them selectable as a whole.>> ;                parameters;                parameter "tree", "t", <<The code to group>>;                }          
docname "frame", "widget", do {                 dsyntax <<frame x, y, w, h, prog>>;                synopsis "A frame with a content" ;                 description <<Draw a frame with the described content in 'prog'. This frame as no displayed border. It makes a texture of size (w,h) using 'frame_texture', and map it on a rectangle at (x,y) location.>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "tree", "prog", <<The program that represent the content of the frame>>;                return_value "tree", <<The result of 'prog' evaluation>>;                see "frame_texture";                }          
docname "after", "time", do {                 dsyntax <<after delay, code>>;                synopsis "Wait for time to execute code" ;                 description <<Execute the given code only after the specified amount of time.>> ;                parameters;                parameter "real", "delay", <<The delay in second. Sensitive upto millisecond.>>;                parameter "tree", "code", <<The code to execute.>>;                return_value "real", <<The real elapsed time.>>;                }          
docname "arrow", "graph:path:shape", do {                 dsyntax <<arrow x, y, w, h, ax, ay>>;                synopsis "Draw an arraw" ;                 description <<Draw an arraw>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "w", <<width of  [TODO: what ?]>>;                parameter "real", "h", <<height of [TODO: what ?]>>;                parameter "real", "ax", <<[TODO]>>;                parameter "real", "ay", <<[TODO]>>;                }          
docname "color", "graph:attribute", do {                 dsyntax <<color name, a>>;                dsyntax <<color r, g, b, a>>;                dsyntax <<color_hsl h, s, l, a>>;                dsyntax <<color_hsv h, s, v, a>>;                dsyntax <<color_cmyk c, m, y, k, a>>;                synopsis "Set the fill color" ;                 description <<Set the color for fill.>> ;                parameters;                parameter "text", "name", <<The name of the color, which can be one of the SVG color keywork names, or in one of these formats: #RGB or #RRGGBB  (each of R, G, and B being a single hex digit).>>;                parameter "real", "r", <<The red component of an color, is in the range 0.0 to 1.0.>>;                parameter "real", "g", <<The blue component of an RGB color, is in the range 0.0 to 1.0.>>;                parameter "real", "b", <<The green component of an RGB color, is in the range 0.0 to 1.0.>>;                parameter "real", "h", <<The hue of an HSL or HSV color if the color is chromatic (not gray), or meaningless if it is gray. It represents degrees on the color wheel familiar to most people. Red is 0, green is 120, and blue is 240.>>;                parameter "real", "s", <<The saturation of an HSL or HSV color, is in the range 0.0 to 1.0, and the bigger it is, the stronger the color is. Grayish colors have saturation near 0; very strong colors have saturation near 1.>>;                parameter "real", "l", <<The lightness an HSL color, is in the range 0.0 to 1.0. 0 is black; 1 is as far from black as possible. In the HSL model, lightness is defined as the average of the largest and smallest color components.>>;                parameter "real", "v", <<The value or brightness of an HSV color, is in the range 0.0 to 1.0. 0 is black; 1 is as far from black as possible. In the HSV model, value is defined as the largest component of a color.>>;                parameter "real", "c", <<The cyan component of the a color, is in the range 0.0 to 1.0.>>;                parameter "real", "m", <<The magenta component of a CMYK color, is in the range 0.0 to 1.0.>>;                parameter "real", "y", <<The Yellow component of a CMYK color, is in the range 0.0 to 1.0.>>;                parameter "real", "k", <<The black component of a CMYK color, is in the range 0.0 to 1.0.>>;                parameter "real", "a", <<The alpha channel, transparency of the color, is in the range 0.0 to 1.0. >>;                }          
docname "point", "graph:path", do {                 dsyntax <<point x, y, z, s>>;                synopsis "Draw a point" ;                 description <<Draw a point with the given size>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "z", <<z-coordinate>>;                parameter "real", "s", <<THe size of the point>>;                }          
docname "slant", "text:font", do {                 dsyntax <<slant a>>;                synopsis "Set slant percentage." ;                 description <<Set slant percentage.[TODO: J'aurais plutot vu une valeur de a/50 pour que slant 100 donne fontItalic 2, qui est le max] >> ;                parameters;                parameter "real", "a", <<slant percentage>>;                }          
docname "shape", "code:graph", do {                 dsyntax <<shape code>>;                synopsis "Make the shape selectable" ;                 description <<Evaluate the child and mark the current shape. Make the shape sensible to mosue events like selection, motion, rotation...>> ;                parameters;                parameter "tree", "code", <<The code of the shape.>>;                return_value "", <<The result of the child execution.>>;                }          
docname "scale", "graph:transform", do {                 dsyntax <<scale x, y, z>>;                synopsis "Scaling along three axes" ;                 description <<Scaling along three axes>> ;                parameters;                parameter "real", "x", <<x-scale factor.>>;                parameter "real", "y", <<y-scale factor.>>;                parameter "real", "z", <<z-scale factor.>>;                }          
docname "constant", "code", do {                 dsyntax <<constant t>>;                synopsis "a constant tree" ;                 description <<A tree that cannot be modify.>> ;                parameters;                parameter "tree", "t", <<the tree that is constant>>;                return_value "tree", <<the tree>>;                }          
docname "speech_balloon", "graph:path:shape", do {                 dsyntax <<speech_balloon x, y, w, h, r, ax, ay>>;                synopsis "Speech balloon" ;                 description <<Speech balloon with radius r for rounded corners, and point a for the tail>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "w", <<width of the balloon>>;                parameter "real", "h", <<height of the balloon>>;                parameter "real", "r", <<radius>>;                parameter "real", "ax", <<[TODO]>>;                parameter "real", "ay", <<[TODO]>>;                }          
docname "group_box", "widget", do {                 dsyntax <<group_box x, y, w, h, lbl, b>>;                synopsis "group box" ;                 description <<Draw a group box in the current frame. The x and y coordinate of widgets placed in this box are the colomn and row number. Total number of rows and columns is dynamic.>> ;                parameters;                parameter "real", "x", <<x-coordinate of this box>>;                parameter "real", "y", <<y-coordinate of this box>>;                parameter "real", "w", <<width of this box>>;                parameter "real", "h", <<height of this box>>;                parameter "text", "lbl", <<The label of the box>>;                parameter "tree", "b", <<The content of the box>>;                }          
docname "formula", "text", do {                 dsyntax <<formula t>>;                synopsis "Insert a block of text corresponding to the given formula" ;                 description <<Insert a block of text corresponding to the given formula>> ;                parameters;                parameter "tree", "t", <<The formula>>;                return_value "tree", <<The tree t given in parameter.>>;                }          
docname "enable_stereoscopy", "gui", do {                 dsyntax <<enable_stereoscopy s>>;                synopsis "Enable or disable stereoscopie mode" ;                 description <<Enable or disable stereoscopie mode>> ;                parameters;                parameter "boolean", "s", <<on or off>>;                return_value "", <<True if previous state was on.>>;                }          
docname "show_source", "gui", do {                 dsyntax <<show_source an>>;                synopsis "Source pane view" ;                 description <<Show or hide the source pane.>> ;                parameters;                parameter "boolean", "an", <<Show the source pane if true.>>;                return_value "", <<>>;                }          
docname "character_space", "text:spread", do {                 dsyntax <<character_space before, after>>;                synopsis "[TODO: words or characters ?]" ;                 description <<[TODO: dans widget.cpp on parle d'espace entre mots et non entre charactere. Cette clarification rejoint celles demandees audessus sur le spacing/spread]>> ;                parameters;                parameter "real", "before", <<Space before the [TODO].>>;                parameter "real", "after", <<Space after the [TODO].>>;                }          
docname "radio_button_texture", "widget", do {                 dsyntax <<radio_button_texture w, h, n, l, m, a>>;                synopsis "Make a texture out of a given radio button" ;                 description <<Make a texture out of a given radio button>> ;                parameters;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "text", "n", <<Name that uniquely identify this button>>;                parameter "text", "l", <<Label of the button>>;                parameter "text", "s", <<True if the button is selected>>;                parameter "tree", "a", <<The action to perform when the button state change from non-selected to selected.>>;                }          
docname "table_cell_fill", "table", do {                 dsyntax <<table_cell_fill b>>;                dsyntax <<fill>>;                                             synopsis "fill of the cell" ;                 description <<Define the fill code for cells>> ;                parameters;                parameter "tree", "b", <<fill code body.>>;                err "Error raised when invoked outside of a table context."                 }          
docname "text_flow", "text", do {                 dsyntax <<text_flow name>>;                synopsis "Names the flow" ;                 description <<Set the name of the current text flow>> ;                parameters;                parameter "text", "name", <<The name of the current flow>>;                return_value "text", <<The previous name. [TODO: The name of the previous flow or the previous name of the current flow ?]>>;                }          
docname "button_group_action", "widget", do {                 dsyntax <<button_group_action act>>;                synopsis "Action of the group" ;                 description <<Set the action to be executed by the current buttonGroup.When a button in the group is clicked, this action is triggered as well as the button's action.>> ;                parameters;                parameter "tree", "act", <<The action.>>;                }          
docname "push_button_texture", "widget", do {                 dsyntax <<push_button_texture w, h, n, l, a>>;                synopsis "Make a texture out of a given push button" ;                 description <<Make a texture out of a given push button>> ;                parameters;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "text", "n", <<Name that uniquely identify this button>>;                parameter "text", "l", <<Label of the button>>;                parameter "tree", "a", <<The action to perform when the button is clicked.>>;                }          
docname "goto_page", "page", do {                 dsyntax <<goto_page name>>;                synopsis "Directly go to the given page." ;                 description <<Directly go to the given page.>> ;                parameters;                parameter "text", "The name of the page to reach.", <<>>;                return_value "text", <<The name of the previously shown page.>>;                }          
docname "text_overflow", "text:graph", do {                 dsyntax <<text_overflow x, y, w, h>>;                synopsis "Overflow text box" ;                 description <<Overflow text box for the rest of the current text flow>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                }          
docname "toolbar", "widget:menu", do {                 dsyntax <<toolbar  "unique_name", "label", "loc">>;                synopsis "Add the toolBar" ;                 description <<Add the toolBar to the current widget at the specify location.>> ;                parameters;                parameter "text", "unique_name", <<Name that uniquely identify this toolbar>>;                parameter "text", "label", <<The label of the toolbar>>;                parameter "text", "loc", <<The location of the toolbar in the widget. Supported values are [n|N]*, [e|E]*, [s|S]*, [w|W|o|O]*>>;                }          
docname "texture", "graph:attribute", do {                 dsyntax <<texture img>>;                synopsis "Create a GL texture" ;                 description <<Build a GL texture out of an image file. Supported format are:
BMP	Windows Bitmap
GIF	Graphic Interchange Format (optional)
JPG	Joint Photographic Experts Group
JPEG	Joint Photographic Experts Group
PNG	Portable Network Graphics
PBM	Portable Bitmap
PGM	Portable Graymap
PPM	Portable Pixmap
TIFF	Tagged Image File Format
XBM	X11 Bitmap
XPM	X11 Pixmap>> ;                parameters;                parameter "text", "img", <<The image filename.>>;                }          
docname "print_page", "export", do {                 dsyntax <<print_page>>;                dsyntax <<print_page f>>;                        synopsis "Print a page" ;                 description <<Print a page either to a file or by picking file>> ;                parameters;                parameter "text", "f", <<file name. If empty a dialog box pops up.>>;                }          
docname "polygon_offset", "graph", do {                 dsyntax <<polygon_offset f0, f1, u0, u1>>;                synopsis "Set the polygon offset factors" ;                 description <<Set the polygon offset factors>> ;                parameters;                parameter "real", "f0", <<factor base>>;                parameter "real", "f1", <<factor increment>>;                parameter "real", "u0", <<unit base>>;                parameter "real", "u1", <<unit increment>>;                return_value "integer", <<the current polygon offset>>;                }          
docname "active_widget", "code:graph:widget", do {                 dsyntax <<active_widget code>>;                synopsis "Make the widget clickable" ;                 description <<Create a context for active widgets, e.g. buttons>> ;                parameters;                parameter "tree", "code", <<The code that represent the widget.>>;                return_value "tree", <<The result of the child execution.>>;                }          
docname "margins", "text:spread", do {                 dsyntax <<margins l, r>>;                synopsis "Set the horizontal margin for text" ;                 description <<Set the minimum space allowed around the page. [TODO: Quelle valeur faut-il mettre si on ne veut modifier que la valeur gauche (ou droite), est-ce -1, ou est-ce que des valeurs negatives sont autorisees et que dans ce cas on peut ecrire dans la marge ?]>> ;                parameters;                parameter "real", "l", <<left margin>>;                parameter "real", "r", <<right margin>>;                }          
docname "move_to", "graph:path", do {                 dsyntax <<move_to x, y, z>>;                synopsis "move to point" ;                 description <<Add a 'moveTo' to the current path>> ;                parameters;                parameter "real", "x", <<x-coordinate of the point to move to.>>;                parameter "real", "y", <<y-coordinate of the point to move to.>>;                parameter "real", "z", <<z-coordinate of the point to move to.>>;                }          
docname "overline", "text:font", do {                 dsyntax <<overline a>>;                synopsis "Overline attribute of the font" ;                 description <<Select whether we overline a font. Qt doesn't support setting the size of the underline, it's on or off.>> ;                parameters;                parameter "real", "a", <<Overline values: 0 is off, values > 0 are on.>>;                }          
docname "file_chooser_directory", "widget", do {                 dsyntax <<file_chooser_directory d>>;                dsyntax <<directory d>>;                synopsis "File chooser directory" ;                 description <<Set the directory to open first. Only available in a file chooser sub tree.>> ;                parameters;                parameter "text", "d", <<directory name>>;                see "file_chooser";                }          
docname "lorem_ipsum", "text:debug", do {                 dsyntax <<lorem_ipsum w>>;                synopsis "Produce text" ;                 description <<Generate arbitrary length dummy text based on the well-known sequence>> ;                parameters;                parameter "integer", "w", <<The number of word to insert>>;                return_value "text", <<A dummy text with the required number of words>>;                }          
docname "file_chooser_label", "widget", do {                 dsyntax <<file_chooser_label>>;                synopsis "Set labels on a file dialog" ;                 description <<Set labels on a file dialog. Only available in a file chooser sub tree.>> ;                parameters;                parameter "text", "t", <<The label for the file chooser dialog box.>>;                see "file_chooser";                }          
docname "justify", "text:spread", do {                 dsyntax <<justify a>>;                synopsis "Horizontal justification" ;                 description <<Horizontaly justify the text. An amount of 0 pack the text on the left, an amount of 100 pack the text on the right and an amount of 50 spread regularly the text over the line>> ;                parameters;                parameter "real", "a", <<Amount of justification along x-axis>>;                }          
docname "line_edit", "widget", do {                 dsyntax <<line_edit x, y, w, h, line>>;                synopsis "Draw a line editor in the current frame" ;                 description <<A line edit allows the user to enter and edit a single line of plain text with a useful collection of editing functions, including undo and redo, cut and paste, and drag and drop.>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "[in/out] text", "line", <<The text in the line edit widget. It is an in/out parameter.>>;                }          
docname "chooser", "code:chooser", do {                 dsyntax <<chooser c>>;                synopsis "" ;                 description <<Create a chooser with the given caption. A chooser shows a selection among the possible commands>> ;                parameters;                parameter "text", "c", <<The caption of the chooser.>>;                }          
docname "line_edit_texture", "widget", do {                 dsyntax <<line_edit_texture w, h, u>>;                synopsis "Make a texture out of a given line editor" ;                 parameters;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "[in/out] text", "u", <<The text to insert in the line edit widget.>>;                see "line_edit" ;                }          
docname "callout", "graph:path:shape", do {                 dsyntax <<callout>>;                synopsis "callout" ;                 description <<Callout with radius r for corners, and point a, width b [TODO: is d or b] for the tail>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "w", <<width of the callout>>;                parameter "real", "h", <<height of the callout>>;                parameter "real", "r", <<radius>>;                parameter "real", "ax", <<x-coordinate of point a>>;                parameter "real", "ay", <<y-coordinate of point a>>;                parameter "real", "d", <<[TODO]>>;                }          
docname "quad_to", "graph:path", do {                 dsyntax <<quad_to cx, cy, cz, x, y, z>>;                synopsis " quadric curveTo" ;                 description <<Add a quadric curveTo to the current path.>> ;                parameters;                parameter "real", "cx", <<x-coordinate of the control point.>>;                parameter "real", "cy", <<y-coordinate of the control point.>>;                parameter "real", "cz", <<z-coordinate of the control point.>>;                parameter "real", "x", <<x-coordinate of the point to finish to.>>;                parameter "real", "y", <<y-coordinate of the point to finish to.>>;                parameter "real", "z", <<z-coordinate of the point to finish to.>>;                }          
docname "line_relative", "graph:path", do {                 dsyntax <<line_relative dx, dy, dz>>;                synopsis "relative line to" ;                 description <<Add a relative 'lineTo' to the current path>> ;                parameters;                parameter "real", "dx", <<delta to line to on x-axis.>>;                parameter "real", "dy", <<delta to line to on y-axis.>>;                parameter "real", "dz", <<delta to line to on z-axis.>>;                return_value "", <<>>;                }          
docname "push_button", "widget", do {                 dsyntax <<push_button x, y, w, h, n, l, a>>;                synopsis "A push button" ;                 description <<Draw a push button in the curent frame>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "text", "n", <<Name that uniquely identify this button>>;                parameter "text", "l", <<Label of the button>>;                parameter "tree", "a", <<The action to perform when the button is clicked.>>;                }          
docname "video_player_texture", "widget", do {                 dsyntax <<video_player_texture w, h, u>>;                synopsis "Make a video player texture." ;                 description <<The video plyer texture associated.>> ;                parameters;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "text", "u", <<The URL to play>>;                return_value "", <<>>;                }          
docname "font_size", "text:font", do {                 dsyntax <<font_size s>>;                synopsis "Select a font size" ;                 description <<Select a font size>> ;                parameters;                parameter "real", "s", <<The font size.>>;                }          
docname "chooser_pages", "code:chooser", do {                 dsyntax <<chooser_pages p, l>>;                synopsis "pages added to the chooser" ;                 description <<Add the list of pages to the chooser>> ;                parameters;                parameter "synbol", "p", <<The prefix that will be added to the page name>>;                parameter "text", "l", <<The text that will be added as label prefix to the name of pages.>>;                }          
docname "center_position", "gui", do {                 synopsis "Center position management" ;                 dsyntax <<center_position>>;                description <<Return the current center position>> ;                return_value "infix", <<(x,y) : the current center position>>;                dsyntax <<center_position x, y>>;                description <<Set the current center position>> ;                parameters;                parameter "real", "x", <<eye position on x-axis>>;                parameter "real", "y", <<eye position on y-axis>>;                }          
docname "generate_doc", "documentation", do {          dsyntax "generate_doc t" ;         synopsis "generate the doc for the specified tree ";          description "Extract the documentation from the specified tree. ";          parameters;          parameter "tree", "t", "The tree from wich extracting the documentation";         return_value "Text", "The Text contains the documentation, ready to be parsed. ";         }
docname "vertical_justify", "text:spread", do {                 dsyntax <<vertical_justify a>>;                synopsis "Vertical justification" ;                 description <<Verticaly justify the text. An amount of 0 pack the text on the top, an amount of 100 pack the text on the bottom and an amount of 50 spread regularly the text over the box>> ;                parameters;                parameter "real", "a", <<Amount of justification along y-axis>>;                }          
docname "star_polygon", "graph:path:shape", do {                 dsyntax <<star_polygon cx, cy, w, h, p, q>>;                synopsis "Draw a star" ;                 description <<GL regular p-side star polygon {p/q} centered around (cx,cy)>> ;                parameters;                parameter "real", "cx", <<center x-coordinate>>;                parameter "real", "cy", <<center y-coordinate>>;                parameter "real", "w", <<width of the star>>;                parameter "real", "h", <<height of the star>>;                parameter "real", "p", <<Number of branch[TODO: is OK?]>>;                parameter "real", "q", <<[TODO]>>;                }          
docname "path_texture", "graph:path", do {                 dsyntax <<path_texture x, y, z>>;                synopsis "Not supported yet" ;                 description << NOT SUPPORTED YET. Add a texture coordinate to the path. NOT SUPPORTED YET>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "z", <<z-coordinate>>;                }          
docname "delete_selection", "tree", do {                 dsyntax <<delete_selection>>;                synopsis "Delete the selection" ;                 description <<Delete the selection (with text support)>> ;                parameters;                parameter "text", "k", <<key [TODO]>>;                }          
docname "rotatex", "graph:transform", do {                 dsyntax <<rotatex rx>>;                synopsis "Rotate around X" ;                 description <<Rotate around X axis.>> ;                parameters;                parameter "real", "rx", <<The angle of rotation in degree.[TODO : check the unit]>>;                }          
docname "rotatey", "graph:transform", do {                 dsyntax <<rotatey ry>>;                synopsis "Rotate around Y" ;                 description <<Rotate around Y axis.>> ;                parameters;                parameter "real", "ry", <<The angle of rotation in degree.[TODO : check the unit]>>;                }          
docname "rotatez", "graph:transform", do {                 dsyntax <<rotatez rz>>;                synopsis "Rotate around Z" ;                 description <<Rotate around Z axis.>> ;                parameters;                parameter "real", "rz", <<The angle of rotation in degree.[TODO : check the unit]>>;                }          
docname "refresh", "code:graph:time", do {                 dsyntax <<refresh d>>;                synopsis "Refresh after d second" ;                 description <<Refresh the screen after the given time interval>> ;                parameters;                parameter "real", "d", <<The delay to wait.>>;                return_value "boolean", <<>>;                }          
docname "font_chooser_texture", "widget", do {                 dsyntax <<font_chooser_texture w, h, t>>;                synopsis "Make a texture out of a given color chooser" ;                 description <<Make a texture out of a given color chooser>> ;                 parameters;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "tree", "t", <<tree to update with new font>>;                }          
docname "radio_button", "widget", do {                 dsyntax <<radio_button x, y, w, h, n, l, m, a>>;                synopsis "Draw a radio button" ;                 description <<Draw a radio button in the curent frame. Associate the action to perform when the button state change from non-selected to selected.>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "text", "n", <<Name that uniquely identify this button>>;                parameter "text", "l", <<Label of the button>>;                parameter "text", "s", <<True if the button is selected>>;                parameter "tree", "a", <<The action to perform when the button state change from non-selected to selected.>>;                }          
docname "texture_wrap", "graph", do {                 dsyntax <<texture_wrap s, t>>;                synopsis "wrap textures or clamp them" ;                 description <<Record if we want to wrap textures or clamp them>> ;                parameters;                parameter "boolean", "s", <<[TODO]>>;                parameter "boolean", "t", <<[TODO]>>;                }          
docname "file_chooser_filter", "widget", do {                 dsyntax <<file_chooser_filter>>;                synopsis "Set the file filters" ;                 description <<Set the file filters (file pattern, e.g. *.img). Only available in a file chooser sub tree.>> ;                parameters;                parameter "text", "t", <<filter for file>>;                see "file_chooser";                }          
docname "file_chooser_action", "widget", do {                 dsyntax <<file_chooser_action t>>;                dsyntax <<action t>>;                synopsis "File chooser action" ;                 description <<Set the action that will be execute when OK is pressed. Only available in a file chooser sub tree.>> ;                parameters;                parameter "tree", "t", <<The action to modify and execute when file is chosen.>>;                see "file_chooser";                }          
docname "check_box_button_texture", "widget", do {                 dsyntax <<check_box_button_texture w, h, n, l, m, a>>;                synopsis "Make a texture out of a given checkbox button" ;                 description <<Make a texture out of a given checkbox button>> ;                parameters;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "text", "n", <<Name that uniquely identify this button>>;                parameter "text", "l", <<Label of the button>>;                parameter "text", "m", <<True if the button is marked>>;                parameter "tree", "a", <<The action to perform when the button state change from non-s                }          
docname "check_box_button", "widget", do {                 dsyntax <<check_box_button x, y, w, h, n, l, m, a>>;                synopsis "Draw a check button" ;                 description <<Draw a check button in the curent frame>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "text", "n", <<Name that uniquely identify this button>>;                parameter "text", "l", <<Label of the button>>;                parameter "text", "m", <<True if the button is marked>>;                parameter "tree", "a", <<The action to perform when the button state change from non-sed.>>;                 }          
docname "rectangle", "graph:path:shape", do {                 dsyntax <<rectangle x, y, w, h>>;                synopsis "Draw a rectangle" ;                 description <<Draw a rectangle>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "w", <<width of the rectangle>>;                parameter "real", "h", <<height of the rectangle>>;                }          
docname "elliptical_rectangle", "graph:path:shape", do {                 dsyntax <<elliptical_rectangle>>;                synopsis "Elliptical rectangle" ;                 description <<Elliptical rectangle with ratio r for the elliptic sides>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "w", <<width of the rectangle>>;                parameter "real", "h", <<height of the rectangle>>;                parameter "real", "r", <<ration of the ellpitic sides>>;                }          
docname "group_box_texture", "widget", do {                 dsyntax <<group_box_texture w, h, lbl>>;                synopsis "" ;                 description <<Make a texture out of a given group box.>> ;                parameters;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "text", "lbl", <<The label of the box>>;                }          
docname "full_screen", "gui", do {                 dsyntax <<full_screen fs>>;                synopsis "Switch to full screen" ;                 description <<Set the full screen mode>> ;                parameters;                parameter "boolean", "fs", <<on or off>>;                return_value "", <<>>;                }          
docname "vertical_margins", "text:spread", do {                 dsyntax <<vertical_margins t, b>>;                synopsis "Set the vertical margin for text" ;                 description <<Set the minimum space allowed around the page. [TODO: Quelle valeur faut-il mettre si on ne veut modifier que la valeur gauche (ou droite), est-ce -1, ou est-ce que des valeurs negatives sont autorisees et que dans ce cas on peut ecrire dans la marge ?]>> ;                parameters;                parameter "real", "t", <<top margin>>;                parameter "real", "b", <<bottom margin>>;                }          
docname "menu_item", "widget:menu", do {                 dsyntax <<menu_item "unique_name", "label", "icon", checkable, isChecked, tree>>;                synopsis "add an entry in a menu" ;                 description <<Add an entry in the current menu with the label, icon, checkmark and command.>> ;                parameters;                parameter "text", "unique_name", <<Name that uniquely identify this entry>>;                parameter "text", "label", <<The label of the entry>>;                parameter "text", "icon", <<The name of the icon (filename).>>;                parameter "boolean", "checkable", <<Should this entry carry a check box ?>>;                parameter "text", "isChecked", <<If this entry carries a check box, is it cheked or not.>>;                parameter "tree", "t", <<The command to execute on item selection.>>;                }          
docname "endpoints_style", "graph:path", do {                 dsyntax <<endpoints_style s, e>>;                synopsis "style of the path endpoints" ;                 description <<Specify the style of the path endpoints. Supported values are : ARROWHEAD, ARROWHEAD, POINTER, DIAMOND, CIRCLE, SQUARE, BAR, CUP, FLETCHING, HOLLOW_CIRCLE, HOLLOW_SQUARE.>> ;                parameters;                parameter "symbol", "s", <<start endpoint style>>;                parameter "symbol", "e", <<end endpoint style>>;                return_value "", <<>>;                }          
docname "on_click", "mouse", do {                 dsyntax <<on_click code>>;                synopsis "Associate code with click." ;                 description <<Associate the specified code to the click>> ;                parameters;                parameter "tree", "code", <<The code to execute>>;                see "on";                }          
docname "chooser_choice", "code:chooser", do {                 dsyntax <<chooser_choice l, t>>;                synopsis "Add a command in the chooser list." ;                 description <<Create a chooser item and associate a command>> ;                parameters;                parameter "text", "l", <<label of the command>>;                parameter "tree", "t", <<the command>>;                }          
docname "video_player", "widget", do {                 dsyntax <<video_player x, y, w, h, u>>;                synopsis "Make a video player" ;                 description <<It creates a video player based on the Phonon library. Then the supported format are platform dependant.>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "text", "u", <<The URL of the video to play.>>;                }          
docname "page_link", "page", do {                 dsyntax <<page_link key, name>>;                synopsis "Indicate the chaining of pages." ;                 description <<Links the key with the named page.>> ;                parameters;                parameter "text", "key", <<The key name.>>;                parameter "text", "name", <<The name of the page to link>>;                return_value "text", <<The name of the page previously linked to this key.>>;                }          
docname "path_color", "graph:path", do {                 dsyntax <<path_color>>;                synopsis "Not supported yet" ;                 description <<NOT SUPPORTED YET. Add a color element to the path. NOT SUPPORTED YET. >> ;                parameters;                parameter "real", "r", <<The red componant of the color>>;                parameter "real", "g", <<The blue componant of the color>>;                parameter "real", "b", <<The green componant of the color>>;                parameter "real", "a", <<Alpha channel: the transparency of the color. >>;                }          
docname "triangle", "graph:path:shape", do {                 dsyntax <<triangle x, y, b, h>>;                synopsis "Isocele triangle" ;                 description <<Draw an isocele triangle>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "b", <<base of the triangle>>;                parameter "real", "h", <<height of the triangle>>;                }          
docname "right_triangle", "graph:path:shape", do {                 dsyntax <<right_triangle x, y, b, h>>;                synopsis "Right triangle" ;                 description <<Draw a right triangle>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "b", <<base of the triangle>>;                parameter "real", "h", <<height of the triangle>>;                }          
docname "texture_transform", "graph", do {                 dsyntax <<texture_transform t>>;                synopsis "Apply a texture transformation" ;                 description <<Apply a texture transformation.[TODO: de quel genre ?]>> ;                parameters;                parameter "tree", "t", <<[TODO]>>;                return_value "tree", <<The result of the child evaluation.>>;                }          
docname "table_cell_border", "table", do {                 dsyntax <<table_cell_border>>;                dsyntax <<border>>;                                             synopsis "Define the border code for cells" ;                 description <<Define the border code for cells. The short name is border.>> ;                parameters;                parameter "tree", "b", <<border code body.>>;                err "Error raised when invoked outside of a table context."                 }          
docname "color_chooser_texture", "widget", do {                 dsyntax <<color_chooser_texture w, h, t>>;                synopsis "Make a texture out of a given color chooser" ;                 description <<Make a texture out of a given color chooser>> ;                parameters;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "tree", "t", <<tree to update with new color>>;                }          
docname "chooser_commands", "code:chooser", do {                 dsyntax <<chooser_commands, p, t>>;                synopsis "Add all commands from the symbols list." ;                 description << Add all commands in the current symbol table that have the given prefix>> ;                parameters;                parameter "text", "p", <<The prefix>>;                parameter "text", "t ", <<The label>>;                }          
docname "cubic_to", "graph:path", do {                 dsyntax <<cubic_to c1x, c1y, c1z, c2x, c2y, c2z, x, y, z>>;                synopsis "cubic curveTo" ;                 description <<Add a cubic curveTo to the current path>> ;                parameters;                parameter "real", "cx1", <<x-coordinate of the first control point.>>;                parameter "real", "cy1", <<y-coordinate of the first control point.>>;                parameter "real", "cz1", <<z-coordinate of the first control point.>>;                parameter "real", "cx2", <<x-coordinate of the second control point.>>;                parameter "real", "cy2", <<y-coordinate of the second control point.>>;                parameter "real", "cz2", <<z-coordinate of the second control point.>>;                parameter "real", "x", <<x-coordinate of the point to finish to.>>;                parameter "real", "y", <<y-coordinate of the point to finish to.>>;                parameter "real", "z", <<z-coordinate of the point to finish to.>>;                }          
docname "rounded_rectangle", "graph:path:shape", do {                 dsyntax <<rounded_rectangle x, y, w, h, r>>;                synopsis "Rounded rectangle" ;                 description <<Rounded rectangle with radius r for the rounded corners>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "w", <<width of the rectangle>>;                parameter "real", "h", <<height of the rectangle>>;                parameter "real", "r", <<corner radius>>;                }          
docname "underline", "text:font", do {                 dsyntax <<underline a>>;                synopsis "Underline attribute of the font" ;                 description <<Select whether we underline a font. Qt doesn't support setting the size of the underline, it's on or off.>> ;                parameters;                parameter "real", "a", <<Underline values: 0 is off, values > 0 are on.>>;                }          
docname "double_arrow", "graph:path:shape", do {                 dsyntax <<double_arrow x, y, w, h, ax, ay>>;                synopsis "Double arraw" ;                 description <<Draw a symetric double arraw>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "w", <<width of  [TODO: what ?]>>;                parameter "real", "h", <<height of [TODO: what ?]>>;                parameter "real", "ax", <<[TODO]>>;                parameter "real", "ay", <<[TODO]>>;                }          
docname "stretch", "text:font", do {                 dsyntax <<stretch s>>;                synopsis "Set font stretching factor" ;                 description <<Set font stretching factor. Qt font stretch ranges from 0 to 4000, with 100 = 100%.>> ;                parameters;                parameter "real", "s", <<The font stretching factor. Value range is from 0 to 4000, with 100 = 100%>>;                }          
docname "submenu", "widget:menu", do {                 dsyntax <<submenu "unique_name", "label", "icon">>;                synopsis "Create/Select a submenu" ;                 description <<Add the submenu to the current menu. If the submenu already exist, it is updated and set as the current menu>> ;                parameters;                parameter "text", "unique_name", <<Name that uniquely identify this menu>>;                parameter "text", "label", <<The label of the menu>>;                parameter "text", "icon", <<The name of the icon (filename).>>;                }          
docname "spacing", "text:spread", do {                 dsyntax <<spacing a>>;                synopsis "[TODO]" ;                 description <<[TODO]>> ;                parameters;                parameter "real", "a", <<[TODO]>>;                }          
docname "debug_parameters", "graph:debug", do {                 dsyntax <<debug_parameters x, y, w, h>>;                synopsis "Set debug parameters" ;                 description <<Set debug parameters for fine-tuning stuff>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                }          
docname "text_edit_key", "text", do {                 dsyntax <<text_edit_key k>>;                synopsis "[TODO]" ;                 description <<Send a key to the text editing activities. [TODO: Concretement, ca fait quoi ???]>> ;                parameters;                parameter "text", "k", <<key name>>;                return_value "boolean", <<true/false [TODO]>>;                }          
docname "text_box", "text:graph", do {                 dsyntax <<text_box x, y, w, h, t>>;                synopsis "Create a new page layout" ;                 description <<Create a new page layout and render text in it.>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "tree", "t", <<text description>>;                return_value "tree", <<t evaluation result>>;                }          
docname "vertical_center", "text:spread", do {                 dsyntax <<vertical_center a>>;                synopsis "Vertical centering" ;                 description <<Set the vertical center attibute. An amount of 0 align the center of the text on the top of the box, an amount of 100 align the center of the text on the bottom of the box and an amount of 50 align the center of the text on the center of the box.>> ;                parameters;                parameter "real", "a", <<Place the center along y-axis>>;                }          
docname "translatez", "graph:transform", do {                 dsyntax <<translatez>>;                synopsis "Translate along Z" ;                 description <<Translate along Z-axis>> ;                parameters;                parameter "real", "z", <<z translation.>>;                }          
docname "translatey", "graph:transform", do {                 dsyntax <<translatey>>;                synopsis "Translate along Y" ;                 description <<Translate along Y-axis>> ;                parameters;                parameter "real", "y", <<y translation.>>;                }          
docname "translatex", "graph:transform", do {                 dsyntax <<translatex x>>;                synopsis "Translate along X" ;                 description <<Translate along X-axis>> ;                parameters;                parameter "real", "x", <<x translation.>>;                }          
docname "vertical_spread", "text:spread", do {                 dsyntax <<vertical_spread a>>;                synopsis "[TODO: Quel est la difference entre spread et justify ?]" ;                 description <<[TODO]>> ;                parameters;                parameter "real", "a", <<[TODO]>>;                }          
docname "vertical_spacing", "text:spread", do {                 dsyntax <<vertical_spacing a>>;                synopsis "[TODO]" ;                 description <[TODO]<>> ;                parameters;                parameter "real", "a", <<[TODO]>>;                 }          
docname "translate", "graph:transform", do {                 dsyntax <<translate x, y, z>>;                synopsis "Translation along three axes" ;                 description <<Translation along three axes>> ;                parameters;                parameter "real", "x", <<x translation.>>;                parameter "real", "y", <<y translation.>>;                parameter "real", "z", <<z translation.>>;                }          
docname "set_attribute", "tree", do {                 dsyntax <<set_attribute n, t>>;                synopsis "set attribute is selection" ;                 description <<Insert the tree in all shapes in the selection>> ;                parameters;                parameter "text", "n", <<Attribute name>>;                parameter "tree", "t", <<Attribute value >>;                }          
docname "on_mouseover", "mouse", do {                 dsyntax <<on_mouseover code>>;                synopsis "Associate code with mouse over" ;                 description <<Associate the specified code to the mouse over>> ;                parameters;                parameter "tree", "code", <<The code to execute>>;                see "on";                }          
docname "font_scaling", "text:font", do {                 dsyntax <<font_scaling>>;                synopsis "Change the font scaling factor" ;                 description <<Change the font scaling factor>> ;                parameters;                parameter "real", "s", <<Scaling factor>>;                parameter "real", "ms", <<Minimum AA size>>;                return_value "", <<>>;                }          
docname "frame_texture", "widget", do {                 dsyntax <<frame_texture w, h, prog>>;                synopsis "A texture with content" ;                 description <<Make a texture out of the described content>> ;                parameters;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "tree", "prog", <<The program that represent the content of the frame>>;                return_value "tree", <<The result of 'prog' evaluation>>;                see "frame";                }          
docname "move_relative", "graph:path", do {                 dsyntax <<move_relative dx, dy, dz>>;                synopsis "relative moveTo" ;                 description <<Add a relative moveTo>> ;                parameters;                parameter "real", "dx", <<delta to move to on x-axis.>>;                parameter "real", "dy", <<delta to move to on y-axis.>>;                parameter "real", "dz", <<delta to move to on z-axis.>>;                }          
docname "line_width", "graph:attribute", do {                 dsyntax <<line_width lw>>;                synopsis "Select the line width for OpenGL" ;                 description <<Set the line width for OpenGL>> ;                parameters;                parameter "real", "lw", <<The line width to set.>>;                }          
docname "color", "graph:attribute", do {                 dsyntax <<line_color name, a>>;                dsyntax <<line_color r, g, b, a>>;                dsyntax <<line_color_hsl h, s, l, a>>;                dsyntax <<line_color_hsv h, s, v, a>>;                dsyntax <<line_color_cmyk c, m, y, k, a>>;                synopsis "Set the line color" ;                 description <<Set the color for lines.>> ;                parameters;                parameter "text", "name", <<The name of the color, which can be one of the SVG color keywork names, or in one of these formats: #RGB or #RRGGBB  (each of R, G, and B being a single hex digit).>>;                parameter "real", "r", <<The red component of an color, is in the range 0.0 to 1.0.>>;                parameter "real", "g", <<The blue component of an RGB color, is in the range 0.0 to 1.0.>>;                parameter "real", "b", <<The green component of an RGB color, is in the range 0.0 to 1.0.>>;                parameter "real", "h", <<The hue of an HSL or HSV color if the color is chromatic (not gray), or meaningless if it is gray. It represents degrees on the color wheel familiar to most people. Red is 0, green is 120, and blue is 240.>>;                parameter "real", "s", <<The saturation of an HSL or HSV color, is in the range 0.0 to 1.0, and the bigger it is, the stronger the color is. Grayish colors have saturation near 0; very strong colors have saturation near 1.>>;                parameter "real", "l", <<The lightness an HSL color, is in the range 0.0 to 1.0. 0 is black; 1 is as far from black as possible. In the HSL model, lightness is defined as the average of the largest and smallest color components.>>;                parameter "real", "v", <<The value or brightness of an HSV color, is in the range 0.0 to 1.0. 0 is black; 1 is as far from black as possible. In the HSV model, value is defined as the largest component of a color.>>;                parameter "real", "c", <<The cyan component of the a color, is in the range 0.0 to 1.0.>>;                parameter "real", "m", <<The magenta component of a CMYK color, is in the range 0.0 to 1.0.>>;                parameter "real", "y", <<The Yellow component of a CMYK color, is in the range 0.0 to 1.0.>>;                parameter "real", "k", <<The black component of a CMYK color, is in the range 0.0 to 1.0.>>;                parameter "real", "a", <<The alpha channel, transparency of the color, is in the range 0.0 to 1.0. >>;                }          
docname "binpacker", "graph:debug", do {                 dsyntax <<binpacker w, h, t>>;                synopsis "Debug the bin packer" ;                 description <<Debug the bin packer>> ;                parameters;                parameter "integer", "w", <<width>>;                parameter "integer", "h", <<height>>;                parameter "real", "t", <<[TODO]>>;                }          
docname "file_chooser_texture", "widget", do {                 dsyntax <<file_chooser_texture w, h, t>>;                synopsis "Make a texture out of a given file chooser" ;                 description <<Make a texture out of a given file chooser>> ;                parameters;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "tree", "t", <<tree to update with new file>>;                }          
docname "menu", "widget:menu", do {                 dsyntax <<menu "unique_name", "label", "icon">>;                synopsis "Create/Select a menu" ;                 description <<Add the menu to the current menu bar or create the contextual menu. If the menu already exist, it is updated and set as the current menu>> ;                parameters;                parameter "text", "unique_name", <<Name that uniquely identify this menu>>;                parameter "text", "label", <<The label of the menu>>;                parameter "text", "icon", <<The name of the icon (filename).>>;                }          
docname "inch", "code:unit", do {                 dsyntax <<x inch>>;                synopsis "Convert from inch to pixels" ;                 description <<Convert from inch to pixels>> ;                parameters;                parameter "real", "x", "The value in inch";                              return_value "real", "The value in pixel. ";                }          
docname "font", "text:font", do {                 dsyntax <<font f>>;                synopsis "Select a font family" ;                 description <<Select a font family>> ;                parameters;                parameter "tree", "f", <<The font description>>;                }          
docname "cone", "graph", do {                 dsyntax <<cone x, y, z, w, h, d>>;                synopsis "cone" ;                 description <<cone[TODO]>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "z", <<z-coordinate>>;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "real", "d", <<depth>>;                }          
docname "cube", "graph", do {                 dsyntax <<cube x, y, z, w, h, d>>;                synopsis "cube like" ;                 description <<parallelepiped rectangle>> ;                parameters;                parameter "real", "x", <<x-coordinate>>;                parameter "real", "y", <<y-coordinate>>;                parameter "real", "z", <<z-coordinate>>;                parameter "real", "w", <<width>>;                parameter "real", "h", <<height>>;                parameter "real", "d", <<depth>>;                }          
docname "zoom", "gui", do {                 synopsis "zoom manipulation" ;                 dsyntax <<zoom>>;                description <<Get the zoom level>> ;                return_value "real", <<the current zoom factor>>;                dsyntax <<zoom z>>;                description <<Set the zoom level>> ;                parameters;                parameter "real", "z", <<the zoom factor>>;                }          
docname "path", "graph:path", do {                 dsyntax <<path t>>;                synopsis "Start a path" ;                 description <<Evaluate the child tree within a polygon>> ;                parameters;                parameter "tree", "t", <<The definition of the path.>>;                return_value "tree", <<The result of the child evaluation.>>;                }          
docname "page", "page", do {                 dsyntax <<page name, content>>;                synopsis "Create a new page." ;                 description <<Create a new page in the document with the specified name and content.>> ;                parameters;                parameter "text", "name", <<The name of the page. [TODO ddd: What's happen if the name is not unique in the document ?]>>;                parameter "tree", "content", <<The content of the page.>>;                return_value "text", <<The name of the previously named page>>;                }          
docname "star", "graph:path:shape", do {                 dsyntax <<star x, y, w, h, p, r>>;                synopsis "Draw a star" ;                 description <<GL regular p-side star centered around (cx,cy), inner radius ratio r>> ;                parameters;                parameter "real", "cx", <<center x-coordinate>>;                parameter "real", "cy", <<center y-coordinate>>;                parameter "real", "w", <<width of the star>>;                parameter "real", "h", <<height of the star>>;                parameter "real", "p", <<Number of branch[TODO: is OK?]>>;                parameter "real", "r", <<inner radius ratio>>;                }          
docname "generate_all_doc", "documentation", do {          dsyntax "generate_all_doc filename" ;         synopsis "generate all the documentation. ";          description "Extract the documentation from the context, the primitive and the current document. It writes the documentation into the specified files if any. ";          parameters;          parameter "text", "filename", "The location where to write the documentation. If empty, no file written. ";         return_value "Text", "The Text contains the documentation, ready to be parsed. ";         }
docname "load_text", "text:file", do {                 dsyntax <<load_text f>>;                synopsis "Load a text file from disk" ;                 description <<Load a text file from disk. It uses the 'doc' prefix to look into resources>> ;                parameters;                parameter "text", "f", <<file name>>;                return_value "text", <<The content of the file.>>;                }          
docname "line_to", "graph:path", do {                 dsyntax <<line_to x, y, z>>;                synopsis "line to point" ;                 description <<Add a 'lineTo' to the current path>> ;                parameters;                parameter "real", "x", <<x-coordinate of the point to line to.>>;                parameter "real", "y", <<y-coordinate of the point to line to.>>;                parameter "real", "z", <<z-coordinate of the point to line to.>>;                }          
docname "line_stipple", "graph:attribute", do {                 dsyntax <<line_stipple p, s>>;                synopsis "line stipple pattern" ;                 description <<Select the line stipple pattern for OpenGL>> ;                parameters;                parameter "integer", "p", <<pattern [TODO: which value to which pattern ?]>>;                parameter "integer", "s", <<scale>>;                }          
docname "locally", "code", do {                 dsyntax <<locally code>>;                synopsis "Make a local context" ;                 description <<Evaluate the child tree while preserving the current state>> ;                parameters;                parameter "tree", "code", <<The code to execute in a local context>>;                return_value "tree", <<The result of the child execution.>>;                }          
docname "ellipse", "graph:path:shape", do {                 dsyntax <<ellipse cx, cy, w, h>>;                synopsis "Ellipse" ;                 description <<Draw an ellipse centered around (cx,cy), size w * h>> ;                parameters;                parameter "real", "cx", <<x-coordinate>>;                parameter "real", "cy", <<y-coordinate>>;                parameter "real", "w", <<width of the ellipse>>;                parameter "real", "h", <<height of the ellipse>>;                }          
docname "bold", "text:font", do {                 dsyntax <<bold>>;                synopsis "Make the font bold." ;                 description <<Make the font bold. Is equivalent to weight 75>> ;                see "weight";                 }          
docname "bring_forward", "code:zorder", do {                 dsyntax <<bring_forward>>;                synopsis "Bring the selection one forward" ;                 description <<Swap the selected shape and the one in front of it. This is done by swaping code in the source.> ;                }          
docname "bring_to_front", "code:zorder", do {                 dsyntax <<bring_to_front>>;                synopsis "Bring the selected shape to front" ;                 description <<Bring the selected shape to front. This moves the source code of the selection to the end of the page or program>> ;                }          
docname "close_path", "graph:path", do {                 dsyntax <<close_path>>;                synopsis "close the path" ;                 description <<Close the path back to its origin>> ;                }          
docname "column_break", "text:spread", do {                 dsyntax <<column_break>>;                synopsis "Insert a column break" ;                 description <<Insert a column break[TODO]>> ;                }          
docname "disable_depth_test", "code:graph", do {                 dsyntax <<disable_depth_test>>;                synopsis "" ;                 description <<[TODO : Je ne vois pas vraiment...]>> ;                }          
docname "doc_version", "version", do {                 dsyntax <<doc_version>>;                synopsis "The document version" ;                 description <<Return the version of the current document (if known)>> ;                return_value "text", <<The current document version>>;                }          
docname "enable_depth_test", "code:graph", do {                 dsyntax <<enable_depth_test>>;                synopsis "" ;                 description << [TODO : Je ne vois pas vraiment...] >> ;                }          
docname "frame_depth", "frame", do {                 dsyntax <<frame_depth>>;                synopsis "Return the depth of the current layout frame" ;                 description <<Return the depth of the current layout frame>> ;                return_value "real", <<Return the depth of the current layout frame>>;                }          
docname "frame_height", "frame", do {                 dsyntax <<frame_height>>;                synopsis "Return the height of the current layout frame" ;                 description <<Return the height of the current layout frame>> ;                return_value "real", <<Return the height of the current layout frame>>;                }          
docname "frame_width", "frame", do {                 dsyntax <<frame_width>>;                synopsis "Return the width of the current layout frame" ;                 description <<Return the width of the current layout frame>> ;                return_value "real", <<Return the width of the current layout frame>>;                }          
docname "group_selection", "code:group", do {                 dsyntax <<group_selection>>;                synopsis "Create the group from the selected objects" ;                 description <<Modify the source code to group the selection.>> ;                see "group";                }          
docname "italic", "text:font", do {                 dsyntax <<italic>>;                synopsis "set set italic" ;                 description <<Set slant value to 1 (medium value). Is equivalent to slant 100>> ;                see "slant";                 }          
docname "keyboard_modifiers", "code", do {                 dsyntax <<keyboard_modifiers>>;                synopsis "Get the current modifiers" ;                 description <<Get the current keyboard modifiers. The value is an OR combination of the following :
Qt::NoModifier	0x00000000	No modifier key is pressed.
Qt::ShiftModifier	0x02000000	A Shift key on the keyboard is pressed.
Qt::ControlModifier	0x04000000	A Ctrl key on the keyboard is pressed.
Qt::AltModifier	0x08000000	An Alt key on the keyboard is pressed.
Qt::MetaModifier	0x10000000	A Meta key on the keyboard is pressed.
Qt::KeypadModifier	0x20000000	A keypad button is pressed.
Qt::GroupSwitchModifier	0x40000000	X11 only. A Mode_switch key on the keyboard is pressed.
Note: On Mac OS X, the ControlModifier value corresponds to the Command keys on the Macintosh keyboard, and the MetaModifier value corresponds to the Control keys. The KeypadModifier value will also be set when an arrow key is pressed as the arrow keys are considered part of the keypad.
Note: On Windows Keyboards, Qt::MetaModifier and Qt::Key_Meta are mapped to the Windows key.>> ;                return_value "integer", <<Return the current modifiers>>;                }          
docname "light", "text:font", do {                 dsyntax <<light>>;                synopsis "Make the font thin." ;                 description <<Make the font thinner. Is equivalent to weight 25>> ;                see "weight";                 }          
docname "line_break", "text:spread", do {                 dsyntax <<line_break>>;                synopsis "Insert a line break" ;                 description <<Insert a line break in the current text.>> ;               }          
docname "menubar", "widget:menu", do {                 dsyntax <<menubar>>;                synopsis "Set the current menubar" ;                 description <<Set the current menubar to the default menuBar>> ;                }          
docname "mouse_buttons", "mouse", do {                 dsyntax <<mouse_buttons>>;                synopsis "Return the buttons of the last mouse event" ;                 description <<Return the buttons of the last mouse event. It is an OR combination of following values:
Qt::NoButton	0x00000000	The button state does not refer to any button (see QMouseEvent::button()).
Qt::LeftButton	0x00000001	The left button is pressed, or an event refers to the left button. (The left button may be the right button on left-handed mice.)
Qt::RightButton	0x00000002	The right button.
Qt::MidButton	0x00000004	The middle button.
Qt::XButton1	0x00000008	The first X button.
Qt::XButton2	0x00000010	The second X button.
>> ;                return_value "integer", <<Return the buttons of the last mouse event>>;                }          
docname "mouse_x", "mouse", do {                 dsyntax <<mouse_x>>;                synopsis "Mouse x-coordinate" ;                 description <<Mouse x-coordinate>> ;                return_value "real", <<Return the position of the mouse>>;                }          
docname "mouse_y", "mouse", do {                 dsyntax <<mouse_y>>;                synopsis "Mouse y-coordinate" ;                 description <<Mouse y-coordinate>> ;                return_value "real", <<Return the position of the mouse>>;                }          
docname "oblique", "text:font", do {                 dsyntax <<oblique>>;                synopsis "set to oblique" ;                 description <<Set slant value to 2 (higher value). Is equivalent to slant 200>> ;                see "slant";                 }          
docname "page_break", "text:spread", do {                 dsyntax <<page_break>>;                synopsis "Insert a page break" ;                 description <<Insert a page break. [TODO]>> ;                }          
docname "page_count", "page", do {                 dsyntax <<page_count>>;                synopsis "The number of page." ;                 description <<Return the number of pages in the current document>> ;                return_value "integer", <<Return the number of pages in the current document>>;                }          
docname "page_height", "page", do {                 dsyntax <<page_height>>;                synopsis "Return the height of pages" ;                 description <<Return the height of pages>> ;                return_value "real", <<Return the height of pages>>;                }          
docname "page_label", "page", do {                 dsyntax <<page_label>>;                synopsis "The current page name." ;                 description <<Return the current page name>> ;                return_value "text", <<Return the label of the current page>>;                }          
docname "page_number", "page", do {                 dsyntax <<page_number>>;                synopsis "The current page number" ;                 description <<Return the number of the current page>> ;                return_value "integer", <<Return the number of the current page>>;                }          
docname "page_time", "time", do {                 dsyntax <<page_time>>;                synopsis "Returns the page time" ;                 description <<Returns the time of the current page relatively to the current document's time, or relatively to the frozen time.>> ;                return_value "real", <<Return a fractional time, including milliseconds>>;                }          
docname "page_width", "page", do {                 dsyntax <<page_width>>;                synopsis "Return the width of pages" ;                 description <<Return the width of pages>> ;                return_value "real", <<Return the width of pages>>;                }          
docname "paragraph_break", "text:spread", do {                 dsyntax <<paragraph_break>>;                synopsis "Insert a paragraph break" ;                 description <<Insert a paragraph break>> ;                }          
docname "plain", "text:font", do {                 dsyntax <<plain>>;                synopsis "Set plain text" ;                 description <<Reset the font style, the font weight and the font stretch to normal; reset the font to no underline, nor strikeout, nor overline.>> ;                }          
docname "regular", "text:font", do {                 dsyntax <<regular>>;                synopsis "reset bold value to neutral." ;                 description <<Reset bold value to neutral. Is equivalent to weight 50.>> ;                  see "weight";                 }          
docname "reset_transform", "graph:transform", do {                 dsyntax <<reset_transform>>;                synopsis "Reset transform" ;                 description <<Reset transform to original projection state.>> ;                }          
docname "reset_view", "gui", do {                 dsyntax <<reset_view>>;                synopsis "Reset view to default parameters" ;                 description <<Restore default view parameters (zoom, position etc.)>> ;                }          
docname "roman", "text:font", do {                 dsyntax <<roman>>;                synopsis "No slant" ;                 description <<Set slant value to 0 (min value).>> ;                }          
docname "send_backward", "code:zorder", do {                 dsyntax <<send_backward>>;                synopsis "Send the selection one backward" ;                 description <<Swap the selected shape and the one just behind it. This is done by swaping code in the source.>> ;                }          
docname "send_to_back", "code:zorder", do {                 dsyntax <<send_to_back>>;                synopsis "Send the selected shape to back" ;                 description <<Send the selected shape to back. This moves the source code of the selection to the begining of the page or program>> ;                }          
docname "sentence_break", "text:spread", do {                 dsyntax <<sentence_break>>;                synopsis "Insert a sentence break" ;                 description <<Insert a sentence break in the text.>> ;                }          
docname "separator", "widget:menu", do {                 dsyntax <<separator>>;                synopsis "Add a separator" ;                 description <<Add a separator to the current menu or menu bar or tool bar. >> ;                }          
docname "table_cell_column", "table", do {                 dsyntax <<table_cell_column>>;                dsyntax <<column>>;                                             synopsis "Return the current column" ;                 description <<Return the current column index.>> ;                return_value "interger", <<The column index.>>;                err "Error raised when invoked outside of a table context."                 }          
docname "table_cell_h", "table", do {                 dsyntax <<table_cell_h>>;                dsyntax <<h>>;                                             synopsis "Height of the cell." ;                 description <<Get the vertical size of the current table cell>> ;                return_value "real", <<The size of the current cell along the y-axis>>;                err "Error raised when invoked outside of a table context."                 }          
docname "table_cell_row", "table", do {                 dsyntax <<table_cell_row>>;                dsyntax <<row>>;                                             synopsis "Return the current row" ;                 description <<Return the current row index>> ;                return_value "integer", <<the row index>>;                err "Error raised when invoked outside of a table context."                 }          
docname "table_cell_w", "table", do {                 dsyntax <<table_cell_w>>;                dsyntax <<w>>;                                             synopsis "Width of the cell" ;                 description <<Get the horizontal size of the current table cell>> ;                return_value "real", <<The size of the current cell along the x-axis>>;                }          
docname "table_cell_x", "table", do {                 dsyntax <<table_cell_x>>;                dsyntax <<x >>;                                             synopsis "x-ccordinate of the cell center" ;                 description <<Get the horizontal center of the current table cell>> ;                return_value "real", <<The coordinate of the center of the current cell on x-axis>>;                err "Error raised when invoked outside of a table context."                 }          
docname "table_cell_y", "table", do {                 dsyntax <<table_cell_y>>;                dsyntax <<y>>;                                             synopsis "y-ccordinate of the cell center" ;                 description <<Get the vertical center of the current table cell>> ;                return_value "real", <<The coordinate of the center of the current cell on y-axis>>;                }          
docname "table_columns", "table", do {                 dsyntax <<table_columns>>;                dsyntax <<columns>>;                                             synopsis "number of columns in the current table" ;                 description <<Return the number of columns in the current table>> ;                return_value "interger", <<number of columns in the table>>>;                err "Error raised when invoked outside of a table context."                 }          
docname "table_rows", "table", do {                 dsyntax <<table_rows>>;                dsyntax <<rows>>;                                             synopsis "number of rows in the current table" ;                 description <<Return the number of rows in the current table>> ;                return_value "integer", <<Number of rows in the table>>;                err "Error raised when invoked outside of a table context."                 }          
docname "tao_version", "version", do {                 dsyntax <<tao_version>>;                synopsis "The Tao version" ;                 description <<Return the version of the Tao program>> ;                return_value "text", <<The version of the running Tao program>>;                }          
docname "time", "time", do {                 dsyntax <<time>>;                synopsis "Return a fractional time, including milliseconds" ;                 description <<Returns the current document's time or the time at wich the document was frozen.>> ;                return_value "real", <<Return a fractional time, including milliseconds>>;                }          
docname "toggle_full_screen", "gui", do {                 dsyntax <<toggle_full_screen>>;                synopsis "Toggle the full screen mode" ;                 description <<Toggle the full screen mode>> ;                }          
docname "toggle_hand_cursor", "gui", do {                 dsyntax <<toggle_hand_cursor>>;                synopsis "Switch between hand and arrow cursor" ;                 description <<Switch between hand and arrow cursor>> ;                return_value "boolean", <<>>;                }          
docname "ungroup_selection", "code:group", do {                 dsyntax <<ungroup_selection>>;                synopsis "ungroup the selected group" ;                 description <<Modify the source code to ungroup the selection>> ;                see "group";                }          
docname "window_height", "window", do {                 dsyntax <<window_height>>;                synopsis "Return the height of window in which we display" ;                 description <<Return the height of window in which we display>> ;                return_value "real", <<Return the height of window in which we display>>;                }          
docname "window_width", "window", do {                 dsyntax <<window_width>>;                synopsis "Return the width of the window in which we display" ;                 description <<Return the width of the window in which we display>> ;                return_value "real", <<Return the width of the window in which we display>>;                }          
